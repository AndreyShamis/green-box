
AVRASM ver. 2.1.30  D:\Dropbox\Z_PROG_CODE\AVR\644_Pomidornica\List\Project.asm Sat May 12 18:53:08 2012

D:\Dropbox\Z_PROG_CODE\AVR\644_Pomidornica\List\Project.asm(1074): warning: Register r4 already defined by the .DEF directive
D:\Dropbox\Z_PROG_CODE\AVR\644_Pomidornica\List\Project.asm(1075): warning: Register r3 already defined by the .DEF directive
D:\Dropbox\Z_PROG_CODE\AVR\644_Pomidornica\List\Project.asm(1076): warning: Register r6 already defined by the .DEF directive
D:\Dropbox\Z_PROG_CODE\AVR\644_Pomidornica\List\Project.asm(1077): warning: Register r5 already defined by the .DEF directive
D:\Dropbox\Z_PROG_CODE\AVR\644_Pomidornica\List\Project.asm(1078): warning: Register r8 already defined by the .DEF directive
D:\Dropbox\Z_PROG_CODE\AVR\644_Pomidornica\List\Project.asm(1079): warning: Register r7 already defined by the .DEF directive
D:\Dropbox\Z_PROG_CODE\AVR\644_Pomidornica\List\Project.asm(1080): warning: Register r9 already defined by the .DEF directive
D:\Dropbox\Z_PROG_CODE\AVR\644_Pomidornica\List\Project.asm(1081): warning: Register r12 already defined by the .DEF directive
D:\Dropbox\Z_PROG_CODE\AVR\644_Pomidornica\List\Project.asm(1082): warning: Register r13 already defined by the .DEF directive
D:\Dropbox\Z_PROG_CODE\AVR\644_Pomidornica\List\Project.asm(1083): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Professional
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega644
                 ;Program type             : Application
                 ;Clock frequency          : 8,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : float, width, precision
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 2048 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega644
                 	#pragma AVRPART MEMORY PROG_FLASH 65536
                 	#pragma AVRPART MEMORY EEPROM 2048
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0800
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _milisec=R4
                 	.DEF _hours=R3
                 	.DEF _minutes=R6
                 	.DEF _seconds=R5
                 	.DEF _time_chaeck_const=R8
                 	.DEF _devices=R7
                 	.DEF _temp_old_counter=R9
                 	.DEF _write_old_memory=R12
                 	.DEF _control_locker=R13
                 	.DEF _agresive_check=R11
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 01bc 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 058f 	JMP  _timer1_ovf_isr
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 061a 	JMP  _usart_rx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0647 	JMP  _usart_tx_isr
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
                 
                 _conv_delay_G102:
000038 0064
000039 00c8
00003a 0190
00003b 0320      	.DB  0x64,0x0,0xC8,0x0,0x90,0x1,0x20,0x3
                 _bit_mask_G102:
00003c fff8
00003d fffc
00003e fffe
00003f ffff      	.DB  0xF8,0xFF,0xFC,0xFF,0xFE,0xFF,0xFF,0xFF
                 
                 _0x3:
D:\Dropbox\Z_PROG_CODE\AVR\644_Pomidornica\List\Project.asm(1130): warning: .cseg .db misalignment - padding zero byte
000040 00d2      	.DB  0xD2
                 _0xC3:
000041 0000
000042 0100
000043 0000      	.DB  0x0,0x0,0x0,0x1,0x0,0x0
                 _0x0:
000044 6f46
000045 6e75
000046 2064
000047 6425      	.DB  0x46,0x6F,0x75,0x6E,0x64,0x20,0x25,0x64
000048 6420
000049 7665
00004a 0d73
00004b 000a      	.DB  0x20,0x64,0x65,0x76,0x73,0xD,0xA,0x0
00004c 6f4e
00004d 2074
00004e 6f46
00004f 6e75      	.DB  0x4E,0x6F,0x74,0x20,0x46,0x6F,0x75,0x6E
000050 6564
000051 0d64
000052 000a
000053 4920      	.DB  0x64,0x65,0x64,0xD,0xA,0x0,0x20,0x49
000054 696e
000055 2074
000056 7265
000057 2072      	.DB  0x6E,0x69,0x74,0x20,0x65,0x72,0x72,0x20
000058 7525
000059 0d20
00005a 000a
00005b 5453      	.DB  0x25,0x75,0x20,0xD,0xA,0x0,0x53,0x54
00005c 504f
00005d 0a0d
00005e 5700
00005f 5241      	.DB  0x4F,0x50,0xD,0xA,0x0,0x57,0x41,0x52
000060 255b
000061 5d64
000062 253a
000063 0d66      	.DB  0x5B,0x25,0x64,0x5D,0x3A,0x25,0x66,0xD
000064 000a
000065 4c41
000066 5b45
000067 6425      	.DB  0xA,0x0,0x41,0x4C,0x45,0x5B,0x25,0x64
000068 3a5d
000069 6625
00006a 0a0d
00006b 4c00      	.DB  0x5D,0x3A,0x25,0x66,0xD,0xA,0x0,0x4C
00006c 4f49
00006d 4646
00006e 255b
00006f 5d64      	.DB  0x49,0x4F,0x46,0x46,0x5B,0x25,0x64,0x5D
000070 253a
000071 0d66
000072 000a
000073 5453      	.DB  0x3A,0x25,0x66,0xD,0xA,0x0,0x53,0x54
000074 5241
000075 0d54
000076 000a
000077 5447      	.DB  0x41,0x52,0x54,0xD,0xA,0x0,0x47,0x54
000078 5400
000079 255b
00007a 5d64
00007b 253a      	.DB  0x0,0x54,0x5B,0x25,0x64,0x5D,0x3A,0x25
00007c 332e
00007d 0d66
00007e 000a
00007f 4854      	.DB  0x2E,0x33,0x66,0xD,0xA,0x0,0x54,0x48
000080 4f43
000081 5400
000082 3a43
000083 6425      	.DB  0x43,0x4F,0x0,0x54,0x43,0x3A,0x25,0x64
000084 0a0d
000085 5400
000086 004d
000087 4d54      	.DB  0xD,0xA,0x0,0x54,0x4D,0x0,0x54,0x4D
000088 253a
000089 3a64
00008a 6425
00008b 253a      	.DB  0x3A,0x25,0x64,0x3A,0x25,0x64,0x3A,0x25
00008c 0d64
00008d 000a
00008e 5554
00008f 0046      	.DB  0x64,0xD,0xA,0x0,0x54,0x55,0x46,0x0
000090 4453
000091 4500
000092 4f4e
000093 0042      	.DB  0x53,0x44,0x0,0x45,0x4E,0x4F,0x42,0x0
000094 4e45
000095 4956
000096 4500
000097 4c4e      	.DB  0x45,0x4E,0x56,0x49,0x0,0x45,0x4E,0x4C
000098 0049
000099 4944
00009a 424f
00009b 4400      	.DB  0x49,0x0,0x44,0x49,0x4F,0x42,0x0,0x44
00009c 5649
00009d 0049
00009e 4944
00009f 494c      	.DB  0x49,0x56,0x49,0x0,0x44,0x49,0x4C,0x49
0000a0 5400
0000a1 5345
0000a2 0054
0000a3 4554      	.DB  0x0,0x54,0x45,0x53,0x54,0x0,0x54,0x45
0000a4 5453
0000a5 473a
0000a6 6f6f
0000a7 2e64      	.DB  0x53,0x54,0x3A,0x47,0x6F,0x6F,0x64,0x2E
0000a8 0a0d
0000a9 5200
0000aa 0054
0000ab 4354      	.DB  0xD,0xA,0x0,0x52,0x54,0x0,0x54,0x43
0000ac 5300
0000ad 5054
0000ae 0052
0000af 5453      	.DB  0x0,0x53,0x54,0x50,0x52,0x0,0x53,0x54
0000b0 5250
0000b1 6325
0000b2 0a0d
0000b3 5700      	.DB  0x50,0x52,0x25,0x63,0xD,0xA,0x0,0x57
0000b4 4852
0000b5 5452
0000b6 454f
0000b7 0050      	.DB  0x52,0x48,0x52,0x54,0x4F,0x45,0x50,0x0
0000b8 4547
0000b9 4454
0000ba 004e
0000bb 4144      	.DB  0x47,0x45,0x54,0x44,0x4E,0x0,0x44,0x41
0000bc 4e59
0000bd 4d55
0000be 4542
0000bf 3a52      	.DB  0x59,0x4E,0x55,0x4D,0x42,0x45,0x52,0x3A
0000c0 6425
0000c1 0a0d
0000c2 4100
0000c3 5247      	.DB  0x25,0x64,0xD,0xA,0x0,0x41,0x47,0x52
0000c4 5345
0000c5 4354
0000c6 0048
0000c7 6741      	.DB  0x45,0x53,0x54,0x43,0x48,0x0,0x41,0x67
0000c8 6572
0000c9 6973
0000ca 6576
0000cb 5420      	.DB  0x72,0x65,0x73,0x69,0x76,0x65,0x20,0x54
0000cc 6d65
0000cd 2070
0000ce 6843
0000cf 6365      	.DB  0x65,0x6D,0x70,0x20,0x43,0x68,0x65,0x63
0000d0 0d6b
0000d1 000a
0000d2 4f4c
0000d3 4b43      	.DB  0x6B,0xD,0xA,0x0,0x4C,0x4F,0x43,0x4B
0000d4 0043
0000d5 6e55
0000d6 6564
0000d7 2072      	.DB  0x43,0x0,0x55,0x6E,0x64,0x65,0x72,0x20
0000d8 6f43
0000d9 746e
0000da 6f72
0000db 0d6c      	.DB  0x43,0x6F,0x6E,0x74,0x72,0x6F,0x6C,0xD
0000dc 000a
0000dd 4e55
0000de 4f4c
0000df 4b43      	.DB  0xA,0x0,0x55,0x4E,0x4C,0x4F,0x43,0x4B
0000e0 0043
0000e1 7541
0000e2 6f74
0000e3 4320      	.DB  0x43,0x0,0x41,0x75,0x74,0x6F,0x20,0x43
0000e4 6e6f
0000e5 7274
0000e6 6c6f
0000e7 0a0d      	.DB  0x6F,0x6E,0x74,0x72,0x6F,0x6C,0xD,0xA
0000e8 4700
0000e9 5445
0000ea 4550
0000eb 0052      	.DB  0x0,0x47,0x45,0x54,0x50,0x45,0x52,0x0
0000ec 4550
0000ed 4952
0000ee 444f
0000ef 253a      	.DB  0x50,0x45,0x52,0x49,0x4F,0x44,0x3A,0x25
0000f0 0d63
0000f1 000a
0000f2 4547
0000f3 4454      	.DB  0x63,0xD,0xA,0x0,0x47,0x45,0x54,0x44
0000f4 5453
0000f5 4400
0000f6 5941
0000f7 532e      	.DB  0x53,0x54,0x0,0x44,0x41,0x59,0x2E,0x53
0000f8 3a54
0000f9 6325
0000fa 0a0d
0000fb 4700      	.DB  0x54,0x3A,0x25,0x63,0xD,0xA,0x0,0x47
0000fc 5445
0000fd 4150
0000fe 004c
0000ff 4550      	.DB  0x45,0x54,0x50,0x41,0x4C,0x0,0x50,0x45
000100 2e52
000101 2e41
000102 253a
000103 0d63      	.DB  0x52,0x2E,0x41,0x2E,0x3A,0x25,0x63,0xD
000104 000a
000105 4547
000106 5054
000107 4c42      	.DB  0xA,0x0,0x47,0x45,0x54,0x50,0x42,0x4C
000108 5000
000109 5245
00010a 422e
00010b 3a2e      	.DB  0x0,0x50,0x45,0x52,0x2E,0x42,0x2E,0x3A
00010c 6325
00010d 0a0d
00010e 4700
00010f 5445      	.DB  0x25,0x63,0xD,0xA,0x0,0x47,0x45,0x54
000110 504f
000111 0053
000112 4547
000113 4f54      	.DB  0x4F,0x50,0x53,0x0,0x47,0x45,0x54,0x4F
000114 5350
000115 253a
000116 2563
000117 2563      	.DB  0x50,0x53,0x3A,0x25,0x63,0x25,0x63,0x25
000118 0d63
000119 000a
00011a 4553
00011b 4454      	.DB  0x63,0xD,0xA,0x0,0x53,0x45,0x54,0x44
00011c 4d4e
00011d 5300
00011e 5445
00011f 4e44      	.DB  0x4E,0x4D,0x0,0x53,0x45,0x54,0x44,0x4E
000120 3a4d
000121 6325
000122 0a0d
000123 5300      	.DB  0x4D,0x3A,0x25,0x63,0xD,0xA,0x0,0x53
000124 5445
000125 4550
000126 0052
000127 4553      	.DB  0x45,0x54,0x50,0x45,0x52,0x0,0x53,0x45
000128 4454
000129 5453
00012a 5300
00012b 5445      	.DB  0x54,0x44,0x53,0x54,0x0,0x53,0x45,0x54
00012c 4150
00012d 004c
00012e 4553
00012f 5054      	.DB  0x50,0x41,0x4C,0x0,0x53,0x45,0x54,0x50
000130 4c42
000131 4400
000132 255b
000133 5d64      	.DB  0x42,0x4C,0x0,0x44,0x5B,0x25,0x64,0x5D
000134 253a
000135 3230
000136 2558
000137 3230      	.DB  0x3A,0x25,0x30,0x32,0x58,0x25,0x30,0x32
000138 2558
000139 3230
00013a 2558
00013b 3230      	.DB  0x58,0x25,0x30,0x32,0x58,0x25,0x30,0x32
00013c 2558
00013d 3230
00013e 2558
00013f 3230      	.DB  0x58,0x25,0x30,0x32,0x58,0x25,0x30,0x32
000140 2558
000141 3230
000142 2558
000143 3230      	.DB  0x58,0x25,0x30,0x32,0x58,0x25,0x30,0x32
000144 0d58
000145 000a      	.DB  0x58,0xD,0xA,0x0
                 _0x2020000:
000146 4e2d
000147 4e41
D:\Dropbox\Z_PROG_CODE\AVR\644_Pomidornica\List\Project.asm(1200): warning: .cseg .db misalignment - padding zero byte
000148 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x20A0060:
D:\Dropbox\Z_PROG_CODE\AVR\644_Pomidornica\List\Project.asm(1202): warning: .cseg .db misalignment - padding zero byte
000149 0001      	.DB  0x1
                 _0x20A0000:
00014a 4e2d
00014b 4e41
00014c 4900
00014d 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Dropbox\Z_PROG_CODE\AVR\644_Pomidornica\List\Project.asm(1205): warning: .cseg .db misalignment - padding zero byte
00014e 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00014f 0001      	.DW  0x01
000150 0e29      	.DW  _temp_check
000151 0080      	.DW  _0x3*2
                 
000152 0001      	.DW  0x01
000153 0900      	.DW  _0x33
000154 0097      	.DW  _0x0*2+15
                 
000155 0007      	.DW  0x07
000156 0901      	.DW  _0x33+1
000157 00b6      	.DW  _0x0*2+46
                 
000158 0008      	.DW  0x08
000159 0908      	.DW  _0x33+8
00015a 00e6      	.DW  _0x0*2+94
                 
00015b 0003      	.DW  0x03
00015c 0910      	.DW  _0x53
00015d 00ee      	.DW  _0x0*2+102
                 
00015e 0005      	.DW  0x05
00015f 0913      	.DW  _0x53+3
000160 00fe      	.DW  _0x0*2+118
                 
000161 0003      	.DW  0x03
000162 0918      	.DW  _0x53+8
000163 010b      	.DW  _0x0*2+131
                 
000164 0004      	.DW  0x04
000165 091b      	.DW  _0x53+11
000166 011c      	.DW  _0x0*2+148
                 
000167 0003      	.DW  0x03
000168 091f      	.DW  _0x53+15
000169 0120      	.DW  _0x0*2+152
                 
00016a 0005      	.DW  0x05
00016b 0922      	.DW  _0x53+18
00016c 0123      	.DW  _0x0*2+155
                 
00016d 0005      	.DW  0x05
00016e 0927      	.DW  _0x53+23
00016f 0128      	.DW  _0x0*2+160
                 
000170 0005      	.DW  0x05
000171 092c      	.DW  _0x53+28
000172 012d      	.DW  _0x0*2+165
                 
000173 0005      	.DW  0x05
000174 0931      	.DW  _0x53+33
000175 0132      	.DW  _0x0*2+170
                 
000176 0005      	.DW  0x05
000177 0936      	.DW  _0x53+38
000178 0137      	.DW  _0x0*2+175
                 
000179 0005      	.DW  0x05
00017a 093b      	.DW  _0x53+43
00017b 013c      	.DW  _0x0*2+180
                 
00017c 0005      	.DW  0x05
00017d 0940      	.DW  _0x53+48
00017e 0141      	.DW  _0x0*2+185
                 
00017f 0003      	.DW  0x03
000180 0945      	.DW  _0x53+53
000181 0153      	.DW  _0x0*2+203
                 
000182 0003      	.DW  0x03
000183 0948      	.DW  _0x53+56
000184 0156      	.DW  _0x0*2+206
                 
000185 0005      	.DW  0x05
000186 094b      	.DW  _0x53+59
000187 0159      	.DW  _0x0*2+209
                 
000188 0009      	.DW  0x09
000189 0950      	.DW  _0x53+64
00018a 0167      	.DW  _0x0*2+223
                 
00018b 0006      	.DW  0x06
00018c 0959      	.DW  _0x53+73
00018d 0170      	.DW  _0x0*2+232
                 
00018e 0009      	.DW  0x09
00018f 095f      	.DW  _0x53+79
000190 0185      	.DW  _0x0*2+253
                 
000191 0006      	.DW  0x06
000192 0968      	.DW  _0x53+88
000193 01a4      	.DW  _0x0*2+284
                 
000194 0008      	.DW  0x08
000195 096e      	.DW  _0x53+94
000196 01ba      	.DW  _0x0*2+306
                 
000197 0007      	.DW  0x07
000198 0976      	.DW  _0x53+102
000199 01d1      	.DW  _0x0*2+329
                 
00019a 0007      	.DW  0x07
00019b 097d      	.DW  _0x53+109
00019c 01e4      	.DW  _0x0*2+348
                 
00019d 0007      	.DW  0x07
00019e 0984      	.DW  _0x53+116
00019f 01f7      	.DW  _0x0*2+367
                 
0001a0 0007      	.DW  0x07
0001a1 098b      	.DW  _0x53+123
0001a2 020a      	.DW  _0x0*2+386
                 
0001a3 0007      	.DW  0x07
0001a4 0992      	.DW  _0x53+130
0001a5 021d      	.DW  _0x0*2+405
                 
0001a6 0007      	.DW  0x07
0001a7 0999      	.DW  _0x53+137
0001a8 0234      	.DW  _0x0*2+428
                 
0001a9 0007      	.DW  0x07
0001aa 09a0      	.DW  _0x53+144
0001ab 0247      	.DW  _0x0*2+447
                 
0001ac 0007      	.DW  0x07
0001ad 09a7      	.DW  _0x53+151
0001ae 024e      	.DW  _0x0*2+454
                 
0001af 0007      	.DW  0x07
0001b0 09ae      	.DW  _0x53+158
0001b1 0255      	.DW  _0x0*2+461
                 
0001b2 0007      	.DW  0x07
0001b3 09b5      	.DW  _0x53+165
0001b4 025c      	.DW  _0x0*2+468
                 
0001b5 0006      	.DW  0x06
0001b6 0009      	.DW  0x09
0001b7 0082      	.DW  _0xC3*2
                 
0001b8 0001      	.DW  0x01
0001b9 0e6c      	.DW  __seed_G105
0001ba 0292      	.DW  _0x20A0060*2
                 
                 _0xFFFFFFFF:
0001bb 0000      	.DW  0
                 
                 __RESET:
0001bc 94f8      	CLI
0001bd 27ee      	CLR  R30
0001be bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0001bf e0f1      	LDI  R31,1
0001c0 bff5      	OUT  MCUCR,R31
0001c1 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
0001c2 e1f8      	LDI  R31,0x18
0001c3 95a8      	WDR
0001c4 b7a4      	IN   R26,MCUSR
0001c5 7fa7      	CBR  R26,8
0001c6 bfa4      	OUT  MCUSR,R26
0001c7 93f0 0060 	STS  WDTCSR,R31
0001c9 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
0001cb e08d      	LDI  R24,(14-2)+1
0001cc e0a2      	LDI  R26,2
0001cd 27bb      	CLR  R27
                 __CLEAR_REG:
0001ce 93ed      	ST   X+,R30
0001cf 958a      	DEC  R24
0001d0 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0001d1 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0001d2 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0001d3 e0a0      	LDI  R26,LOW(__SRAM_START)
0001d4 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0001d5 93ed      	ST   X+,R30
0001d6 9701      	SBIW R24,1
0001d7 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0001d8 e9ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0001d9 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0001da 9185      	LPM  R24,Z+
0001db 9195      	LPM  R25,Z+
0001dc 9700      	SBIW R24,0
0001dd f061      	BREQ __GLOBAL_INI_END
0001de 91a5      	LPM  R26,Z+
0001df 91b5      	LPM  R27,Z+
0001e0 9005      	LPM  R0,Z+
0001e1 9015      	LPM  R1,Z+
0001e2 01bf      	MOVW R22,R30
0001e3 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0001e4 9005      	LPM  R0,Z+
0001e5 920d      	ST   X+,R0
0001e6 9701      	SBIW R24,1
0001e7 f7e1      	BRNE __GLOBAL_INI_LOOP
0001e8 01fb      	MOVW R30,R22
0001e9 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
0001ea e0e0      	LDI  R30,__GPIOR0_INIT
0001eb bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0001ec efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0001ed bfed      	OUT  SPL,R30
0001ee e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0001ef bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0001f0 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0001f1 e0d9      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0001f2 940c 01f4 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x900
                 
                 	.CSEG
                 ;/***************************************************************************************************************
                 ;****************************************************************************************************************
                 ;****************************************************************************************************************
                 ;        Chip type               : ATmega644
                 ;        Program type            : Application
                 ;        AVR Core Clock frequency: 8,000000 MHz
                 ;        Memory model            : Small
                 ;        External RAM size       : 0
                 ;        Data Stack size         : 1024
                 ;****************************************************************************************************************
                 ;****************************************************************************************************************
                 ;***************************************************************************************************************/
                 ;//--------------------------- Include Section --------------------------------------------
                 ;#include <mega644.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <stdio.h>
                 ;#include <1wire.h>    // 1 Wire Bus interface functions
                 ;#include <ds18b20.h>    // DS1820 Temperature Sensor functions
                 ;#include "commands.h"
                 ;
                 ;//----------------------------   DEFINE SECTION ------------------------------------------
                 ;
                 ;#define CONTROL_FAN_OBDUV   PORTB.0
                 ;#define CONTROL_FAN_VIDUV   PORTB.1
                 ;#define CONTROL_LIGHT       PORTB.2
                 ;#define ENABLE              1
                 ;#define DISABLE             0
                 ;
                 ;#define     INPUT_SIZE      30
                 ;#define     MAX_DS18B20     8       // maximum number of DS1820 devices connected to the 1 Wire bus
                 ;#define     _TEMP_CHECK     2     //  Value for time for get temperature from thermometers
                 ;#define     TIMER_PREC      122
                 ;
                 ;#define RX_BUFFER_SIZE0     INPUT_SIZE     // USART0 Receiver buffer
                 ;#define TX_BUFFER_SIZE0     INPUT_SIZE
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;//----------------------------   VARIAVBLE SECTION ---------------------------------------
                 ;//eeprom char test;
                 ;
                 ;unsigned char milisec;
                 ;unsigned char hours;
                 ;unsigned char minutes;
                 ;unsigned char seconds;
                 ;unsigned char time_chaeck_const;
                 ;unsigned char devices;                      // number of DS1820 devices connected to the 1 Wire bus
                 ;unsigned char rom_codes[MAX_DS18B20][9];    // DS1820 devices ROM code storage area, 9 bytes are used for each device
                 ;float temperature[MAX_DS18B20];
                 ;
                 ;#define WRITE_TRUE 20
                 ;#define TEMP_OLD_SIZE 24*5
                 ;char temperature_old[MAX_DS18B20][TEMP_OLD_SIZE];
                 ;unsigned int temp_old_counter = 0;
                 ;char write_old_memory = 1;
                 ;char lcd_buffer[INPUT_SIZE];
                 ;
                 ;int control_locker = 0;
                 ;unsigned char agresive_check = 0;
                 ;char input_buffer[INPUT_SIZE];
                 ;
                 ;unsigned char temp_check = 210;
                 
                 	.DSEG
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;struct STAT_DEV{
                 ;
                 ;    unsigned char day ;
                 ;    char period ;
                 ;    unsigned char day_start;
                 ;    unsigned char period_a_len;
                 ;    unsigned char period_b_len;
                 ;    unsigned char hour;
                 ;} ;
                 ;eeprom char offset1 = 0;
                 ;eeprom char offset2 = 0;
                 ;eeprom char offset3 = 0;
                 ;eeprom struct STAT_DEV dev;
                 ;//struct STAT_DEV devMEM;
                 ;//===========================
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char   rx_wr_index0,
                 ;                rx_rd_index0,
                 ;                rx_counter0;
                 ;#else
                 ;unsigned int    rx_wr_index0,
                 ;                rx_rd_index0,
                 ;                rx_counter0;
                 ;#endif
                 ;//===========================
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char   tx_wr_index0,
                 ;                tx_rd_index0,
                 ;                tx_counter0;
                 ;#else
                 ;unsigned int    tx_wr_index0,
                 ;                tx_rd_index0,
                 ;                tx_counter0;
                 ;#endif
                 ;bit rx_buffer_overflow0;      // This flag is set on USART0 Receiver buffer overflow
                 ;
                 ;
                 ;//=============================================================================
                 ;interrupt [USART_RXC] void usart_rx_isr(void);
                 ;interrupt [USART_TXC] void usart_tx_isr(void);
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void);
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;    #define _ALTERNATE_GETCHAR_
                 ;    #pragma used+
                 ;    char getchar(void);         // Get a character from the USART Receiver buffer
                 ;    #pragma used-
                 ;#endif
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;    #define _ALTERNATE_PUTCHAR_
                 ;    #pragma used+
                 ;    void putchar(char c);   // Write a character to the USART Transmitter buffer
                 ;    #pragma used-
                 ;#endif
                 ;
                 ;void SendData(char *data);
                 ;void InitilizeMC();
                 ;void getData(char *data);
                 ;void SendDevs();
                 ;char ScanCommand();
                 ;char comcmp(char *comm,char *val);
                 ;//=============================================================================
                 ;void main(void)
                 ; 0000 009B {
                 
                 	.CSEG
                 _main:
                 ; 0000 009C 
                 ; 0000 009D    // unsigned char temp_check=_TEMP_CHECK;
                 ; 0000 009E     unsigned char i;
                 ; 0000 009F     unsigned char clearcommand = 0;
                 ; 0000 00A0 
                 ; 0000 00A1 
                 ; 0000 00A2     InitilizeMC();
                 ;	i -> R17
                 ;	clearcommand -> R16
0001f4 e000      	LDI  R16,0
0001f5 d4f4      	RCALL _InitilizeMC
                 ; 0000 00A3 
                 ; 0000 00A4 
                 ; 0000 00A5     if(dev.hour <24)
                +
0001f6 e0a5     +LDI R26 , LOW ( _dev + ( 5 ) )
0001f7 e0b0     +LDI R27 , HIGH ( _dev + ( 5 ) )
                 	__POINTW2MN _dev,5
0001f8 940e 11ca 	CALL __EEPROMRDB
0001fa 31e8      	CPI  R30,LOW(0x18)
0001fb f428      	BRSH _0x4
                 ; 0000 00A6         hours = dev.hour;
                +
0001fc e0a5     +LDI R26 , LOW ( _dev + ( 5 ) )
0001fd e0b0     +LDI R27 , HIGH ( _dev + ( 5 ) )
                 	__POINTW2MN _dev,5
0001fe 940e 11ca 	CALL __EEPROMRDB
000200 2e3e      	MOV  R3,R30
                 ; 0000 00A7 
                 ; 0000 00A8     if(dev.period != PERIOD_A || dev.period != PERIOD_B)
                 _0x4:
                +
000201 e0a1     +LDI R26 , LOW ( _dev + ( 1 ) )
000202 e0b0     +LDI R27 , HIGH ( _dev + ( 1 ) )
                 	__POINTW2MN _dev,1
000203 940e 11ca 	CALL __EEPROMRDB
000205 36e1      	CPI  R30,LOW(0x61)
000206 f411      	BRNE _0x6
000207 36e2      	CPI  R30,LOW(0x62)
000208 f029      	BREQ _0x5
                 _0x6:
                 ; 0000 00A9     {
                 ; 0000 00AA         dev.period = PERIOD_A;
                +
000209 e0a1     +LDI R26 , LOW ( _dev + ( 1 ) )
00020a e0b0     +LDI R27 , HIGH ( _dev + ( 1 ) )
                 	__POINTW2MN _dev,1
00020b e6e1      	LDI  R30,LOW(97)
00020c 940e 11d6 	CALL __EEPROMWRB
                 ; 0000 00AB     }
                 ; 0000 00AC 
                 ; 0000 00AD     if(dev.day>250){
                 _0x5:
00020e 940e 0ca9 	CALL SUBOPT_0x0
000210 3feb      	CPI  R30,LOW(0xFB)
000211 f028      	BRLO _0x8
                 ; 0000 00AE         dev.day = 1;
000212 e0a0      	LDI  R26,LOW(_dev)
000213 e0b0      	LDI  R27,HIGH(_dev)
000214 e0e1      	LDI  R30,LOW(1)
000215 940e 11d6 	CALL __EEPROMWRB
                 ; 0000 00AF     }
                 ; 0000 00B0 
                 ; 0000 00B1 
                 ; 0000 00B2     if(dev.day_start > 23){
                 _0x8:
000217 940e 0cae 	CALL SUBOPT_0x1
000219 31e8      	CPI  R30,LOW(0x18)
00021a f028      	BRLO _0x9
                 ; 0000 00B3         dev.day_start = 6;
                +
00021b e0a2     +LDI R26 , LOW ( _dev + ( 2 ) )
00021c e0b0     +LDI R27 , HIGH ( _dev + ( 2 ) )
                 	__POINTW2MN _dev,2
00021d e0e6      	LDI  R30,LOW(6)
00021e 940e 11d6 	CALL __EEPROMWRB
                 ; 0000 00B4     }
                 ; 0000 00B5 
                 ; 0000 00B6     if(dev.period_a_len > 23){
                 _0x9:
000220 940e 0cb3 	CALL SUBOPT_0x2
000222 31e8      	CPI  R30,LOW(0x18)
000223 f028      	BRLO _0xA
                 ; 0000 00B7         dev.period_a_len = 18 ;
                +
000224 e0a3     +LDI R26 , LOW ( _dev + ( 3 ) )
000225 e0b0     +LDI R27 , HIGH ( _dev + ( 3 ) )
                 	__POINTW2MN _dev,3
000226 e1e2      	LDI  R30,LOW(18)
000227 940e 11d6 	CALL __EEPROMWRB
                 ; 0000 00B8     }
                 ; 0000 00B9     if(dev.period_b_len > 23){
                 _0xA:
000229 940e 0cb8 	CALL SUBOPT_0x3
00022b 31e8      	CPI  R30,LOW(0x18)
00022c f028      	BRLO _0xB
                 ; 0000 00BA         dev.period_b_len = 12;
                +
00022d e0a4     +LDI R26 , LOW ( _dev + ( 4 ) )
00022e e0b0     +LDI R27 , HIGH ( _dev + ( 4 ) )
                 	__POINTW2MN _dev,4
00022f e0ec      	LDI  R30,LOW(12)
000230 940e 11d6 	CALL __EEPROMWRB
                 ; 0000 00BB     }
                 ; 0000 00BC 
                 ; 0000 00BD     time_chaeck_const = TIMER_PREC;
                 _0xB:
000232 e7ea      	LDI  R30,LOW(122)
000233 2e8e      	MOV  R8,R30
                 ; 0000 00BE     delay_ms(5000);
000234 e8a8      	LDI  R26,LOW(5000)
000235 e1b3      	LDI  R27,HIGH(5000)
000236 940e 0e6c 	CALL _delay_ms
                 ; 0000 00BF     w1_init();
000238 940e 0cbd 	CALL SUBOPT_0x4
                 ; 0000 00C0 
                 ; 0000 00C1     // Determine the number of DS1820 devices connected to the 1 Wire bus
                 ; 0000 00C2     devices=w1_search(0xf0,rom_codes);
                 ; 0000 00C3     #asm("sei")             // Global enable interrupts
00023a 9478      	sei
                 ; 0000 00C4     if(devices){
00023b 2077      	TST  R7
00023c f041      	BREQ _0xC
                 ; 0000 00C5         sprintf(lcd_buffer,"Found %d devs\r\n",devices);
00023d 940e 0cc7 	CALL SUBOPT_0x5
                +
00023f e8e8     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000240 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000241 940e 0ccc 	CALL SUBOPT_0x6
                 ; 0000 00C6         SendData(lcd_buffer);
                 ; 0000 00C7         SendDevs();
000243 d428      	RCALL _SendDevs
                 ; 0000 00C8     }
                 ; 0000 00C9     else{
000244 c006      	RJMP _0xD
                 _0xC:
                 ; 0000 00CA         sprintf(lcd_buffer,"Not Founded\r\n");
000245 940e 0cc7 	CALL SUBOPT_0x5
                +
000247 e9e8     +LDI R30 , LOW ( 2 * _0x0 + ( 16 ) )
000248 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 16 ) )
                 	__POINTW1FN _0x0,16
000249 940e 0cdc 	CALL SUBOPT_0x7
                 ; 0000 00CB         SendData(lcd_buffer);
                 ; 0000 00CC     }
                 _0xD:
                 ; 0000 00CD 
                 ; 0000 00CE     for (i=0;i<devices;i++){
00024b e010      	LDI  R17,LOW(0)
                 _0xF:
00024c 1517      	CP   R17,R7
00024d f4d0      	BRSH _0x10
                 ; 0000 00CF         if (!ds18b20_init(&rom_codes[i][0],0,39,DS18B20_12BIT_RES)){
00024e 940e 0ce6 	CALL SUBOPT_0x8
000250 93fa      	ST   -Y,R31
000251 93ea      	ST   -Y,R30
000252 e0e0      	LDI  R30,LOW(0)
000253 93ea      	ST   -Y,R30
000254 e2e7      	LDI  R30,LOW(39)
000255 93ea      	ST   -Y,R30
000256 e0a3      	LDI  R26,LOW(3)
000257 940e 0b83 	CALL _ds18b20_init
000259 30e0      	CPI  R30,0
00025a f441      	BRNE _0x11
                 ; 0000 00D0            sprintf(lcd_buffer," Init err %u \r\n",i);
00025b 940e 0cc7 	CALL SUBOPT_0x5
                +
00025d eae6     +LDI R30 , LOW ( 2 * _0x0 + ( 30 ) )
00025e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 30 ) )
                 	__POINTW1FN _0x0,30
00025f 940e 0cec 	CALL SUBOPT_0x9
000261 940e 0cf5 	CALL SUBOPT_0xA
                 ; 0000 00D1            SendData(lcd_buffer);
                 ; 0000 00D2         }
                 ; 0000 00D3 
                 ; 0000 00D4         delay_ms(100);
                 _0x11:
000263 e6a4      	LDI  R26,LOW(100)
000264 940e 0cfd 	CALL SUBOPT_0xB
                 ; 0000 00D5    }
000266 5f1f      	SUBI R17,-1
000267 cfe4      	RJMP _0xF
                 _0x10:
                 ; 0000 00D6                CONTROL_FAN_OBDUV = ENABLE;
000268 9a28      	SBI  0x5,0
                 ; 0000 00D7                CONTROL_FAN_VIDUV = ENABLE;
000269 9a29      	SBI  0x5,1
                 ; 0000 00D8     while (1)
                 _0x16:
                 ; 0000 00D9     {
                 ; 0000 00DA 
                 ; 0000 00DB 
                 ; 0000 00DC         if(control_locker == 0)
00026a 2c0d      	MOV  R0,R13
00026b 280e      	OR   R0,R14
00026c f541      	BRNE _0x19
                 ; 0000 00DD         {
                 ; 0000 00DE             if(dev.period == PERIOD_A){
00026d 940e 0d00 	CALL SUBOPT_0xC
00026f 36e1      	CPI  R30,LOW(0x61)
000270 f481      	BRNE _0x1A
                 ; 0000 00DF                 if(hours >= dev.day_start && hours < (dev.day_start+dev.period_a_len)){
000271 940e 0cae 	CALL SUBOPT_0x1
000273 163e      	CP   R3,R30
000274 f038      	BRLO _0x1C
000275 2e0e      	MOV  R0,R30
000276 2411      	CLR  R1
000277 940e 0cb3 	CALL SUBOPT_0x2
000279 940e 0d05 	CALL SUBOPT_0xD
00027b f00c      	BRLT _0x1D
                 _0x1C:
00027c c002      	RJMP _0x1B
                 _0x1D:
                 ; 0000 00E0                     CONTROL_LIGHT = ENABLE;
00027d 9a2a      	SBI  0x5,2
                 ; 0000 00E1                 }  else{
00027e c001      	RJMP _0x20
                 _0x1B:
                 ; 0000 00E2                    CONTROL_LIGHT = DISABLE;
00027f 982a      	CBI  0x5,2
                 ; 0000 00E3                 }
                 _0x20:
                 ; 0000 00E4             }
                 ; 0000 00E5             else if(dev.period == PERIOD_B){
000280 c013      	RJMP _0x23
                 _0x1A:
000281 940e 0d00 	CALL SUBOPT_0xC
000283 36e2      	CPI  R30,LOW(0x62)
000284 f479      	BRNE _0x24
                 ; 0000 00E6                 if(hours >= dev.day_start && hours < (dev.day_start+dev.period_b_len)){
000285 940e 0cae 	CALL SUBOPT_0x1
000287 163e      	CP   R3,R30
000288 f038      	BRLO _0x26
000289 2e0e      	MOV  R0,R30
00028a 2411      	CLR  R1
00028b 940e 0cb8 	CALL SUBOPT_0x3
00028d 940e 0d05 	CALL SUBOPT_0xD
00028f f00c      	BRLT _0x27
                 _0x26:
000290 c002      	RJMP _0x25
                 _0x27:
                 ; 0000 00E7                     CONTROL_LIGHT = ENABLE;
000291 9a2a      	SBI  0x5,2
                 ; 0000 00E8                 }  else{
000292 c001      	RJMP _0x2A
                 _0x25:
                 ; 0000 00E9                    CONTROL_LIGHT = DISABLE;
000293 982a      	CBI  0x5,2
                 ; 0000 00EA                 }
                 _0x2A:
                 ; 0000 00EB             }
                 ; 0000 00EC         }
                 _0x24:
                 _0x23:
                 ; 0000 00ED         else{
000294 c00b      	RJMP _0x2D
                 _0x19:
                 ; 0000 00EE             control_locker++;
000295 e0e1      	LDI  R30,LOW(1)
000296 e0f0      	LDI  R31,HIGH(1)
                +
000297 0ede     +ADD R13 , R30
000298 1eef     +ADC R14 , R31
                 	__ADDWRR 13,14,30,31
                 ; 0000 00EF             if(control_locker == 30000){
000299 e3e0      	LDI  R30,LOW(30000)
00029a e7f5      	LDI  R31,HIGH(30000)
00029b 15ed      	CP   R30,R13
00029c 05fe      	CPC  R31,R14
00029d f411      	BRNE _0x2E
                 ; 0000 00F0                 control_locker = 0;
00029e 24dd      	CLR  R13
00029f 24ee      	CLR  R14
                 ; 0000 00F1             }
                 ; 0000 00F2         }
                 _0x2E:
                 _0x2D:
                 ; 0000 00F3 
                 ; 0000 00F4         //  Start check network data transfer
                 ; 0000 00F5         getData(input_buffer);          //  Get trasfered data
0002a0 e0ab      	LDI  R26,LOW(_input_buffer)
0002a1 e0be      	LDI  R27,HIGH(_input_buffer)
0002a2 d424      	RCALL _getData
                 ; 0000 00F6 
                 ; 0000 00F7         //  Every 30 minutes. Set variable for next temperature writing to memory on reading
                 ; 0000 00F8         if(write_old_memory != WRITE_TRUE && minutes%30 == 0){
0002a3 e1e4      	LDI  R30,LOW(20)
0002a4 15ec      	CP   R30,R12
0002a5 f041      	BREQ _0x30
0002a6 2da6      	MOV  R26,R6
0002a7 27bb      	CLR  R27
0002a8 e1ee      	LDI  R30,LOW(30)
0002a9 e0f0      	LDI  R31,HIGH(30)
0002aa 940e 1170 	CALL __MODW21
0002ac 9730      	SBIW R30,0
0002ad f009      	BREQ _0x31
                 _0x30:
0002ae c002      	RJMP _0x2F
                 _0x31:
                 ; 0000 00F9             write_old_memory = WRITE_TRUE;
0002af e1e4      	LDI  R30,LOW(20)
0002b0 2ece      	MOV  R12,R30
                 ; 0000 00FA         }
                 ; 0000 00FB 
                 ; 0000 00FC         if(strcmp(input_buffer,"")!=0)  //  Check if recived some data
                 _0x2F:
0002b1 940e 0d0d 	CALL SUBOPT_0xE
                +
0002b3 e0a0     +LDI R26 , LOW ( _0x33 + ( 0 ) )
0002b4 e0b9     +LDI R27 , HIGH ( _0x33 + ( 0 ) )
                 	__POINTW2MN _0x33,0
0002b5 940e 0759 	CALL _strcmp
0002b7 30e0      	CPI  R30,0
0002b8 f091      	BREQ _0x32
                 ; 0000 00FD         {
                 ; 0000 00FE             if(ScanCommand()){          //  If recived command was executed
0002b9 d0d3      	RCALL _ScanCommand
0002ba 30e0      	CPI  R30,0
0002bb f011      	BREQ _0x34
                 ; 0000 00FF                 clearcommand =200;
0002bc ec08      	LDI  R16,LOW(200)
                 ; 0000 0100             }
                 ; 0000 0101             else{
0002bd c001      	RJMP _0x35
                 _0x34:
                 ; 0000 0102                 clearcommand++;         //  else encrease counter for fix command from sender
0002be 5f0f      	SUBI R16,-1
                 ; 0000 0103             }
                 _0x35:
                 ; 0000 0104             //  Maximum sender can fix-comlite command in 3 trys.
                 ; 0000 0105             if(clearcommand >=3){
0002bf 3003      	CPI  R16,3
0002c0 f048      	BRLO _0x36
                 ; 0000 0106                 memset(input_buffer,'\0',INPUT_SIZE);
0002c1 940e 0d0d 	CALL SUBOPT_0xE
0002c3 e0e0      	LDI  R30,LOW(0)
0002c4 93ea      	ST   -Y,R30
0002c5 e1ae      	LDI  R26,LOW(30)
0002c6 e0b0      	LDI  R27,0
0002c7 940e 0749 	CALL _memset
                 ; 0000 0107                 clearcommand =0;
0002c9 e000      	LDI  R16,LOW(0)
                 ; 0000 0108             }
                 ; 0000 0109         }
                 _0x36:
                 ; 0000 010A         else{
0002ca c090      	RJMP _0x37
                 _0x32:
                 ; 0000 010B             if(temp_check >= _TEMP_CHECK || agresive_check==1){
0002cb 91a0 0e29 	LDS  R26,_temp_check
0002cd 30a2      	CPI  R26,LOW(0x2)
0002ce f420      	BRSH _0x39
0002cf e0e1      	LDI  R30,LOW(1)
0002d0 15eb      	CP   R30,R11
0002d1 f009      	BREQ _0x39
0002d2 c088      	RJMP _0x38
                 _0x39:
                 ; 0000 010C             agresive_check=0;
0002d3 24bb      	CLR  R11
                 ; 0000 010D             temp_check = 1;
0002d4 e0e1      	LDI  R30,LOW(1)
0002d5 93e0 0e29 	STS  _temp_check,R30
                 ; 0000 010E                  SendData("STOP\r\n");
                +
0002d7 e0a1     +LDI R26 , LOW ( _0x33 + ( 1 ) )
0002d8 e0b9     +LDI R27 , HIGH ( _0x33 + ( 1 ) )
                 	__POINTW2MN _0x33,1
0002d9 d401      	RCALL _SendData
                 ; 0000 010F                 for (i=0;i<devices;i++)
0002da e010      	LDI  R17,LOW(0)
                 _0x3C:
0002db 1517      	CP   R17,R7
0002dc f010      	BRLO PC+3
0002dd 940c 0349 	JMP _0x3D
                 ; 0000 0110                 {
                 ; 0000 0111                     temperature[i] =  ds18b20_temperature(&rom_codes[i][0]);
0002df 940e 0d12 	CALL SUBOPT_0xF
0002e1 0fea      	ADD  R30,R26
0002e2 1ffb      	ADC  R31,R27
0002e3 93ff      	PUSH R31
0002e4 93ef      	PUSH R30
0002e5 940e 0ce6 	CALL SUBOPT_0x8
0002e7 01df      	MOVW R26,R30
0002e8 940e 0b3b 	CALL _ds18b20_temperature
0002ea 91af      	POP  R26
0002eb 91bf      	POP  R27
0002ec 940e 1198 	CALL __PUTDP1
                 ; 0000 0112                     if(temperature[i]>=45 && temperature[i] <52){
0002ee 940e 0d12 	CALL SUBOPT_0xF
0002f0 940e 0d19 	CALL SUBOPT_0x10
                +
0002f2 e0e0     +LDI R30 , LOW ( 0x42340000 )
0002f3 e0f0     +LDI R31 , HIGH ( 0x42340000 )
0002f4 e364     +LDI R22 , BYTE3 ( 0x42340000 )
0002f5 e472     +LDI R23 , BYTE4 ( 0x42340000 )
                 	__GETD1N 0x42340000
0002f6 940e 10d4 	CALL __CMPF12
0002f8 f038      	BRLO _0x3F
0002f9 940e 0d12 	CALL SUBOPT_0xF
0002fb 940e 0d19 	CALL SUBOPT_0x10
0002fd 940e 0d20 	CALL SUBOPT_0x11
0002ff f008      	BRLO _0x40
                 _0x3F:
000300 c005      	RJMP _0x3E
                 _0x40:
                 ; 0000 0113                         sprintf(lcd_buffer,"WAR[%d]:%f\r\n",i,temperature[i]);
000301 940e 0cc7 	CALL SUBOPT_0x5
                +
000303 ebed     +LDI R30 , LOW ( 2 * _0x0 + ( 53 ) )
000304 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 53 ) )
                 	__POINTW1FN _0x0,53
000305 c020      	RJMP _0xC1
                 ; 0000 0114                         SendData(lcd_buffer);
                 ; 0000 0115                     }
                 ; 0000 0116                     else if(temperature[i]>=52 && temperature[i] <66){
                 _0x3E:
000306 940e 0d12 	CALL SUBOPT_0xF
000308 940e 0d19 	CALL SUBOPT_0x10
00030a 940e 0d20 	CALL SUBOPT_0x11
00030c f038      	BRLO _0x43
00030d 940e 0d12 	CALL SUBOPT_0xF
00030f 940e 0d19 	CALL SUBOPT_0x10
000311 940e 0d27 	CALL SUBOPT_0x12
000313 f008      	BRLO _0x44
                 _0x43:
000314 c005      	RJMP _0x42
                 _0x44:
                 ; 0000 0117                         sprintf(lcd_buffer,"ALE[%d]:%f\r\n",i,temperature[i]);
000315 940e 0cc7 	CALL SUBOPT_0x5
                +
000317 ecea     +LDI R30 , LOW ( 2 * _0x0 + ( 66 ) )
000318 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 66 ) )
                 	__POINTW1FN _0x0,66
000319 c00c      	RJMP _0xC1
                 ; 0000 0118                         SendData(lcd_buffer);
                 ; 0000 0119                     }
                 ; 0000 011A                     else if(temperature[i]>=66)
                 _0x42:
00031a 940e 0d12 	CALL SUBOPT_0xF
00031c 940e 0d19 	CALL SUBOPT_0x10
00031e 940e 0d27 	CALL SUBOPT_0x12
000320 f080      	BRLO _0x46
                 ; 0000 011B                     {
                 ; 0000 011C                         CONTROL_LIGHT = DISABLE;
000321 982a      	CBI  0x5,2
                 ; 0000 011D                         sprintf(lcd_buffer,"LIOFF[%d]:%f\r\n",i,temperature[i]);
000322 940e 0cc7 	CALL SUBOPT_0x5
                +
000324 ede7     +LDI R30 , LOW ( 2 * _0x0 + ( 79 ) )
000325 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 79 ) )
                 	__POINTW1FN _0x0,79
                 _0xC1:
000326 93fa      	ST   -Y,R31
000327 93ea      	ST   -Y,R30
000328 2fe1      	MOV  R30,R17
000329 940e 0d2e 	CALL SUBOPT_0x13
00032b 940e 0d12 	CALL SUBOPT_0xF
00032d 940e 0d34 	CALL SUBOPT_0x14
00032f 940e 0d39 	CALL SUBOPT_0x15
                 ; 0000 011E                         SendData(lcd_buffer);
                 ; 0000 011F                     }
                 ; 0000 0120                     if(write_old_memory == WRITE_TRUE){
                 _0x46:
000331 e1e4      	LDI  R30,LOW(20)
000332 15ec      	CP   R30,R12
000333 f481      	BRNE _0x49
                 ; 0000 0121                         temperature_old[i][temp_old_counter] =  (int) temperature[i];
000334 e7a8      	LDI  R26,LOW(120)
000335 9f1a      	MUL  R17,R26
000336 01f0      	MOVW R30,R0
000337 5de3      	SUBI R30,LOW(-_temperature_old)
000338 4ff5      	SBCI R31,HIGH(-_temperature_old)
000339 0de9      	ADD  R30,R9
00033a 1dfa      	ADC  R31,R10
00033b 01cf      	MOVW R24,R30
00033c 940e 0d12 	CALL SUBOPT_0xF
00033e 940e 0d34 	CALL SUBOPT_0x14
000340 940e 0f80 	CALL __CFD1
000342 01dc      	MOVW R26,R24
000343 93ec      	ST   X,R30
                 ; 0000 0122                     }
                 ; 0000 0123                     delay_ms(5);
                 _0x49:
000344 e0a5      	LDI  R26,LOW(5)
000345 940e 0cfd 	CALL SUBOPT_0xB
                 ; 0000 0124                 }
000347 5f1f      	SUBI R17,-1
000348 cf92      	RJMP _0x3C
                 _0x3D:
                 ; 0000 0125                 if(write_old_memory == WRITE_TRUE){
000349 e1e4      	LDI  R30,LOW(20)
00034a 15ec      	CP   R30,R12
00034b f429      	BRNE _0x4A
                 ; 0000 0126                       temp_old_counter++;
00034c e0e1      	LDI  R30,LOW(1)
00034d e0f0      	LDI  R31,HIGH(1)
                +
00034e 0e9e     +ADD R9 , R30
00034f 1eaf     +ADC R10 , R31
                 	__ADDWRR 9,10,30,31
                 ; 0000 0127                       write_old_memory =0;
000350 24cc      	CLR  R12
                 ; 0000 0128                 }
                 ; 0000 0129               if(temp_old_counter == TEMP_OLD_SIZE){
                 _0x4A:
000351 e7e8      	LDI  R30,LOW(120)
000352 e0f0      	LDI  R31,HIGH(120)
000353 15e9      	CP   R30,R9
000354 05fa      	CPC  R31,R10
000355 f411      	BRNE _0x4B
                 ; 0000 012A                      temp_old_counter = 0;
000356 2499      	CLR  R9
000357 24aa      	CLR  R10
                 ; 0000 012B               }
                 ; 0000 012C                 SendData("START\r\n");
                 _0x4B:
                +
000358 e0a8     +LDI R26 , LOW ( _0x33 + ( 8 ) )
000359 e0b9     +LDI R27 , HIGH ( _0x33 + ( 8 ) )
                 	__POINTW2MN _0x33,8
00035a d380      	RCALL _SendData
                 ; 0000 012D             }
                 ; 0000 012E         }
                 _0x38:
                 _0x37:
                 ; 0000 012F         //  End Check network data transfer
                 ; 0000 0130 
                 ; 0000 0131         delay_ms(50);
00035b e3a2      	LDI  R26,LOW(50)
00035c 940e 0cfd 	CALL SUBOPT_0xB
                 ; 0000 0132     }
00035e cf0b      	RJMP _0x16
                 ; 0000 0133 }
                 _0x4C:
00035f cfff      	RJMP _0x4C
                 
                 	.DSEG
                 _0x33:
000900           	.BYTE 0x10
                 ;//=============================================================================
                 ;char comcmp(char *comm,char *val){
                 ; 0000 0135 char comcmp(char *comm,char *val){
                 
                 	.CSEG
                 _comcmp:
                 ; 0000 0136     unsigned char counter=0;
                 ; 0000 0137     unsigned char lencom = strlen(comm);
                 ; 0000 0138     unsigned char length=strlen(val);
                 ; 0000 0139 
                 ; 0000 013A     if(lencom <length )  {
000360 93ba      	ST   -Y,R27
000361 93aa      	ST   -Y,R26
000362 940e 11ed 	CALL __SAVELOCR4
                 ;	*comm -> Y+6
                 ;	*val -> Y+4
                 ;	counter -> R17
                 ;	lencom -> R16
                 ;	length -> R19
000364 e010      	LDI  R17,0
000365 81ae      	LDD  R26,Y+6
000366 81bf      	LDD  R27,Y+6+1
000367 940e 077a 	CALL _strlen
000369 2f0e      	MOV  R16,R30
00036a 81ac      	LDD  R26,Y+4
00036b 81bd      	LDD  R27,Y+4+1
00036c 940e 077a 	CALL _strlen
00036e 2f3e      	MOV  R19,R30
00036f 1703      	CP   R16,R19
000370 f410      	BRSH _0x4D
                 ; 0000 013B         return 0;
000371 e0e0      	LDI  R30,LOW(0)
000372 c016      	RJMP _0x20C000B
                 ; 0000 013C     }
                 ; 0000 013D     for(counter=0;counter<length;counter++){
                 _0x4D:
000373 e010      	LDI  R17,LOW(0)
                 _0x4F:
000374 1713      	CP   R17,R19
000375 f490      	BRSH _0x50
                 ; 0000 013E         if(comm[counter] != val[counter] )
000376 81ae      	LDD  R26,Y+6
000377 81bf      	LDD  R27,Y+6+1
000378 27ee      	CLR  R30
000379 0fa1      	ADD  R26,R17
00037a 1fbe      	ADC  R27,R30
00037b 900c      	LD   R0,X
00037c 81ac      	LDD  R26,Y+4
00037d 81bd      	LDD  R27,Y+4+1
00037e 27ee      	CLR  R30
00037f 0fa1      	ADD  R26,R17
000380 1fbe      	ADC  R27,R30
000381 91ec      	LD   R30,X
000382 15e0      	CP   R30,R0
000383 f011      	BREQ _0x51
                 ; 0000 013F         {
                 ; 0000 0140             return 0;
000384 e0e0      	LDI  R30,LOW(0)
000385 c003      	RJMP _0x20C000B
                 ; 0000 0141         }
                 ; 0000 0142     }
                 _0x51:
000386 5f1f      	SUBI R17,-1
000387 cfec      	RJMP _0x4F
                 _0x50:
                 ; 0000 0143     return 1;
000388 e0e1      	LDI  R30,LOW(1)
                 _0x20C000B:
000389 940e 11f4 	CALL __LOADLOCR4
00038b 9628      	ADIW R28,8
00038c 9508      	RET
                 ; 0000 0144 }
                 ;//=============================================================================
                 ;char ScanCommand(){
                 ; 0000 0146 char ScanCommand(){
                 _ScanCommand:
                 ; 0000 0147     unsigned char i;
                 ; 0000 0148 
                 ; 0000 0149     if(strcmp(input_buffer,GET_THEMPERATURE)==0){
00038d 931a      	ST   -Y,R17
                 ;	i -> R17
00038e 940e 0d0d 	CALL SUBOPT_0xE
                +
000390 e1a0     +LDI R26 , LOW ( _0x53 + ( 0 ) )
000391 e0b9     +LDI R27 , HIGH ( _0x53 + ( 0 ) )
                 	__POINTW2MN _0x53,0
000392 940e 0759 	CALL _strcmp
000394 30e0      	CPI  R30,0
000395 f4a9      	BRNE _0x52
                 ; 0000 014A         for (i=0;i<devices;i++){
000396 e010      	LDI  R17,LOW(0)
                 _0x55:
000397 1517      	CP   R17,R7
000398 f488      	BRSH _0x56
                 ; 0000 014B             sprintf(lcd_buffer,"T[%d]:%.3f\r\n",i,temperature[i]);
000399 940e 0cc7 	CALL SUBOPT_0x5
                +
00039b efe1     +LDI R30 , LOW ( 2 * _0x0 + ( 105 ) )
00039c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW1FN _0x0,105
00039d 940e 0cec 	CALL SUBOPT_0x9
00039f 940e 0d12 	CALL SUBOPT_0xF
0003a1 940e 0d34 	CALL SUBOPT_0x14
0003a3 940e 0d39 	CALL SUBOPT_0x15
                 ; 0000 014C             SendData(lcd_buffer);
                 ; 0000 014D             delay_ms(40);          // 40
0003a5 e2a8      	LDI  R26,LOW(40)
0003a6 940e 0cfd 	CALL SUBOPT_0xB
                 ; 0000 014E         }
0003a8 5f1f      	SUBI R17,-1
0003a9 cfed      	RJMP _0x55
                 _0x56:
                 ; 0000 014F     }
                 ; 0000 0150     else if(strcmp(input_buffer,THERMOMETERS_COUNT)==0){
0003aa c1e2      	RJMP _0x57
                 _0x52:
0003ab 940e 0d0d 	CALL SUBOPT_0xE
                +
0003ad e1a3     +LDI R26 , LOW ( _0x53 + ( 3 ) )
0003ae e0b9     +LDI R27 , HIGH ( _0x53 + ( 3 ) )
                 	__POINTW2MN _0x53,3
0003af 940e 0759 	CALL _strcmp
0003b1 30e0      	CPI  R30,0
0003b2 f439      	BRNE _0x58
                 ; 0000 0151         sprintf(lcd_buffer,"TC:%d\r\n",devices);
0003b3 940e 0cc7 	CALL SUBOPT_0x5
                +
0003b5 e0e3     +LDI R30 , LOW ( 2 * _0x0 + ( 123 ) )
0003b6 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 123 ) )
                 	__POINTW1FN _0x0,123
0003b7 940e 0ccc 	CALL SUBOPT_0x6
                 ; 0000 0152         SendData(lcd_buffer);
                 ; 0000 0153     }
                 ; 0000 0154     else if (strcmp(input_buffer,SEND_LOCAL_TIME)==0){
0003b9 c1d3      	RJMP _0x59
                 _0x58:
0003ba 940e 0d0d 	CALL SUBOPT_0xE
                +
0003bc e1a8     +LDI R26 , LOW ( _0x53 + ( 8 ) )
0003bd e0b9     +LDI R27 , HIGH ( _0x53 + ( 8 ) )
                 	__POINTW2MN _0x53,8
0003be 940e 0759 	CALL _strcmp
0003c0 30e0      	CPI  R30,0
0003c1 f491      	BRNE _0x5A
                 ; 0000 0155         sprintf(lcd_buffer,"TM:%d:%d:%d\r\n",hours,minutes,seconds);
0003c2 940e 0cc7 	CALL SUBOPT_0x5
                +
0003c4 e0ee     +LDI R30 , LOW ( 2 * _0x0 + ( 134 ) )
0003c5 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 134 ) )
                 	__POINTW1FN _0x0,134
0003c6 93fa      	ST   -Y,R31
0003c7 93ea      	ST   -Y,R30
0003c8 2de3      	MOV  R30,R3
0003c9 940e 0d2e 	CALL SUBOPT_0x13
0003cb 2de6      	MOV  R30,R6
0003cc 940e 0d2e 	CALL SUBOPT_0x13
0003ce 2de5      	MOV  R30,R5
0003cf 940e 0d2e 	CALL SUBOPT_0x13
0003d1 940e 0d43 	CALL SUBOPT_0x16
                 ; 0000 0156         SendData(lcd_buffer);
                 ; 0000 0157     }
                 ; 0000 0158     else if (comcmp(input_buffer,TIME_UPDATE_FULL)){
0003d3 c1b9      	RJMP _0x5B
                 _0x5A:
0003d4 940e 0d0d 	CALL SUBOPT_0xE
                +
0003d6 e1ab     +LDI R26 , LOW ( _0x53 + ( 11 ) )
0003d7 e0b9     +LDI R27 , HIGH ( _0x53 + ( 11 ) )
                 	__POINTW2MN _0x53,11
0003d8 df87      	RCALL _comcmp
0003d9 30e0      	CPI  R30,0
0003da f069      	BREQ _0x5C
                 ; 0000 0159         hours       = input_buffer[3]-50;
                +
0003db 91e0 0e0e+LDS R30 , _input_buffer + ( 3 )
                 	__GETB1MN _input_buffer,3
0003dd 53e2      	SUBI R30,LOW(50)
0003de 2e3e      	MOV  R3,R30
                 ; 0000 015A         minutes     = input_buffer[4]-50;
                +
0003df 91e0 0e0f+LDS R30 , _input_buffer + ( 4 )
                 	__GETB1MN _input_buffer,4
0003e1 53e2      	SUBI R30,LOW(50)
0003e2 2e6e      	MOV  R6,R30
                 ; 0000 015B         seconds     = input_buffer[5]-50;
                +
0003e3 91e0 0e10+LDS R30 , _input_buffer + ( 5 )
                 	__GETB1MN _input_buffer,5
0003e5 53e2      	SUBI R30,LOW(50)
0003e6 2e5e      	MOV  R5,R30
                 ; 0000 015C     }
                 ; 0000 015D     else if(strcmp(input_buffer,SEND_DEVICES_ID)==0){
0003e7 c1a5      	RJMP _0x5D
                 _0x5C:
0003e8 940e 0d0d 	CALL SUBOPT_0xE
                +
0003ea e1af     +LDI R26 , LOW ( _0x53 + ( 15 ) )
0003eb e0b9     +LDI R27 , HIGH ( _0x53 + ( 15 ) )
                 	__POINTW2MN _0x53,15
0003ec 940e 0759 	CALL _strcmp
0003ee 30e0      	CPI  R30,0
0003ef f411      	BRNE _0x5E
                 ; 0000 015E         SendDevs();
0003f0 d27b      	RCALL _SendDevs
                 ; 0000 015F     }
                 ; 0000 0160     else if(strcmp(input_buffer,ENABLE_OBDUV)==0){
0003f1 c19b      	RJMP _0x5F
                 _0x5E:
0003f2 940e 0d0d 	CALL SUBOPT_0xE
                +
0003f4 e2a2     +LDI R26 , LOW ( _0x53 + ( 18 ) )
0003f5 e0b9     +LDI R27 , HIGH ( _0x53 + ( 18 ) )
                 	__POINTW2MN _0x53,18
0003f6 940e 0759 	CALL _strcmp
0003f8 30e0      	CPI  R30,0
0003f9 f411      	BRNE _0x60
                 ; 0000 0161         CONTROL_FAN_OBDUV = ENABLE;
0003fa 9a28      	SBI  0x5,0
                 ; 0000 0162     }
                 ; 0000 0163      else if(strcmp(input_buffer,ENABLE_VIDUV)==0){
0003fb c191      	RJMP _0x63
                 _0x60:
0003fc 940e 0d0d 	CALL SUBOPT_0xE
                +
0003fe e2a7     +LDI R26 , LOW ( _0x53 + ( 23 ) )
0003ff e0b9     +LDI R27 , HIGH ( _0x53 + ( 23 ) )
                 	__POINTW2MN _0x53,23
000400 940e 0759 	CALL _strcmp
000402 30e0      	CPI  R30,0
000403 f411      	BRNE _0x64
                 ; 0000 0164         CONTROL_FAN_VIDUV = ENABLE;
000404 9a29      	SBI  0x5,1
                 ; 0000 0165     }
                 ; 0000 0166     else if(strcmp(input_buffer,ENABLE_LIGHT)==0){
000405 c187      	RJMP _0x67
                 _0x64:
000406 940e 0d0d 	CALL SUBOPT_0xE
                +
000408 e2ac     +LDI R26 , LOW ( _0x53 + ( 28 ) )
000409 e0b9     +LDI R27 , HIGH ( _0x53 + ( 28 ) )
                 	__POINTW2MN _0x53,28
00040a 940e 0759 	CALL _strcmp
00040c 30e0      	CPI  R30,0
00040d f411      	BRNE _0x68
                 ; 0000 0167         CONTROL_LIGHT = ENABLE;
00040e 9a2a      	SBI  0x5,2
                 ; 0000 0168     }
                 ; 0000 0169     else if(strcmp(input_buffer,DISABLE_OBDUV)==0){
00040f c17d      	RJMP _0x6B
                 _0x68:
000410 940e 0d0d 	CALL SUBOPT_0xE
                +
000412 e3a1     +LDI R26 , LOW ( _0x53 + ( 33 ) )
000413 e0b9     +LDI R27 , HIGH ( _0x53 + ( 33 ) )
                 	__POINTW2MN _0x53,33
000414 940e 0759 	CALL _strcmp
000416 30e0      	CPI  R30,0
000417 f411      	BRNE _0x6C
                 ; 0000 016A         CONTROL_FAN_OBDUV = DISABLE;
000418 9828      	CBI  0x5,0
                 ; 0000 016B     }
                 ; 0000 016C      else if(strcmp(input_buffer,DISABLE_VIDUV)==0){
000419 c173      	RJMP _0x6F
                 _0x6C:
00041a 940e 0d0d 	CALL SUBOPT_0xE
                +
00041c e3a6     +LDI R26 , LOW ( _0x53 + ( 38 ) )
00041d e0b9     +LDI R27 , HIGH ( _0x53 + ( 38 ) )
                 	__POINTW2MN _0x53,38
00041e 940e 0759 	CALL _strcmp
000420 30e0      	CPI  R30,0
000421 f411      	BRNE _0x70
                 ; 0000 016D 
                 ; 0000 016E         CONTROL_FAN_VIDUV = DISABLE;
000422 9829      	CBI  0x5,1
                 ; 0000 016F     }
                 ; 0000 0170     else if(strcmp(input_buffer,DISABLE_LIGHT)==0){
000423 c169      	RJMP _0x73
                 _0x70:
000424 940e 0d0d 	CALL SUBOPT_0xE
                +
000426 e3ab     +LDI R26 , LOW ( _0x53 + ( 43 ) )
000427 e0b9     +LDI R27 , HIGH ( _0x53 + ( 43 ) )
                 	__POINTW2MN _0x53,43
000428 940e 0759 	CALL _strcmp
00042a 30e0      	CPI  R30,0
00042b f411      	BRNE _0x74
                 ; 0000 0171         CONTROL_LIGHT = DISABLE;
00042c 982a      	CBI  0x5,2
                 ; 0000 0172     }
                 ; 0000 0173     else if(strcmp(input_buffer,COMMAND_TEST)==0) {
00042d c15f      	RJMP _0x77
                 _0x74:
00042e 940e 0d0d 	CALL SUBOPT_0xE
                +
000430 e4a0     +LDI R26 , LOW ( _0x53 + ( 48 ) )
000431 e0b9     +LDI R27 , HIGH ( _0x53 + ( 48 ) )
                 	__POINTW2MN _0x53,48
000432 940e 0759 	CALL _strcmp
000434 30e0      	CPI  R30,0
000435 f439      	BRNE _0x78
                 ; 0000 0174         sprintf(lcd_buffer,"TEST:Good.\r\n");
000436 940e 0cc7 	CALL SUBOPT_0x5
                +
000438 e4e6     +LDI R30 , LOW ( 2 * _0x0 + ( 190 ) )
000439 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 190 ) )
                 	__POINTW1FN _0x0,190
00043a 940e 0cdc 	CALL SUBOPT_0x7
                 ; 0000 0175         SendData(lcd_buffer);
                 ; 0000 0176     }
                 ; 0000 0177     else if(strcmp(input_buffer,REFIND_DEVICES)==0){
00043c c150      	RJMP _0x79
                 _0x78:
00043d 940e 0d0d 	CALL SUBOPT_0xE
                +
00043f e4a5     +LDI R26 , LOW ( _0x53 + ( 53 ) )
000440 e0b9     +LDI R27 , HIGH ( _0x53 + ( 53 ) )
                 	__POINTW2MN _0x53,53
000441 940e 0759 	CALL _strcmp
000443 30e0      	CPI  R30,0
000444 f449      	BRNE _0x7A
                 ; 0000 0178         w1_init();
000445 940e 0cbd 	CALL SUBOPT_0x4
                 ; 0000 0179         devices=w1_search(0xf0,rom_codes);
                 ; 0000 017A         sprintf(lcd_buffer,"TC:%d\r\n",devices);
000447 940e 0cc7 	CALL SUBOPT_0x5
                +
000449 e0e3     +LDI R30 , LOW ( 2 * _0x0 + ( 123 ) )
00044a e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 123 ) )
                 	__POINTW1FN _0x0,123
00044b 940e 0ccc 	CALL SUBOPT_0x6
                 ; 0000 017B         SendData(lcd_buffer);
                 ; 0000 017C     }
                 ; 0000 017D     else if(comcmp(input_buffer,TIME_CHECK_CONST)){
00044d c13f      	RJMP _0x7B
                 _0x7A:
00044e 940e 0d0d 	CALL SUBOPT_0xE
                +
000450 e4a8     +LDI R26 , LOW ( _0x53 + ( 56 ) )
000451 e0b9     +LDI R27 , HIGH ( _0x53 + ( 56 ) )
                 	__POINTW2MN _0x53,56
000452 df0d      	RCALL _comcmp
000453 30e0      	CPI  R30,0
000454 f019      	BREQ _0x7C
                 ; 0000 017E 
                 ; 0000 017F         time_chaeck_const = input_buffer[2];
                +
000455 9080 0e0d+LDS R8 , _input_buffer + ( 2 )
                 	__GETBRMN 8,_input_buffer,2
                 ; 0000 0180     }
                 ; 0000 0181     else if(strcmp(input_buffer, SEND_TIME_PREC)==0){
000457 c135      	RJMP _0x7D
                 _0x7C:
000458 940e 0d0d 	CALL SUBOPT_0xE
                +
00045a e4ab     +LDI R26 , LOW ( _0x53 + ( 59 ) )
00045b e0b9     +LDI R27 , HIGH ( _0x53 + ( 59 ) )
                 	__POINTW2MN _0x53,59
00045c 940e 0759 	CALL _strcmp
00045e 30e0      	CPI  R30,0
00045f f461      	BRNE _0x7E
                 ; 0000 0182         sprintf(lcd_buffer,"STPR%c\r\n",time_chaeck_const);
000460 940e 0cc7 	CALL SUBOPT_0x5
                +
000462 e5ee     +LDI R30 , LOW ( 2 * _0x0 + ( 214 ) )
000463 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 214 ) )
                 	__POINTW1FN _0x0,214
000464 93fa      	ST   -Y,R31
000465 93ea      	ST   -Y,R30
000466 2de8      	MOV  R30,R8
000467 940e 0d2e 	CALL SUBOPT_0x13
000469 940e 0cf5 	CALL SUBOPT_0xA
                 ; 0000 0183         SendData(lcd_buffer);
                 ; 0000 0184     }
                 ; 0000 0185     else if(strcmp(input_buffer,WRITE_HOUR_TO_EEPROM )==0) {
00046b c121      	RJMP _0x7F
                 _0x7E:
00046c 940e 0d0d 	CALL SUBOPT_0xE
                +
00046e e5a0     +LDI R26 , LOW ( _0x53 + ( 64 ) )
00046f e0b9     +LDI R27 , HIGH ( _0x53 + ( 64 ) )
                 	__POINTW2MN _0x53,64
000470 940e 0759 	CALL _strcmp
000472 30e0      	CPI  R30,0
000473 f431      	BRNE _0x80
                 ; 0000 0186         dev.hour = hours;
                +
000474 e0a5     +LDI R26 , LOW ( _dev + ( 5 ) )
000475 e0b0     +LDI R27 , HIGH ( _dev + ( 5 ) )
                 	__POINTW2MN _dev,5
000476 2de3      	MOV  R30,R3
000477 940e 11d6 	CALL __EEPROMWRB
                 ; 0000 0187     }
                 ; 0000 0188     else if(strcmp(input_buffer,GET_DAY_NUMBER )==0) {
000479 c113      	RJMP _0x81
                 _0x80:
00047a 940e 0d0d 	CALL SUBOPT_0xE
                +
00047c e5a9     +LDI R26 , LOW ( _0x53 + ( 73 ) )
00047d e0b9     +LDI R27 , HIGH ( _0x53 + ( 73 ) )
                 	__POINTW2MN _0x53,73
00047e 940e 0759 	CALL _strcmp
000480 30e0      	CPI  R30,0
000481 f469      	BRNE _0x82
                 ; 0000 0189         sprintf(lcd_buffer,"DAYNUMBER:%d\r\n",dev.day);
000482 940e 0cc7 	CALL SUBOPT_0x5
                +
000484 e7e6     +LDI R30 , LOW ( 2 * _0x0 + ( 238 ) )
000485 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 238 ) )
                 	__POINTW1FN _0x0,238
000486 93fa      	ST   -Y,R31
000487 93ea      	ST   -Y,R30
000488 940e 0ca9 	CALL SUBOPT_0x0
00048a 940e 0d2e 	CALL SUBOPT_0x13
00048c 940e 0cf5 	CALL SUBOPT_0xA
                 ; 0000 018A         SendData(lcd_buffer);
                 ; 0000 018B     }
                 ; 0000 018C     else if(strcmp(input_buffer,AGRESIVE_TEMP_CHECK )==0) {
00048e c0fe      	RJMP _0x83
                 _0x82:
00048f 940e 0d0d 	CALL SUBOPT_0xE
                +
000491 e5af     +LDI R26 , LOW ( _0x53 + ( 79 ) )
000492 e0b9     +LDI R27 , HIGH ( _0x53 + ( 79 ) )
                 	__POINTW2MN _0x53,79
000493 940e 0759 	CALL _strcmp
000495 30e0      	CPI  R30,0
000496 f449      	BRNE _0x84
                 ; 0000 018D         agresive_check = 1;
000497 e0e1      	LDI  R30,LOW(1)
000498 2ebe      	MOV  R11,R30
                 ; 0000 018E         sprintf(lcd_buffer,"Agresive Temp Check\r\n");
000499 940e 0cc7 	CALL SUBOPT_0x5
                +
00049b e8ee     +LDI R30 , LOW ( 2 * _0x0 + ( 262 ) )
00049c e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 262 ) )
                 	__POINTW1FN _0x0,262
00049d 940e 0cdc 	CALL SUBOPT_0x7
                 ; 0000 018F         SendData(lcd_buffer);
                 ; 0000 0190     }
                 ; 0000 0191     else if(strcmp(input_buffer,CONTROL_LOCK )==0) {
00049f c0ed      	RJMP _0x85
                 _0x84:
0004a0 940e 0d0d 	CALL SUBOPT_0xE
                +
0004a2 e6a8     +LDI R26 , LOW ( _0x53 + ( 88 ) )
0004a3 e0b9     +LDI R27 , HIGH ( _0x53 + ( 88 ) )
                 	__POINTW2MN _0x53,88
0004a4 940e 0759 	CALL _strcmp
0004a6 30e0      	CPI  R30,0
0004a7 f459      	BRNE _0x86
                 ; 0000 0192         control_locker = 1;
0004a8 e0e1      	LDI  R30,LOW(1)
0004a9 e0f0      	LDI  R31,HIGH(1)
                +
0004aa 2ede     +MOV R13 , R30
0004ab 2eef     +MOV R14 , R31
                 	__PUTW1R 13,14
                 ; 0000 0193         sprintf(lcd_buffer,"Under Control\r\n");
0004ac 940e 0cc7 	CALL SUBOPT_0x5
                +
0004ae eaea     +LDI R30 , LOW ( 2 * _0x0 + ( 290 ) )
0004af e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 290 ) )
                 	__POINTW1FN _0x0,290
0004b0 940e 0cdc 	CALL SUBOPT_0x7
                 ; 0000 0194         SendData(lcd_buffer);
                 ; 0000 0195     }
                 ; 0000 0196     else if(strcmp(input_buffer,CONTROL_UNLOCK )==0) {
0004b2 c0da      	RJMP _0x87
                 _0x86:
0004b3 940e 0d0d 	CALL SUBOPT_0xE
                +
0004b5 e6ae     +LDI R26 , LOW ( _0x53 + ( 94 ) )
0004b6 e0b9     +LDI R27 , HIGH ( _0x53 + ( 94 ) )
                 	__POINTW2MN _0x53,94
0004b7 940e 0759 	CALL _strcmp
0004b9 30e0      	CPI  R30,0
0004ba f449      	BRNE _0x88
                 ; 0000 0197         control_locker = 0;
0004bb 24dd      	CLR  R13
0004bc 24ee      	CLR  R14
                 ; 0000 0198         sprintf(lcd_buffer,"Auto Control\r\n");
0004bd 940e 0cc7 	CALL SUBOPT_0x5
                +
0004bf ece2     +LDI R30 , LOW ( 2 * _0x0 + ( 314 ) )
0004c0 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 314 ) )
                 	__POINTW1FN _0x0,314
0004c1 940e 0cdc 	CALL SUBOPT_0x7
                 ; 0000 0199         SendData(lcd_buffer);
                 ; 0000 019A     }
                 ; 0000 019B     /**************************************************/
                 ; 0000 019C     /**************************************************/
                 ; 0000 019D     else if(strcmp(input_buffer,GET_PERIOD )==0) {
0004c3 c0c9      	RJMP _0x89
                 _0x88:
0004c4 940e 0d0d 	CALL SUBOPT_0xE
                +
0004c6 e7a6     +LDI R26 , LOW ( _0x53 + ( 102 ) )
0004c7 e0b9     +LDI R27 , HIGH ( _0x53 + ( 102 ) )
                 	__POINTW2MN _0x53,102
0004c8 940e 0759 	CALL _strcmp
0004ca 30e0      	CPI  R30,0
0004cb f449      	BRNE _0x8A
                 ; 0000 019E         sprintf(lcd_buffer,"PERIOD:%c\r\n",dev.period);
0004cc 940e 0cc7 	CALL SUBOPT_0x5
0004ce 940e 0d4b 	CALL SUBOPT_0x17
0004d0 940e 0d2e 	CALL SUBOPT_0x13
0004d2 940e 0cf5 	CALL SUBOPT_0xA
                 ; 0000 019F         SendData(lcd_buffer);
                 ; 0000 01A0     }
                 ; 0000 01A1     else if(strcmp(input_buffer,GET_DAY_START )==0) {
0004d4 c0b8      	RJMP _0x8B
                 _0x8A:
0004d5 940e 0d0d 	CALL SUBOPT_0xE
                +
0004d7 e7ad     +LDI R26 , LOW ( _0x53 + ( 109 ) )
0004d8 e0b9     +LDI R27 , HIGH ( _0x53 + ( 109 ) )
                 	__POINTW2MN _0x53,109
0004d9 940e 0759 	CALL _strcmp
0004db 30e0      	CPI  R30,0
0004dc f449      	BRNE _0x8C
                 ; 0000 01A2         sprintf(lcd_buffer,"DAY.ST:%c\r\n",dev.day_start);
0004dd 940e 0cc7 	CALL SUBOPT_0x5
0004df 940e 0d50 	CALL SUBOPT_0x18
0004e1 940e 0d2e 	CALL SUBOPT_0x13
0004e3 940e 0cf5 	CALL SUBOPT_0xA
                 ; 0000 01A3         SendData(lcd_buffer);
                 ; 0000 01A4     }
                 ; 0000 01A5     else if(strcmp(input_buffer,GET_PERIOD_A_LEN )==0) {
0004e5 c0a7      	RJMP _0x8D
                 _0x8C:
0004e6 940e 0d0d 	CALL SUBOPT_0xE
                +
0004e8 e8a4     +LDI R26 , LOW ( _0x53 + ( 116 ) )
0004e9 e0b9     +LDI R27 , HIGH ( _0x53 + ( 116 ) )
                 	__POINTW2MN _0x53,116
0004ea 940e 0759 	CALL _strcmp
0004ec 30e0      	CPI  R30,0
0004ed f449      	BRNE _0x8E
                 ; 0000 01A6         sprintf(lcd_buffer,"PER.A.:%c\r\n", dev.period_a_len);
0004ee 940e 0cc7 	CALL SUBOPT_0x5
0004f0 940e 0d55 	CALL SUBOPT_0x19
0004f2 940e 0d2e 	CALL SUBOPT_0x13
0004f4 940e 0cf5 	CALL SUBOPT_0xA
                 ; 0000 01A7         SendData(lcd_buffer);
                 ; 0000 01A8     }
                 ; 0000 01A9     else if(strcmp(input_buffer,GET_PERIOD_B_LEN )==0) {
0004f6 c096      	RJMP _0x8F
                 _0x8E:
0004f7 940e 0d0d 	CALL SUBOPT_0xE
                +
0004f9 e8ab     +LDI R26 , LOW ( _0x53 + ( 123 ) )
0004fa e0b9     +LDI R27 , HIGH ( _0x53 + ( 123 ) )
                 	__POINTW2MN _0x53,123
0004fb 940e 0759 	CALL _strcmp
0004fd 30e0      	CPI  R30,0
0004fe f449      	BRNE _0x90
                 ; 0000 01AA         sprintf(lcd_buffer,"PER.B.:%c\r\n",dev.period_b_len);
0004ff 940e 0cc7 	CALL SUBOPT_0x5
000501 940e 0d5a 	CALL SUBOPT_0x1A
000503 940e 0d2e 	CALL SUBOPT_0x13
000505 940e 0cf5 	CALL SUBOPT_0xA
                 ; 0000 01AB         SendData(lcd_buffer);
                 ; 0000 01AC     }
                 ; 0000 01AD     else if(strcmp(input_buffer,GET_OUTPUT_STATUS )==0) {
000507 c085      	RJMP _0x91
                 _0x90:
000508 940e 0d0d 	CALL SUBOPT_0xE
                +
00050a e9a2     +LDI R26 , LOW ( _0x53 + ( 130 ) )
00050b e0b9     +LDI R27 , HIGH ( _0x53 + ( 130 ) )
                 	__POINTW2MN _0x53,130
00050c 940e 0759 	CALL _strcmp
00050e 30e0      	CPI  R30,0
00050f f4d9      	BRNE _0x92
                 ; 0000 01AE         sprintf(lcd_buffer,"GETOPS:%c%c%c\r\n",PORTB.0+48,PORTB.1+48,PORTB.2+48);
000510 940e 0cc7 	CALL SUBOPT_0x5
                +
000512 e2e4     +LDI R30 , LOW ( 2 * _0x0 + ( 412 ) )
000513 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 412 ) )
                 	__POINTW1FN _0x0,412
000514 93fa      	ST   -Y,R31
000515 93ea      	ST   -Y,R30
000516 e0e0      	LDI  R30,0
000517 9928      	SBIC 0x5,0
000518 e0e1      	LDI  R30,1
000519 5de0      	SUBI R30,-LOW(48)
00051a 940e 0d2e 	CALL SUBOPT_0x13
00051c e0e0      	LDI  R30,0
00051d 9929      	SBIC 0x5,1
00051e e0e1      	LDI  R30,1
00051f 5de0      	SUBI R30,-LOW(48)
000520 940e 0d2e 	CALL SUBOPT_0x13
000522 e0e0      	LDI  R30,0
000523 992a      	SBIC 0x5,2
000524 e0e1      	LDI  R30,1
000525 5de0      	SUBI R30,-LOW(48)
000526 940e 0d2e 	CALL SUBOPT_0x13
000528 940e 0d43 	CALL SUBOPT_0x16
                 ; 0000 01AF         SendData(lcd_buffer);
                 ; 0000 01B0     }
                 ; 0000 01B1 
                 ; 0000 01B2 
                 ; 0000 01B3     /**************************************************/
                 ; 0000 01B4     /**************************************************/
                 ; 0000 01B5     else if(comcmp(input_buffer,SET_DAY_NUMBER )) {
00052a c062      	RJMP _0x93
                 _0x92:
00052b 940e 0d0d 	CALL SUBOPT_0xE
                +
00052d e9a9     +LDI R26 , LOW ( _0x53 + ( 137 ) )
00052e e0b9     +LDI R27 , HIGH ( _0x53 + ( 137 ) )
                 	__POINTW2MN _0x53,137
00052f de30      	RCALL _comcmp
000530 30e0      	CPI  R30,0
000531 f089      	BREQ _0x94
                 ; 0000 01B6         dev.day =  input_buffer[SET_DAY_NUMBER_POS];
                +
000532 91e0 0e11+LDS R30 , _input_buffer + ( 6 )
                 	__GETB1MN _input_buffer,6
000534 e0a0      	LDI  R26,LOW(_dev)
000535 e0b0      	LDI  R27,HIGH(_dev)
000536 940e 0d5f 	CALL SUBOPT_0x1B
                 ; 0000 01B7         sprintf(lcd_buffer,"SETDNM:%c\r\n",dev.day);
                +
000538 e3eb     +LDI R30 , LOW ( 2 * _0x0 + ( 435 ) )
000539 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 435 ) )
                 	__POINTW1FN _0x0,435
00053a 93fa      	ST   -Y,R31
00053b 93ea      	ST   -Y,R30
00053c 940e 0ca9 	CALL SUBOPT_0x0
00053e 940e 0d2e 	CALL SUBOPT_0x13
000540 940e 0cf5 	CALL SUBOPT_0xA
                 ; 0000 01B8         SendData(lcd_buffer);
                 ; 0000 01B9     }
                 ; 0000 01BA     else if(comcmp(input_buffer,SET_PERIOD )) {
000542 c04a      	RJMP _0x95
                 _0x94:
000543 940e 0d0d 	CALL SUBOPT_0xE
                +
000545 eaa0     +LDI R26 , LOW ( _0x53 + ( 144 ) )
000546 e0b9     +LDI R27 , HIGH ( _0x53 + ( 144 ) )
                 	__POINTW2MN _0x53,144
000547 de18      	RCALL _comcmp
000548 30e0      	CPI  R30,0
000549 f059      	BREQ _0x96
                 ; 0000 01BB         dev.period =  input_buffer[SET_PERIOVD_POS];
                +
00054a e0a1     +LDI R26 , LOW ( _dev + ( 1 ) )
00054b e0b0     +LDI R27 , HIGH ( _dev + ( 1 ) )
                 	__POINTW2MN _dev,1
00054c 940e 0d62 	CALL SUBOPT_0x1C
                 ; 0000 01BC         sprintf(lcd_buffer,"PERIOD:%c\r\n",dev.period);
00054e 940e 0d4b 	CALL SUBOPT_0x17
000550 940e 0d2e 	CALL SUBOPT_0x13
000552 940e 0cf5 	CALL SUBOPT_0xA
                 ; 0000 01BD         SendData(lcd_buffer);
                 ; 0000 01BE     }
                 ; 0000 01BF     else if(comcmp(input_buffer,SET_DAY_START )) {
000554 c038      	RJMP _0x97
                 _0x96:
000555 940e 0d0d 	CALL SUBOPT_0xE
                +
000557 eaa7     +LDI R26 , LOW ( _0x53 + ( 151 ) )
000558 e0b9     +LDI R27 , HIGH ( _0x53 + ( 151 ) )
                 	__POINTW2MN _0x53,151
000559 de06      	RCALL _comcmp
00055a 30e0      	CPI  R30,0
00055b f059      	BREQ _0x98
                 ; 0000 01C0         dev.day_start   =  input_buffer[SET_DAY_START_POS];
                +
00055c e0a2     +LDI R26 , LOW ( _dev + ( 2 ) )
00055d e0b0     +LDI R27 , HIGH ( _dev + ( 2 ) )
                 	__POINTW2MN _dev,2
00055e 940e 0d62 	CALL SUBOPT_0x1C
                 ; 0000 01C1         sprintf(lcd_buffer,"DAY.ST:%c\r\n",dev.day_start);
000560 940e 0d50 	CALL SUBOPT_0x18
000562 940e 0d2e 	CALL SUBOPT_0x13
000564 940e 0cf5 	CALL SUBOPT_0xA
                 ; 0000 01C2         SendData(lcd_buffer);
                 ; 0000 01C3     }
                 ; 0000 01C4     else if(comcmp(input_buffer,SET_PERIOD_A_LEN )) {
000566 c026      	RJMP _0x99
                 _0x98:
000567 940e 0d0d 	CALL SUBOPT_0xE
                +
000569 eaae     +LDI R26 , LOW ( _0x53 + ( 158 ) )
00056a e0b9     +LDI R27 , HIGH ( _0x53 + ( 158 ) )
                 	__POINTW2MN _0x53,158
00056b ddf4      	RCALL _comcmp
00056c 30e0      	CPI  R30,0
00056d f059      	BREQ _0x9A
                 ; 0000 01C5         dev.period_a_len   =  input_buffer[SET_PERIOD_A_LEN_POS];
                +
00056e e0a3     +LDI R26 , LOW ( _dev + ( 3 ) )
00056f e0b0     +LDI R27 , HIGH ( _dev + ( 3 ) )
                 	__POINTW2MN _dev,3
000570 940e 0d62 	CALL SUBOPT_0x1C
                 ; 0000 01C6         sprintf(lcd_buffer,"PER.A.:%c\r\n", dev.period_a_len);
000572 940e 0d55 	CALL SUBOPT_0x19
000574 940e 0d2e 	CALL SUBOPT_0x13
000576 940e 0cf5 	CALL SUBOPT_0xA
                 ; 0000 01C7         SendData(lcd_buffer);
                 ; 0000 01C8     }
                 ; 0000 01C9     else if(comcmp(input_buffer,SET_PERIOD_B_LEN )) {
000578 c014      	RJMP _0x9B
                 _0x9A:
000579 940e 0d0d 	CALL SUBOPT_0xE
                +
00057b eba5     +LDI R26 , LOW ( _0x53 + ( 165 ) )
00057c e0b9     +LDI R27 , HIGH ( _0x53 + ( 165 ) )
                 	__POINTW2MN _0x53,165
00057d dde2      	RCALL _comcmp
00057e 30e0      	CPI  R30,0
00057f f059      	BREQ _0x9C
                 ; 0000 01CA         dev.period_b_len   =  input_buffer[SET_PERIOD_B_LEN_POS];
                +
000580 e0a4     +LDI R26 , LOW ( _dev + ( 4 ) )
000581 e0b0     +LDI R27 , HIGH ( _dev + ( 4 ) )
                 	__POINTW2MN _dev,4
000582 940e 0d62 	CALL SUBOPT_0x1C
                 ; 0000 01CB         sprintf(lcd_buffer,"PER.B.:%c\r\n",dev.period_b_len);
000584 940e 0d5a 	CALL SUBOPT_0x1A
000586 940e 0d2e 	CALL SUBOPT_0x13
000588 940e 0cf5 	CALL SUBOPT_0xA
                 ; 0000 01CC         SendData(lcd_buffer);
                 ; 0000 01CD     }
                 ; 0000 01CE     /**************************************************/
                 ; 0000 01CF     /**************************************************/
                 ; 0000 01D0     else{
00058a c002      	RJMP _0x9D
                 _0x9C:
                 ; 0000 01D1         return(0);
00058b e0e0      	LDI  R30,LOW(0)
00058c c138      	RJMP _0x20C000A
                 ; 0000 01D2     }
                 _0x9D:
                 _0x9B:
                 _0x99:
                 _0x97:
                 _0x95:
                 _0x93:
                 _0x91:
                 _0x8F:
                 _0x8D:
                 _0x8B:
                 _0x89:
                 _0x87:
                 _0x85:
                 _0x83:
                 _0x81:
                 _0x7F:
                 _0x7D:
                 _0x7B:
                 _0x79:
                 _0x77:
                 _0x73:
                 _0x6F:
                 _0x6B:
                 _0x67:
                 _0x63:
                 _0x5F:
                 _0x5D:
                 _0x5B:
                 _0x59:
                 _0x57:
                 ; 0000 01D3 
                 ; 0000 01D4     return (1);
00058d e0e1      	LDI  R30,LOW(1)
00058e c136      	RJMP _0x20C000A
                 ; 0000 01D5 
                 ; 0000 01D6 }
                 
                 	.DSEG
                 _0x53:
000910           	.BYTE 0xAC
                 ;//=============================================================================
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 01DA {
                 
                 	.CSEG
                 _timer1_ovf_isr:
00058f 920a      	ST   -Y,R0
000590 921a      	ST   -Y,R1
000591 938a      	ST   -Y,R24
000592 939a      	ST   -Y,R25
000593 93aa      	ST   -Y,R26
000594 93ba      	ST   -Y,R27
000595 93ea      	ST   -Y,R30
000596 93fa      	ST   -Y,R31
000597 b7ef      	IN   R30,SREG
000598 93ea      	ST   -Y,R30
                 ; 0000 01DB     if(++milisec>=time_chaeck_const ) {
000599 9443      	INC  R4
00059a 1448      	CP   R4,R8
00059b f140      	BRLO _0x9E
                 ; 0000 01DC         if(++seconds>=60){
00059c 9453      	INC  R5
00059d e3ec      	LDI  R30,LOW(60)
00059e 165e      	CP   R5,R30
00059f f118      	BRLO _0x9F
                 ; 0000 01DD             if(++minutes>=60){
0005a0 9463      	INC  R6
0005a1 166e      	CP   R6,R30
0005a2 f0d0      	BRLO _0xA0
                 ; 0000 01DE 
                 ; 0000 01DF                 if(++hours>=24){
0005a3 9433      	INC  R3
0005a4 e1e8      	LDI  R30,LOW(24)
0005a5 163e      	CP   R3,R30
0005a6 f040      	BRLO _0xA1
                 ; 0000 01E0                     hours=0;
0005a7 2433      	CLR  R3
                 ; 0000 01E1                     dev.day++;
0005a8 940e 0ca9 	CALL SUBOPT_0x0
0005aa 5fef      	SUBI R30,-LOW(1)
0005ab 940e 11d6 	CALL __EEPROMWRB
0005ad 50e1      	SUBI R30,LOW(1)
                 ; 0000 01E2                 }
                 ; 0000 01E3                 else if(hours%2==0){
0005ae c00d      	RJMP _0xA2
                 _0xA1:
0005af 2da3      	MOV  R26,R3
0005b0 27bb      	CLR  R27
0005b1 e0e2      	LDI  R30,LOW(2)
0005b2 e0f0      	LDI  R31,HIGH(2)
0005b3 940e 1170 	CALL __MODW21
0005b5 9730      	SBIW R30,0
0005b6 f429      	BRNE _0xA3
                 ; 0000 01E4                     dev.hour = hours;
                +
0005b7 e0a5     +LDI R26 , LOW ( _dev + ( 5 ) )
0005b8 e0b0     +LDI R27 , HIGH ( _dev + ( 5 ) )
                 	__POINTW2MN _dev,5
0005b9 2de3      	MOV  R30,R3
0005ba 940e 11d6 	CALL __EEPROMWRB
                 ; 0000 01E5                 }
                 ; 0000 01E6                  minutes=0;
                 _0xA3:
                 _0xA2:
0005bc 2466      	CLR  R6
                 ; 0000 01E7                 // ReadTemperatureBool = 10;
                 ; 0000 01E8             }
                 ; 0000 01E9             seconds=0;
                 _0xA0:
0005bd 2455      	CLR  R5
                 ; 0000 01EA             temp_check++;
0005be 91e0 0e29 	LDS  R30,_temp_check
0005c0 5fef      	SUBI R30,-LOW(1)
0005c1 93e0 0e29 	STS  _temp_check,R30
                 ; 0000 01EB 
                 ; 0000 01EC         }
                 ; 0000 01ED         milisec=0;
                 _0x9F:
0005c3 2444      	CLR  R4
                 ; 0000 01EE 
                 ; 0000 01EF     }
                 ; 0000 01F0 
                 ; 0000 01F1 }
                 _0x9E:
0005c4 91e9      	LD   R30,Y+
0005c5 bfef      	OUT  SREG,R30
0005c6 91f9      	LD   R31,Y+
0005c7 91e9      	LD   R30,Y+
0005c8 91b9      	LD   R27,Y+
0005c9 91a9      	LD   R26,Y+
0005ca 9199      	LD   R25,Y+
0005cb 9189      	LD   R24,Y+
0005cc 9019      	LD   R1,Y+
0005cd 9009      	LD   R0,Y+
0005ce 9518      	RETI
                 ;//=============================================================================
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 01F7 {
                 _getchar:
                 ; 0000 01F8     char data;
                 ; 0000 01F9     while (rx_counter0==0);
0005cf 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0xA4:
0005d0 91e0 0e68 	LDS  R30,_rx_counter0
0005d2 30e0      	CPI  R30,0
0005d3 f3e1      	BREQ _0xA4
                 ; 0000 01FA     data=rx_buffer0[rx_rd_index0++];
0005d4 91e0 0e67 	LDS  R30,_rx_rd_index0
0005d6 5fef      	SUBI R30,-LOW(1)
0005d7 93e0 0e67 	STS  _rx_rd_index0,R30
0005d9 940e 0d65 	CALL SUBOPT_0x1D
0005db 5de6      	SUBI R30,LOW(-_rx_buffer0)
0005dc 4ff1      	SBCI R31,HIGH(-_rx_buffer0)
0005dd 8110      	LD   R17,Z
                 ; 0000 01FB     #if RX_BUFFER_SIZE0 != 256
                 ; 0000 01FC     if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
0005de 91a0 0e67 	LDS  R26,_rx_rd_index0
0005e0 31ae      	CPI  R26,LOW(0x1E)
0005e1 f419      	BRNE _0xA7
0005e2 e0e0      	LDI  R30,LOW(0)
0005e3 93e0 0e67 	STS  _rx_rd_index0,R30
                 ; 0000 01FD     #endif
                 ; 0000 01FE     #asm("cli")
                 _0xA7:
0005e5 94f8      	cli
                 ; 0000 01FF     --rx_counter0;
0005e6 91e0 0e68 	LDS  R30,_rx_counter0
0005e8 50e1      	SUBI R30,LOW(1)
0005e9 93e0 0e68 	STS  _rx_counter0,R30
                 ; 0000 0200     #asm("sei")
0005eb 9478      	sei
                 ; 0000 0201     return data;
0005ec 2fe1      	MOV  R30,R17
0005ed c0d7      	RJMP _0x20C000A
                 ; 0000 0202 }
                 ;#pragma used-
                 ;#endif
                 ;//=============================================================================
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 020A {
                 _putchar:
                 ; 0000 020B     while (tx_counter0 == TX_BUFFER_SIZE0);
0005ee 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0xA8:
0005ef 91a0 0e6b 	LDS  R26,_tx_counter0
0005f1 31ae      	CPI  R26,LOW(0x1E)
0005f2 f3e1      	BREQ _0xA8
                 ; 0000 020C     #asm("cli")
0005f3 94f8      	cli
                 ; 0000 020D     if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
0005f4 91e0 0e6b 	LDS  R30,_tx_counter0
0005f6 30e0      	CPI  R30,0
0005f7 f421      	BRNE _0xAC
0005f8 91e0 00c0 	LDS  R30,192
0005fa 72e0      	ANDI R30,LOW(0x20)
0005fb f4c1      	BRNE _0xAB
                 _0xAC:
                 ; 0000 020E        {
                 ; 0000 020F        tx_buffer0[tx_wr_index0++]=c;
0005fc 91e0 0e69 	LDS  R30,_tx_wr_index0
0005fe 5fef      	SUBI R30,-LOW(1)
0005ff 93e0 0e69 	STS  _tx_wr_index0,R30
000601 940e 0d65 	CALL SUBOPT_0x1D
000603 5be8      	SUBI R30,LOW(-_tx_buffer0)
000604 4ff1      	SBCI R31,HIGH(-_tx_buffer0)
000605 81a8      	LD   R26,Y
000606 83a0      	STD  Z+0,R26
                 ; 0000 0210     #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0211        if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
000607 91a0 0e69 	LDS  R26,_tx_wr_index0
000609 31ae      	CPI  R26,LOW(0x1E)
00060a f419      	BRNE _0xAE
00060b e0e0      	LDI  R30,LOW(0)
00060c 93e0 0e69 	STS  _tx_wr_index0,R30
                 ; 0000 0212     #endif
                 ; 0000 0213        ++tx_counter0;
                 _0xAE:
00060e 91e0 0e6b 	LDS  R30,_tx_counter0
000610 5fef      	SUBI R30,-LOW(1)
000611 93e0 0e6b 	STS  _tx_counter0,R30
                 ; 0000 0214        }
                 ; 0000 0215     else
000613 c003      	RJMP _0xAF
                 _0xAB:
                 ; 0000 0216        UDR0=c;
000614 81e8      	LD   R30,Y
000615 93e0 00c6 	STS  198,R30
                 ; 0000 0217     #asm("sei")
                 _0xAF:
000617 9478      	sei
                 ; 0000 0218 }
000618 9621      	ADIW R28,1
000619 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;//=============================================================================
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 021E {
                 _usart_rx_isr:
00061a 93aa      	ST   -Y,R26
00061b 93ea      	ST   -Y,R30
00061c 93fa      	ST   -Y,R31
00061d b7ef      	IN   R30,SREG
00061e 93ea      	ST   -Y,R30
                 ; 0000 021F char status,data;
                 ; 0000 0220 status=UCSR0A;
00061f 931a      	ST   -Y,R17
000620 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000621 9110 00c0 	LDS  R17,192
                 ; 0000 0221 data=UDR0;
000623 9100 00c6 	LDS  R16,198
                 ; 0000 0222 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000625 2fe1      	MOV  R30,R17
000626 71ec      	ANDI R30,LOW(0x1C)
000627 f4e1      	BRNE _0xB0
                 ; 0000 0223    {
                 ; 0000 0224    rx_buffer0[rx_wr_index0++]=data;
000628 91e0 0e66 	LDS  R30,_rx_wr_index0
00062a 5fef      	SUBI R30,-LOW(1)
00062b 93e0 0e66 	STS  _rx_wr_index0,R30
00062d 940e 0d65 	CALL SUBOPT_0x1D
00062f 5de6      	SUBI R30,LOW(-_rx_buffer0)
000630 4ff1      	SBCI R31,HIGH(-_rx_buffer0)
000631 8300      	ST   Z,R16
                 ; 0000 0225 #if RX_BUFFER_SIZE0 == 256
                 ; 0000 0226    // special case for receiver buffer size=256
                 ; 0000 0227    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 0228 #else
                 ; 0000 0229    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
000632 91a0 0e66 	LDS  R26,_rx_wr_index0
000634 31ae      	CPI  R26,LOW(0x1E)
000635 f419      	BRNE _0xB1
000636 e0e0      	LDI  R30,LOW(0)
000637 93e0 0e66 	STS  _rx_wr_index0,R30
                 ; 0000 022A    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0xB1:
000639 91a0 0e68 	LDS  R26,_rx_counter0
00063b 5faf      	SUBI R26,-LOW(1)
00063c 93a0 0e68 	STS  _rx_counter0,R26
00063e 31ae      	CPI  R26,LOW(0x1E)
00063f f421      	BRNE _0xB2
                 ; 0000 022B       {
                 ; 0000 022C       rx_counter0=0;
000640 e0e0      	LDI  R30,LOW(0)
000641 93e0 0e68 	STS  _rx_counter0,R30
                 ; 0000 022D       rx_buffer_overflow0=1;
000643 9af0      	SBI  0x1E,0
                 ; 0000 022E       }
                 ; 0000 022F #endif
                 ; 0000 0230    }
                 _0xB2:
                 ; 0000 0231 }
                 _0xB0:
000644 9109      	LD   R16,Y+
000645 9119      	LD   R17,Y+
000646 c01f      	RJMP _0xC2
                 ;//=============================================================================
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 0235 {
                 _usart_tx_isr:
000647 93aa      	ST   -Y,R26
000648 93ea      	ST   -Y,R30
000649 93fa      	ST   -Y,R31
00064a b7ef      	IN   R30,SREG
00064b 93ea      	ST   -Y,R30
                 ; 0000 0236 if (tx_counter0)
00064c 91e0 0e6b 	LDS  R30,_tx_counter0
00064e 30e0      	CPI  R30,0
00064f f0b1      	BREQ _0xB5
                 ; 0000 0237    {
                 ; 0000 0238    --tx_counter0;
000650 50e1      	SUBI R30,LOW(1)
000651 93e0 0e6b 	STS  _tx_counter0,R30
                 ; 0000 0239    UDR0=tx_buffer0[tx_rd_index0++];
000653 91e0 0e6a 	LDS  R30,_tx_rd_index0
000655 5fef      	SUBI R30,-LOW(1)
000656 93e0 0e6a 	STS  _tx_rd_index0,R30
000658 940e 0d65 	CALL SUBOPT_0x1D
00065a 5be8      	SUBI R30,LOW(-_tx_buffer0)
00065b 4ff1      	SBCI R31,HIGH(-_tx_buffer0)
00065c 81e0      	LD   R30,Z
00065d 93e0 00c6 	STS  198,R30
                 ; 0000 023A #if TX_BUFFER_SIZE0 != 256
                 ; 0000 023B    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
00065f 91a0 0e6a 	LDS  R26,_tx_rd_index0
000661 31ae      	CPI  R26,LOW(0x1E)
000662 f419      	BRNE _0xB6
000663 e0e0      	LDI  R30,LOW(0)
000664 93e0 0e6a 	STS  _tx_rd_index0,R30
                 ; 0000 023C #endif
                 ; 0000 023D    }
                 _0xB6:
                 ; 0000 023E }
                 _0xB5:
                 _0xC2:
000666 91e9      	LD   R30,Y+
000667 bfef      	OUT  SREG,R30
000668 91f9      	LD   R31,Y+
000669 91e9      	LD   R30,Y+
00066a 91a9      	LD   R26,Y+
00066b 9518      	RETI
                 ;//=============================================================================
                 ;void SendDevs(){
                 ; 0000 0240 void SendDevs(){
                 _SendDevs:
                 ; 0000 0241     unsigned char i;
                 ; 0000 0242     if (devices)
00066c 931a      	ST   -Y,R17
                 ;	i -> R17
00066d 2077      	TST  R7
00066e f411      	BRNE PC+3
00066f 940c 06c5 	JMP _0xB7
                 ; 0000 0243     {
                 ; 0000 0244         for (i=0;i<devices;i++)
000671 e010      	LDI  R17,LOW(0)
                 _0xB9:
000672 1517      	CP   R17,R7
000673 f010      	BRLO PC+3
000674 940c 06c5 	JMP _0xBA
                 ; 0000 0245         {
                 ; 0000 0246             delay_ms(10);
000676 e0aa      	LDI  R26,LOW(10)
000677 940e 0cfd 	CALL SUBOPT_0xB
                 ; 0000 0247             sprintf(lcd_buffer,"D[%d]:%02X%02X%02X%02X%02X%02X%02X%02X\r\n"
                 ; 0000 0248             ,i
                 ; 0000 0249             ,rom_codes[i][0]
                 ; 0000 024A             ,rom_codes[i][1]
                 ; 0000 024B             ,rom_codes[i][2]
                 ; 0000 024C             ,rom_codes[i][3]
                 ; 0000 024D             ,rom_codes[i][4]
                 ; 0000 024E             ,rom_codes[i][5]
                 ; 0000 024F             ,rom_codes[i][6]
                 ; 0000 0250             ,rom_codes[i][7]);
000679 940e 0cc7 	CALL SUBOPT_0x5
                +
00067b e6e3     +LDI R30 , LOW ( 2 * _0x0 + ( 475 ) )
00067c e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 475 ) )
                 	__POINTW1FN _0x0,475
00067d 940e 0cec 	CALL SUBOPT_0x9
00067f 940e 0ce6 	CALL SUBOPT_0x8
000681 81e0      	LD   R30,Z
000682 940e 0d2e 	CALL SUBOPT_0x13
000684 e0a9      	LDI  R26,LOW(9)
000685 9f1a      	MUL  R17,R26
000686 01f0      	MOVW R30,R0
                +
000687 53ea     +SUBI R30 , LOW ( - _rom_codes - ( 1 ) )
000688 4ff6     +SBCI R31 , HIGH ( - _rom_codes - ( 1 ) )
                 	__ADDW1MN _rom_codes,1
000689 81e0      	LD   R30,Z
00068a 940e 0d2e 	CALL SUBOPT_0x13
00068c e0a9      	LDI  R26,LOW(9)
00068d 9f1a      	MUL  R17,R26
00068e 01f0      	MOVW R30,R0
                +
00068f 53e9     +SUBI R30 , LOW ( - _rom_codes - ( 2 ) )
000690 4ff6     +SBCI R31 , HIGH ( - _rom_codes - ( 2 ) )
                 	__ADDW1MN _rom_codes,2
000691 81e0      	LD   R30,Z
000692 940e 0d2e 	CALL SUBOPT_0x13
000694 e0a9      	LDI  R26,LOW(9)
000695 9f1a      	MUL  R17,R26
000696 01f0      	MOVW R30,R0
                +
000697 53e8     +SUBI R30 , LOW ( - _rom_codes - ( 3 ) )
000698 4ff6     +SBCI R31 , HIGH ( - _rom_codes - ( 3 ) )
                 	__ADDW1MN _rom_codes,3
000699 81e0      	LD   R30,Z
00069a 940e 0d2e 	CALL SUBOPT_0x13
00069c e0a9      	LDI  R26,LOW(9)
00069d 9f1a      	MUL  R17,R26
00069e 01f0      	MOVW R30,R0
                +
00069f 53e7     +SUBI R30 , LOW ( - _rom_codes - ( 4 ) )
0006a0 4ff6     +SBCI R31 , HIGH ( - _rom_codes - ( 4 ) )
                 	__ADDW1MN _rom_codes,4
0006a1 81e0      	LD   R30,Z
0006a2 940e 0d2e 	CALL SUBOPT_0x13
0006a4 e0a9      	LDI  R26,LOW(9)
0006a5 9f1a      	MUL  R17,R26
0006a6 01f0      	MOVW R30,R0
                +
0006a7 53e6     +SUBI R30 , LOW ( - _rom_codes - ( 5 ) )
0006a8 4ff6     +SBCI R31 , HIGH ( - _rom_codes - ( 5 ) )
                 	__ADDW1MN _rom_codes,5
0006a9 81e0      	LD   R30,Z
0006aa 940e 0d2e 	CALL SUBOPT_0x13
0006ac e0a9      	LDI  R26,LOW(9)
0006ad 9f1a      	MUL  R17,R26
0006ae 01f0      	MOVW R30,R0
                +
0006af 53e5     +SUBI R30 , LOW ( - _rom_codes - ( 6 ) )
0006b0 4ff6     +SBCI R31 , HIGH ( - _rom_codes - ( 6 ) )
                 	__ADDW1MN _rom_codes,6
0006b1 81e0      	LD   R30,Z
0006b2 940e 0d2e 	CALL SUBOPT_0x13
0006b4 e0a9      	LDI  R26,LOW(9)
0006b5 9f1a      	MUL  R17,R26
0006b6 01f0      	MOVW R30,R0
                +
0006b7 53e4     +SUBI R30 , LOW ( - _rom_codes - ( 7 ) )
0006b8 4ff6     +SBCI R31 , HIGH ( - _rom_codes - ( 7 ) )
                 	__ADDW1MN _rom_codes,7
0006b9 81e0      	LD   R30,Z
0006ba 940e 0d2e 	CALL SUBOPT_0x13
0006bc e284      	LDI  R24,36
0006bd 940e 0abb 	CALL _sprintf
0006bf 96a8      	ADIW R28,40
                 ; 0000 0251             SendData(lcd_buffer);
0006c0 eead      	LDI  R26,LOW(_lcd_buffer)
0006c1 e0bd      	LDI  R27,HIGH(_lcd_buffer)
0006c2 d018      	RCALL _SendData
                 ; 0000 0252 
                 ; 0000 0253         }
0006c3 5f1f      	SUBI R17,-1
0006c4 cfad      	RJMP _0xB9
                 _0xBA:
                 ; 0000 0254     }
                 ; 0000 0255 }
                 _0xB7:
                 _0x20C000A:
0006c5 9119      	LD   R17,Y+
0006c6 9508      	RET
                 ;//=============================================================================
                 ;void getData(char *data)
                 ; 0000 0258 {
                 _getData:
                 ; 0000 0259    // unsigned char recidev = 0;
                 ; 0000 025A     while(rx_counter0){
0006c7 93ba      	ST   -Y,R27
0006c8 93aa      	ST   -Y,R26
                 ;	*data -> Y+0
                 _0xBB:
0006c9 91e0 0e68 	LDS  R30,_rx_counter0
0006cb 30e0      	CPI  R30,0
0006cc f069      	BREQ _0xBD
                 ; 0000 025B        *(data++) = getchar();
0006cd 81e8      	LD   R30,Y
0006ce 81f9      	LDD  R31,Y+1
0006cf 9631      	ADIW R30,1
0006d0 83e8      	ST   Y,R30
0006d1 83f9      	STD  Y+1,R31
0006d2 9731      	SBIW R30,1
0006d3 93ff      	PUSH R31
0006d4 93ef      	PUSH R30
0006d5 def9      	RCALL _getchar
0006d6 91af      	POP  R26
0006d7 91bf      	POP  R27
0006d8 93ec      	ST   X,R30
                 ; 0000 025C       // recidev++;
                 ; 0000 025D     }
0006d9 cfef      	RJMP _0xBB
                 _0xBD:
                 ; 0000 025E 
                 ; 0000 025F }
0006da c00d      	RJMP _0x20C0009
                 ;
                 ;//=============================================================================
                 ;void SendData(char *data)
                 ; 0000 0263 {
                 _SendData:
                 ; 0000 0264     while(*data != 0)
0006db 93ba      	ST   -Y,R27
0006dc 93aa      	ST   -Y,R26
                 ;	*data -> Y+0
                 _0xBE:
0006dd 81a8      	LD   R26,Y
0006de 81b9      	LDD  R27,Y+1
0006df 91ec      	LD   R30,X
0006e0 30e0      	CPI  R30,0
0006e1 f031      	BREQ _0xC0
                 ; 0000 0265     {
                 ; 0000 0266         putchar(*(data++));
0006e2 91ed      	LD   R30,X+
0006e3 83a8      	ST   Y,R26
0006e4 83b9      	STD  Y+1,R27
0006e5 2fae      	MOV  R26,R30
0006e6 df07      	RCALL _putchar
                 ; 0000 0267         //delay_ms(1);
                 ; 0000 0268     }
0006e7 cff5      	RJMP _0xBE
                 _0xC0:
                 ; 0000 0269 }
                 _0x20C0009:
0006e8 9622      	ADIW R28,2
0006e9 9508      	RET
                 ;//=============================================================================
                 ;void InitilizeMC()
                 ; 0000 026C {
                 _InitilizeMC:
                 ; 0000 026D     // Crystal Oscillator division factor: 1
                 ; 0000 026E     #pragma optsize-
                 ; 0000 026F     CLKPR=0x80;
0006ea e8e0      	LDI  R30,LOW(128)
0006eb 93e0 0061 	STS  97,R30
                 ; 0000 0270     CLKPR=0x00;
0006ed e0e0      	LDI  R30,LOW(0)
0006ee 93e0 0061 	STS  97,R30
                 ; 0000 0271     #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0272     #pragma optsize+
                 ; 0000 0273     #endif
                 ; 0000 0274 
                 ; 0000 0275     PORTA=0x00;
0006f0 b9e2      	OUT  0x2,R30
                 ; 0000 0276     DDRA=0x00;
0006f1 b9e1      	OUT  0x1,R30
                 ; 0000 0277 
                 ; 0000 0278     PORTB=0x00;
0006f2 b9e5      	OUT  0x5,R30
                 ; 0000 0279     DDRB=0x07;
0006f3 e0e7      	LDI  R30,LOW(7)
0006f4 b9e4      	OUT  0x4,R30
                 ; 0000 027A 
                 ; 0000 027B     PORTC=0x00;
0006f5 e0e0      	LDI  R30,LOW(0)
0006f6 b9e8      	OUT  0x8,R30
                 ; 0000 027C     DDRC=0x00;
0006f7 b9e7      	OUT  0x7,R30
                 ; 0000 027D 
                 ; 0000 027E     PORTD=0x00;
0006f8 b9eb      	OUT  0xB,R30
                 ; 0000 027F     DDRD=0x00;
0006f9 b9ea      	OUT  0xA,R30
                 ; 0000 0280 
                 ; 0000 0281     // Timer/Counter 0 initialization
                 ; 0000 0282     // Clock source: System Clock
                 ; 0000 0283     // Clock value: Timer 0 Stopped
                 ; 0000 0284     // Mode: Normal top=0xFF
                 ; 0000 0285     // OC0A output: Disconnected
                 ; 0000 0286     // OC0B output: Disconnected
                 ; 0000 0287     TCCR0A=0x00;
0006fa bde4      	OUT  0x24,R30
                 ; 0000 0288     TCCR0B=0x00;
0006fb bde5      	OUT  0x25,R30
                 ; 0000 0289     TCNT0=0x00;
0006fc bde6      	OUT  0x26,R30
                 ; 0000 028A     OCR0A=0x00;
0006fd bde7      	OUT  0x27,R30
                 ; 0000 028B     OCR0B=0x00;
0006fe bde8      	OUT  0x28,R30
                 ; 0000 028C 
                 ; 0000 028D     // Timer/Counter 1 initialization
                 ; 0000 028E     // Clock source: System Clock
                 ; 0000 028F     // Clock value: 8000,000 kHz
                 ; 0000 0290     // Mode: Normal top=0xFFFF
                 ; 0000 0291     // OC1A output: Discon.
                 ; 0000 0292     // OC1B output: Discon.
                 ; 0000 0293     // Noise Canceler: Off
                 ; 0000 0294     // Input Capture on Falling Edge
                 ; 0000 0295     // Timer1 Overflow Interrupt: On
                 ; 0000 0296     // Input Capture Interrupt: Off
                 ; 0000 0297     // Compare A Match Interrupt: Off
                 ; 0000 0298     // Compare B Match Interrupt: Off
                 ; 0000 0299     TCCR1A=0x00;
0006ff 93e0 0080 	STS  128,R30
                 ; 0000 029A     TCCR1B=0x01;
000701 e0e1      	LDI  R30,LOW(1)
000702 93e0 0081 	STS  129,R30
                 ; 0000 029B     TCNT1H=0x00;
000704 e0e0      	LDI  R30,LOW(0)
000705 93e0 0085 	STS  133,R30
                 ; 0000 029C     TCNT1L=0x00;
000707 93e0 0084 	STS  132,R30
                 ; 0000 029D     ICR1H=0x00;
000709 93e0 0087 	STS  135,R30
                 ; 0000 029E     ICR1L=0x00;
00070b 93e0 0086 	STS  134,R30
                 ; 0000 029F     OCR1AH=0x00;
00070d 93e0 0089 	STS  137,R30
                 ; 0000 02A0     OCR1AL=0x00;
00070f 93e0 0088 	STS  136,R30
                 ; 0000 02A1     OCR1BH=0x00;
000711 93e0 008b 	STS  139,R30
                 ; 0000 02A2     OCR1BL=0x00;
000713 93e0 008a 	STS  138,R30
                 ; 0000 02A3 
                 ; 0000 02A4     // Timer/Counter 2 initialization
                 ; 0000 02A5     // Clock source: System Clock
                 ; 0000 02A6     // Clock value: Timer2 Stopped
                 ; 0000 02A7     // Mode: Normal top=0xFF
                 ; 0000 02A8     // OC2A output: Disconnected
                 ; 0000 02A9     // OC2B output: Disconnected
                 ; 0000 02AA     ASSR=0x00;
000715 93e0 00b6 	STS  182,R30
                 ; 0000 02AB     TCCR2A=0x00;
000717 93e0 00b0 	STS  176,R30
                 ; 0000 02AC     TCCR2B=0x00;
000719 93e0 00b1 	STS  177,R30
                 ; 0000 02AD     TCNT2=0x00;
00071b 93e0 00b2 	STS  178,R30
                 ; 0000 02AE     OCR2A=0x00;
00071d 93e0 00b3 	STS  179,R30
                 ; 0000 02AF     OCR2B=0x00;
00071f 93e0 00b4 	STS  180,R30
                 ; 0000 02B0 
                 ; 0000 02B1     // External Interrupt(s) initialization
                 ; 0000 02B2     // INT0: Off
                 ; 0000 02B3     // INT1: Off
                 ; 0000 02B4     // INT2: Off
                 ; 0000 02B5     // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 02B6     // Interrupt on any change on pins PCINT8-15: Off
                 ; 0000 02B7     // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 02B8     // Interrupt on any change on pins PCINT24-31: Off
                 ; 0000 02B9     EICRA=0x00;
000721 93e0 0069 	STS  105,R30
                 ; 0000 02BA     EIMSK=0x00;
000723 bbed      	OUT  0x1D,R30
                 ; 0000 02BB     PCICR=0x00;
000724 93e0 0068 	STS  104,R30
                 ; 0000 02BC 
                 ; 0000 02BD     // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 02BE     TIMSK0=0x00;
000726 93e0 006e 	STS  110,R30
                 ; 0000 02BF 
                 ; 0000 02C0     // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 02C1     TIMSK1=0x01;
000728 e0e1      	LDI  R30,LOW(1)
000729 93e0 006f 	STS  111,R30
                 ; 0000 02C2 
                 ; 0000 02C3     // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 02C4     TIMSK2=0x00;
00072b e0e0      	LDI  R30,LOW(0)
00072c 93e0 0070 	STS  112,R30
                 ; 0000 02C5 
                 ; 0000 02C6     // USART initialization
                 ; 0000 02C7     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 02C8     // USART Receiver: On
                 ; 0000 02C9     // USART Transmitter: On
                 ; 0000 02CA     // USART0 Mode: Asynchronous
                 ; 0000 02CB     // USART Baud Rate: 9600
                 ; 0000 02CC     UCSR0A=0x00;
00072e 93e0 00c0 	STS  192,R30
                 ; 0000 02CD     UCSR0B=0xD8;
000730 ede8      	LDI  R30,LOW(216)
000731 93e0 00c1 	STS  193,R30
                 ; 0000 02CE     UCSR0C=0x06;
000733 e0e6      	LDI  R30,LOW(6)
000734 93e0 00c2 	STS  194,R30
                 ; 0000 02CF     UBRR0H=0x00;
000736 e0e0      	LDI  R30,LOW(0)
000737 93e0 00c5 	STS  197,R30
                 ; 0000 02D0     UBRR0L=0x33;
000739 e3e3      	LDI  R30,LOW(51)
00073a 93e0 00c4 	STS  196,R30
                 ; 0000 02D1 
                 ; 0000 02D2     // Analog Comparator initialization
                 ; 0000 02D3     // Analog Comparator: Off
                 ; 0000 02D4     // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 02D5     ACSR=0x80;
00073c e8e0      	LDI  R30,LOW(128)
00073d bfe0      	OUT  0x30,R30
                 ; 0000 02D6     ADCSRB=0x00;
00073e e0e0      	LDI  R30,LOW(0)
00073f 93e0 007b 	STS  123,R30
                 ; 0000 02D7     DIDR1=0x00;
000741 93e0 007f 	STS  127,R30
                 ; 0000 02D8 
                 ; 0000 02D9     // ADC initialization
                 ; 0000 02DA     // ADC disabled
                 ; 0000 02DB     ADCSRA=0x00;
000743 93e0 007a 	STS  122,R30
                 ; 0000 02DC 
                 ; 0000 02DD     // SPI initialization
                 ; 0000 02DE     // SPI disabled
                 ; 0000 02DF     SPCR=0x00;
000745 bdec      	OUT  0x2C,R30
                 ; 0000 02E0 
                 ; 0000 02E1     // TWI initialization
                 ; 0000 02E2     // TWI disabled
                 ; 0000 02E3     TWCR=0x00;
000746 93e0 00bc 	STS  188,R30
                 ; 0000 02E4 }
000748 9508      	RET
                 ;//=============================================================================
                 ;//=============================================================================
                 ;//=============================================================================
                 
                 	.CSEG
                 _memset:
000749 93ba      	ST   -Y,R27
00074a 93aa      	ST   -Y,R26
00074b 81b9          ldd  r27,y+1
00074c 81a8          ld   r26,y
00074d 9610          adiw r26,0
00074e f031          breq memset1
00074f 81fc          ldd  r31,y+4
000750 81eb          ldd  r30,y+3
000751 816a          ldd  r22,y+2
                 memset0:
000752 9361          st   z+,r22
000753 9711          sbiw r26,1
000754 f7e9          brne memset0
                 memset1:
000755 81eb          ldd  r30,y+3
000756 81fc          ldd  r31,y+4
000757 940c 0bc4 	JMP  _0x20C0004
                 _strcmp:
000759 93ba      	ST   -Y,R27
00075a 93aa      	ST   -Y,R26
00075b 91e9          ld   r30,y+
00075c 91f9          ld   r31,y+
00075d 91a9          ld   r26,y+
00075e 91b9          ld   r27,y+
                 strcmp0:
00075f 916d          ld   r22,x+
000760 9171          ld   r23,z+
000761 1767          cp   r22,r23
000762 f421          brne strcmp1
000763 2366          tst  r22
000764 f7d1          brne strcmp0
                 strcmp3:
000765 27ee          clr  r30
000766 9508          ret
                 strcmp1:
000767 1b67          sub  r22,r23
000768 f3e1          breq strcmp3
000769 e0e1          ldi  r30,1
00076a f408          brcc strcmp2
00076b 50e2          subi r30,2
                 strcmp2:
00076c 9508          ret
                 _strcpyf:
00076d 93ba      	ST   -Y,R27
00076e 93aa      	ST   -Y,R26
00076f 91e9          ld   r30,y+
000770 91f9          ld   r31,y+
000771 91a9          ld   r26,y+
000772 91b9          ld   r27,y+
000773 01cd          movw r24,r26
                 strcpyf0:
000774 9005      	lpm  r0,z+
000775 920d          st   x+,r0
000776 2000          tst  r0
000777 f7e1          brne strcpyf0
000778 01fc          movw r30,r24
000779 9508          ret
                 _strlen:
00077a 93ba      	ST   -Y,R27
00077b 93aa      	ST   -Y,R26
00077c 91a9          ld   r26,y+
00077d 91b9          ld   r27,y+
00077e 27ee          clr  r30
00077f 27ff          clr  r31
                 strlen0:
000780 916d          ld   r22,x+
000781 2366          tst  r22
000782 f011          breq strlen1
000783 9631          adiw r30,1
000784 cffb          rjmp strlen0
                 strlen1:
000785 9508          ret
                 _strlenf:
000786 93ba      	ST   -Y,R27
000787 93aa      	ST   -Y,R26
000788 27aa          clr  r26
000789 27bb          clr  r27
00078a 91e9          ld   r30,y+
00078b 91f9          ld   r31,y+
                 strlenf0:
00078c 9005      	lpm  r0,z+
00078d 2000          tst  r0
00078e f011          breq strlenf1
00078f 9611          adiw r26,1
000790 cffb          rjmp strlenf0
                 strlenf1:
000791 01fd          movw r30,r26
000792 9508          ret
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
000793 93ba      	ST   -Y,R27
000794 93aa      	ST   -Y,R26
000795 931a      	ST   -Y,R17
000796 930a      	ST   -Y,R16
000797 81aa      	LDD  R26,Y+2
000798 81bb      	LDD  R27,Y+2+1
000799 9612      	ADIW R26,2
00079a 940e 118e 	CALL __GETW1P
00079c 9730      	SBIW R30,0
00079d f129      	BREQ _0x2020010
00079e 81aa      	LDD  R26,Y+2
00079f 81bb      	LDD  R27,Y+2+1
0007a0 9614      	ADIW R26,4
0007a1 940e 118e 	CALL __GETW1P
0007a3 018f      	MOVW R16,R30
0007a4 9730      	SBIW R30,0
0007a5 f061      	BREQ _0x2020012
                +
0007a6 3002     +CPI R16 , LOW ( 2 )
0007a7 e0e0     +LDI R30 , HIGH ( 2 )
0007a8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0007a9 f0c0      	BRLO _0x2020013
0007aa 01f8      	MOVW R30,R16
0007ab 9731      	SBIW R30,1
0007ac 018f      	MOVW R16,R30
                +
0007ad 81aa     +LDD R26 , Y + 2
0007ae 81bb     +LDD R27 , Y + 2 + 1
0007af 9614     +ADIW R26 , 4
0007b0 93ed     +ST X + , R30
0007b1 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0007b2 81aa      	LDD  R26,Y+2
0007b3 81bb      	LDD  R27,Y+2+1
0007b4 9612      	ADIW R26,2
0007b5 940e 0d68 	CALL SUBOPT_0x1E
0007b7 9731      	SBIW R30,1
0007b8 81ac      	LDD  R26,Y+4
0007b9 83a0      	STD  Z+0,R26
0007ba 81aa      	LDD  R26,Y+2
0007bb 81bb      	LDD  R27,Y+2+1
0007bc 940e 118e 	CALL __GETW1P
0007be 23ff      	TST  R31
0007bf f012      	BRMI _0x2020014
0007c0 940e 0d68 	CALL SUBOPT_0x1E
                 _0x2020014:
                 _0x2020013:
0007c2 c006      	RJMP _0x2020015
                 _0x2020010:
0007c3 81aa      	LDD  R26,Y+2
0007c4 81bb      	LDD  R27,Y+2+1
0007c5 efef      	LDI  R30,LOW(65535)
0007c6 efff      	LDI  R31,HIGH(65535)
0007c7 93ed      	ST   X+,R30
0007c8 93fc      	ST   X,R31
                 _0x2020015:
0007c9 8119      	LDD  R17,Y+1
0007ca 8108      	LDD  R16,Y+0
0007cb c3f8      	RJMP _0x20C0004
                 __ftoe_G101:
0007cc 940e 0d6e 	CALL SUBOPT_0x1F
0007ce e8e0      	LDI  R30,LOW(128)
0007cf 83ea      	STD  Y+2,R30
0007d0 e3ef      	LDI  R30,LOW(63)
0007d1 83eb      	STD  Y+3,R30
0007d2 940e 11ed 	CALL __SAVELOCR4
0007d4 85ee      	LDD  R30,Y+14
0007d5 85ff      	LDD  R31,Y+14+1
0007d6 3fef      	CPI  R30,LOW(0xFFFF)
0007d7 efaf      	LDI  R26,HIGH(0xFFFF)
0007d8 07fa      	CPC  R31,R26
0007d9 f449      	BRNE _0x2020019
0007da 85e8      	LDD  R30,Y+8
0007db 85f9      	LDD  R31,Y+8+1
0007dc 93fa      	ST   -Y,R31
0007dd 93ea      	ST   -Y,R30
                +
0007de e8ac     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
0007df e0b2     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
0007e0 940e 076d 	CALL _strcpyf
0007e2 c0b8      	RJMP _0x20C0008
                 _0x2020019:
0007e3 3fef      	CPI  R30,LOW(0x7FFF)
0007e4 e7af      	LDI  R26,HIGH(0x7FFF)
0007e5 07fa      	CPC  R31,R26
0007e6 f449      	BRNE _0x2020018
0007e7 85e8      	LDD  R30,Y+8
0007e8 85f9      	LDD  R31,Y+8+1
0007e9 93fa      	ST   -Y,R31
0007ea 93ea      	ST   -Y,R30
                +
0007eb e8ad     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
0007ec e0b2     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
0007ed 940e 076d 	CALL _strcpyf
0007ef c0ab      	RJMP _0x20C0008
                 _0x2020018:
0007f0 85ab      	LDD  R26,Y+11
0007f1 30a7      	CPI  R26,LOW(0x7)
0007f2 f010      	BRLO _0x202001B
0007f3 e0e6      	LDI  R30,LOW(6)
0007f4 87eb      	STD  Y+11,R30
                 _0x202001B:
0007f5 851b      	LDD  R17,Y+11
                 _0x202001C:
0007f6 2fe1      	MOV  R30,R17
0007f7 5011      	SUBI R17,1
0007f8 30e0      	CPI  R30,0
0007f9 f019      	BREQ _0x202001E
0007fa 940e 0d75 	CALL SUBOPT_0x20
0007fc cff9      	RJMP _0x202001C
                 _0x202001E:
                +
0007fd 85ec     +LDD R30 , Y + 12
0007fe 85fd     +LDD R31 , Y + 12 + 1
0007ff 856e     +LDD R22 , Y + 12 + 2
000800 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
000801 940e 11e7 	CALL __CPD10
000803 f421      	BRNE _0x202001F
000804 e030      	LDI  R19,LOW(0)
000805 940e 0d75 	CALL SUBOPT_0x20
000807 c02e      	RJMP _0x2020020
                 _0x202001F:
000808 853b      	LDD  R19,Y+11
000809 940e 0d84 	CALL SUBOPT_0x21
00080b f009      	BREQ PC+2
00080c f410      	BRCC PC+3
00080d 940c 081a 	JMP  _0x2020021
00080f 940e 0d75 	CALL SUBOPT_0x20
                 _0x2020022:
000811 940e 0d84 	CALL SUBOPT_0x21
000813 f028      	BRLO _0x2020024
000814 940e 0d8f 	CALL SUBOPT_0x22
000816 940e 0d94 	CALL SUBOPT_0x23
000818 cff8      	RJMP _0x2020022
                 _0x2020024:
000819 c00d      	RJMP _0x2020025
                 _0x2020021:
                 _0x2020026:
00081a 940e 0d84 	CALL SUBOPT_0x21
00081c f440      	BRSH _0x2020028
00081d 940e 0d8f 	CALL SUBOPT_0x22
00081f 940e 0da0 	CALL SUBOPT_0x24
000821 940e 0da7 	CALL SUBOPT_0x25
000823 5031      	SUBI R19,LOW(1)
000824 cff5      	RJMP _0x2020026
                 _0x2020028:
000825 940e 0d75 	CALL SUBOPT_0x20
                 _0x2020025:
                +
000827 85ec     +LDD R30 , Y + 12
000828 85fd     +LDD R31 , Y + 12 + 1
000829 856e     +LDD R22 , Y + 12 + 2
00082a 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
00082b 940e 0dac 	CALL SUBOPT_0x26
00082d 940e 0da7 	CALL SUBOPT_0x25
00082f 940e 0d84 	CALL SUBOPT_0x21
000831 f020      	BRLO _0x2020029
000832 940e 0d8f 	CALL SUBOPT_0x22
000834 940e 0d94 	CALL SUBOPT_0x23
                 _0x2020029:
                 _0x2020020:
000836 e010      	LDI  R17,LOW(0)
                 _0x202002A:
000837 85eb      	LDD  R30,Y+11
000838 17e1      	CP   R30,R17
000839 f1a8      	BRLO _0x202002C
                +
00083a 81ac     +LDD R26 , Y + 4
00083b 81bd     +LDD R27 , Y + 4 + 1
00083c 818e     +LDD R24 , Y + 4 + 2
00083d 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00083e 940e 0db3 	CALL SUBOPT_0x27
000840 940e 0dac 	CALL SUBOPT_0x26
000842 01df      	MOVW R26,R30
000843 01cb      	MOVW R24,R22
000844 940e 0bf7 	CALL _floor
                +
000846 83ec     +STD Y + 4 , R30
000847 83fd     +STD Y + 4 + 1 , R31
000848 836e     +STD Y + 4 + 2 , R22
000849 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
00084a 940e 0d8f 	CALL SUBOPT_0x22
00084c 940e 108f 	CALL __DIVF21
00084e 940e 0f7e 	CALL __CFD1U
000850 2f0e      	MOV  R16,R30
000851 940e 0dba 	CALL SUBOPT_0x28
000853 940e 0dc1 	CALL SUBOPT_0x29
000855 27ff      	CLR  R31
000856 2766      	CLR  R22
000857 2777      	CLR  R23
000858 940e 0fb7 	CALL __CDF1
                +
00085a 81ac     +LDD R26 , Y + 4
00085b 81bd     +LDD R27 , Y + 4 + 1
00085c 818e     +LDD R24 , Y + 4 + 2
00085d 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00085e 940e 1041 	CALL __MULF12
000860 940e 0d8f 	CALL SUBOPT_0x22
000862 940e 0dc6 	CALL SUBOPT_0x2A
000864 940e 0da7 	CALL SUBOPT_0x25
000866 2fe1      	MOV  R30,R17
000867 5f1f      	SUBI R17,-1
000868 30e0      	CPI  R30,0
000869 f669      	BRNE _0x202002A
00086a 940e 0dba 	CALL SUBOPT_0x28
00086c e2ee      	LDI  R30,LOW(46)
00086d 93ec      	ST   X,R30
00086e cfc8      	RJMP _0x202002A
                 _0x202002C:
00086f 940e 0dcb 	CALL SUBOPT_0x2B
000871 9731      	SBIW R30,1
000872 85aa      	LDD  R26,Y+10
000873 83a0      	STD  Z+0,R26
000874 3030      	CPI  R19,0
000875 f42c      	BRGE _0x202002E
000876 9531      	NEG  R19
000877 85a8      	LDD  R26,Y+8
000878 85b9      	LDD  R27,Y+8+1
000879 e2ed      	LDI  R30,LOW(45)
00087a c003      	RJMP _0x202010E
                 _0x202002E:
00087b 85a8      	LDD  R26,Y+8
00087c 85b9      	LDD  R27,Y+8+1
00087d e2eb      	LDI  R30,LOW(43)
                 _0x202010E:
00087e 93ec      	ST   X,R30
00087f 940e 0dcb 	CALL SUBOPT_0x2B
000881 940e 0dcb 	CALL SUBOPT_0x2B
000883 9731      	SBIW R30,1
000884 01bf      	MOVW R22,R30
000885 2fa3      	MOV  R26,R19
000886 e0ea      	LDI  R30,LOW(10)
000887 940e 1127 	CALL __DIVB21
000889 5de0      	SUBI R30,-LOW(48)
00088a 01db      	MOVW R26,R22
00088b 93ec      	ST   X,R30
00088c 940e 0dcb 	CALL SUBOPT_0x2B
00088e 9731      	SBIW R30,1
00088f 01bf      	MOVW R22,R30
000890 2fa3      	MOV  R26,R19
000891 e0ea      	LDI  R30,LOW(10)
000892 940e 1164 	CALL __MODB21
000894 5de0      	SUBI R30,-LOW(48)
000895 01db      	MOVW R26,R22
000896 93ec      	ST   X,R30
000897 85a8      	LDD  R26,Y+8
000898 85b9      	LDD  R27,Y+8+1
000899 e0e0      	LDI  R30,LOW(0)
00089a 93ec      	ST   X,R30
                 _0x20C0008:
00089b 940e 11f4 	CALL __LOADLOCR4
00089d 9660      	ADIW R28,16
00089e 9508      	RET
                 __print_G101:
00089f 93ba      	ST   -Y,R27
0008a0 93aa      	ST   -Y,R26
0008a1 97ef      	SBIW R28,63
0008a2 9761      	SBIW R28,17
0008a3 940e 11eb 	CALL __SAVELOCR6
0008a5 e010      	LDI  R17,0
                +
0008a6 01fe     +MOVW R30 , R28
0008a7 5ae8     +SUBI R30 , LOW ( - 88 )
0008a8 4fff     +SBCI R31 , HIGH ( - 88 )
0008a9 9001     +LD R0 , Z +
0008aa 81f0     +LD R31 , Z
0008ab 2de0     +MOV R30 , R0
                 	__GETW1SX 88
0008ac 87e8      	STD  Y+8,R30
0008ad 87f9      	STD  Y+8+1,R31
                +
0008ae 01fe     +MOVW R30 , R28
0008af 5aea     +SUBI R30 , LOW ( - 86 )
0008b0 4fff     +SBCI R31 , HIGH ( - 86 )
0008b1 9001     +LD R0 , Z +
0008b2 81f0     +LD R31 , Z
0008b3 2de0     +MOV R30 , R0
                 	__GETW1SX 86
0008b4 83ee      	STD  Y+6,R30
0008b5 83ff      	STD  Y+6+1,R31
0008b6 81ae      	LDD  R26,Y+6
0008b7 81bf      	LDD  R27,Y+6+1
0008b8 e0e0      	LDI  R30,LOW(0)
0008b9 e0f0      	LDI  R31,HIGH(0)
0008ba 93ed      	ST   X+,R30
0008bb 93fc      	ST   X,R31
                 _0x2020030:
0008bc 01de      	MOVW R26,R28
0008bd 5aa4      	SUBI R26,LOW(-(92))
0008be 4fbf      	SBCI R27,HIGH(-(92))
0008bf 940e 0d68 	CALL SUBOPT_0x1E
0008c1 9731      	SBIW R30,1
0008c2 91e4      	LPM  R30,Z
0008c3 2f2e      	MOV  R18,R30
0008c4 30e0      	CPI  R30,0
0008c5 f411      	BRNE PC+3
0008c6 940c 0ab2 	JMP _0x2020032
0008c8 2fe1      	MOV  R30,R17
0008c9 30e0      	CPI  R30,0
0008ca f439      	BRNE _0x2020036
0008cb 3225      	CPI  R18,37
0008cc f411      	BRNE _0x2020037
0008cd e011      	LDI  R17,LOW(1)
0008ce c002      	RJMP _0x2020038
                 _0x2020037:
0008cf 940e 0dd1 	CALL SUBOPT_0x2C
                 _0x2020038:
0008d1 c1df      	RJMP _0x2020035
                 _0x2020036:
0008d2 30e1      	CPI  R30,LOW(0x1)
0008d3 f4c1      	BRNE _0x2020039
0008d4 3225      	CPI  R18,37
0008d5 f419      	BRNE _0x202003A
0008d6 940e 0dd1 	CALL SUBOPT_0x2C
0008d8 c1d7      	RJMP _0x202010F
                 _0x202003A:
0008d9 e012      	LDI  R17,LOW(2)
0008da e0e0      	LDI  R30,LOW(0)
0008db 8bed      	STD  Y+21,R30
0008dc e000      	LDI  R16,LOW(0)
0008dd 322d      	CPI  R18,45
0008de f411      	BRNE _0x202003B
0008df e001      	LDI  R16,LOW(1)
0008e0 c1d0      	RJMP _0x2020035
                 _0x202003B:
0008e1 322b      	CPI  R18,43
0008e2 f419      	BRNE _0x202003C
0008e3 e2eb      	LDI  R30,LOW(43)
0008e4 8bed      	STD  Y+21,R30
0008e5 c1cb      	RJMP _0x2020035
                 _0x202003C:
0008e6 3220      	CPI  R18,32
0008e7 f419      	BRNE _0x202003D
0008e8 e2e0      	LDI  R30,LOW(32)
0008e9 8bed      	STD  Y+21,R30
0008ea c1c6      	RJMP _0x2020035
                 _0x202003D:
0008eb c002      	RJMP _0x202003E
                 _0x2020039:
0008ec 30e2      	CPI  R30,LOW(0x2)
0008ed f439      	BRNE _0x202003F
                 _0x202003E:
0008ee e050      	LDI  R21,LOW(0)
0008ef e013      	LDI  R17,LOW(3)
0008f0 3320      	CPI  R18,48
0008f1 f411      	BRNE _0x2020040
0008f2 6800      	ORI  R16,LOW(128)
0008f3 c1bd      	RJMP _0x2020035
                 _0x2020040:
0008f4 c002      	RJMP _0x2020041
                 _0x202003F:
0008f5 30e3      	CPI  R30,LOW(0x3)
0008f6 f491      	BRNE _0x2020042
                 _0x2020041:
0008f7 3320      	CPI  R18,48
0008f8 f010      	BRLO _0x2020044
0008f9 332a      	CPI  R18,58
0008fa f008      	BRLO _0x2020045
                 _0x2020044:
0008fb c007      	RJMP _0x2020043
                 _0x2020045:
0008fc e0aa      	LDI  R26,LOW(10)
0008fd 9f5a      	MUL  R21,R26
0008fe 2d50      	MOV  R21,R0
0008ff 2fe2      	MOV  R30,R18
000900 53e0      	SUBI R30,LOW(48)
000901 0f5e      	ADD  R21,R30
000902 c1ae      	RJMP _0x2020035
                 _0x2020043:
000903 e040      	LDI  R20,LOW(0)
000904 322e      	CPI  R18,46
000905 f411      	BRNE _0x2020046
000906 e014      	LDI  R17,LOW(4)
000907 c1a9      	RJMP _0x2020035
                 _0x2020046:
000908 c00f      	RJMP _0x2020047
                 _0x2020042:
000909 30e4      	CPI  R30,LOW(0x4)
00090a f499      	BRNE _0x2020049
00090b 3320      	CPI  R18,48
00090c f010      	BRLO _0x202004B
00090d 332a      	CPI  R18,58
00090e f008      	BRLO _0x202004C
                 _0x202004B:
00090f c008      	RJMP _0x202004A
                 _0x202004C:
000910 6200      	ORI  R16,LOW(32)
000911 e0aa      	LDI  R26,LOW(10)
000912 9f4a      	MUL  R20,R26
000913 2d40      	MOV  R20,R0
000914 2fe2      	MOV  R30,R18
000915 53e0      	SUBI R30,LOW(48)
000916 0f4e      	ADD  R20,R30
000917 c199      	RJMP _0x2020035
                 _0x202004A:
                 _0x2020047:
000918 362c      	CPI  R18,108
000919 f419      	BRNE _0x202004D
00091a 6002      	ORI  R16,LOW(2)
00091b e015      	LDI  R17,LOW(5)
00091c c194      	RJMP _0x2020035
                 _0x202004D:
00091d c004      	RJMP _0x202004E
                 _0x2020049:
00091e 30e5      	CPI  R30,LOW(0x5)
00091f f011      	BREQ PC+3
000920 940c 0ab1 	JMP _0x2020035
                 _0x202004E:
000922 2fe2      	MOV  R30,R18
000923 36e3      	CPI  R30,LOW(0x63)
000924 f459      	BRNE _0x2020053
000925 940e 0dd8 	CALL SUBOPT_0x2D
000927 940e 0ddf 	CALL SUBOPT_0x2E
000929 940e 0dd8 	CALL SUBOPT_0x2D
00092b 81a4      	LDD  R26,Z+4
00092c 93aa      	ST   -Y,R26
00092d 940e 0de6 	CALL SUBOPT_0x2F
00092f c180      	RJMP _0x2020054
                 _0x2020053:
000930 34e5      	CPI  R30,LOW(0x45)
000931 f011      	BREQ _0x2020057
000932 36e5      	CPI  R30,LOW(0x65)
000933 f409      	BRNE _0x2020058
                 _0x2020057:
000934 c004      	RJMP _0x2020059
                 _0x2020058:
000935 36e6      	CPI  R30,LOW(0x66)
000936 f011      	BREQ PC+3
000937 940c 097f 	JMP _0x202005A
                 _0x2020059:
000939 01fe      	MOVW R30,R28
00093a 9676      	ADIW R30,22
00093b 87ee      	STD  Y+14,R30
00093c 87ff      	STD  Y+14+1,R31
00093d 940e 0dec 	CALL SUBOPT_0x30
00093f 940e 1192 	CALL __GETD1P
000941 940e 0df3 	CALL SUBOPT_0x31
000943 940e 0df8 	CALL SUBOPT_0x32
000945 85ad      	LDD  R26,Y+13
000946 23aa      	TST  R26
000947 f022      	BRMI _0x202005B
000948 89ad      	LDD  R26,Y+21
000949 32ab      	CPI  R26,LOW(0x2B)
00094a f049      	BREQ _0x202005D
00094b c017      	RJMP _0x202005E
                 _0x202005B:
00094c 940e 0dfa 	CALL SUBOPT_0x33
00094e 940e 0f4b 	CALL __ANEGF1
000950 940e 0df3 	CALL SUBOPT_0x31
000952 e2ed      	LDI  R30,LOW(45)
000953 8bed      	STD  Y+21,R30
                 _0x202005D:
000954 ff07      	SBRS R16,7
000955 c005      	RJMP _0x202005F
000956 89ed      	LDD  R30,Y+21
000957 93ea      	ST   -Y,R30
000958 940e 0de6 	CALL SUBOPT_0x2F
00095a c008      	RJMP _0x2020060
                 _0x202005F:
00095b 85ee      	LDD  R30,Y+14
00095c 85ff      	LDD  R31,Y+14+1
00095d 9631      	ADIW R30,1
00095e 87ee      	STD  Y+14,R30
00095f 87ff      	STD  Y+14+1,R31
000960 9731      	SBIW R30,1
000961 89ad      	LDD  R26,Y+21
000962 83a0      	STD  Z+0,R26
                 _0x2020060:
                 _0x202005E:
000963 ff05      	SBRS R16,5
000964 e046      	LDI  R20,LOW(6)
000965 3626      	CPI  R18,102
000966 f451      	BRNE _0x2020062
000967 940e 0dfa 	CALL SUBOPT_0x33
000969 940e 11b3 	CALL __PUTPARD1
00096b 934a      	ST   -Y,R20
00096c 89ab      	LDD  R26,Y+19
00096d 89bc      	LDD  R27,Y+19+1
00096e 940e 0c0e 	CALL _ftoa
000970 c009      	RJMP _0x2020063
                 _0x2020062:
000971 940e 0dfa 	CALL SUBOPT_0x33
000973 940e 11b3 	CALL __PUTPARD1
000975 934a      	ST   -Y,R20
000976 932a      	ST   -Y,R18
000977 89ac      	LDD  R26,Y+20
000978 89bd      	LDD  R27,Y+20+1
000979 de52      	RCALL __ftoe_G101
                 _0x2020063:
00097a 01fe      	MOVW R30,R28
00097b 9676      	ADIW R30,22
00097c 940e 0dff 	CALL SUBOPT_0x34
00097e c01e      	RJMP _0x2020064
                 _0x202005A:
00097f 37e3      	CPI  R30,LOW(0x73)
000980 f439      	BRNE _0x2020066
000981 940e 0df8 	CALL SUBOPT_0x32
000983 940e 0e07 	CALL SUBOPT_0x35
000985 940e 0dff 	CALL SUBOPT_0x34
000987 c00e      	RJMP _0x2020067
                 _0x2020066:
000988 37e0      	CPI  R30,LOW(0x70)
000989 f4c1      	BRNE _0x2020069
00098a 940e 0df8 	CALL SUBOPT_0x32
00098c 940e 0e07 	CALL SUBOPT_0x35
00098e 87ee      	STD  Y+14,R30
00098f 87ff      	STD  Y+14+1,R31
000990 85ae      	LDD  R26,Y+14
000991 85bf      	LDD  R27,Y+14+1
000992 940e 0786 	CALL _strlenf
000994 2f1e      	MOV  R17,R30
000995 6008      	ORI  R16,LOW(8)
                 _0x2020067:
000996 770f      	ANDI R16,LOW(127)
000997 3040      	CPI  R20,0
000998 f011      	BREQ _0x202006B
000999 1741      	CP   R20,R17
00099a f008      	BRLO _0x202006C
                 _0x202006B:
00099b c001      	RJMP _0x202006A
                 _0x202006C:
00099c 2f14      	MOV  R17,R20
                 _0x202006A:
                 _0x2020064:
00099d e040      	LDI  R20,LOW(0)
00099e e0e0      	LDI  R30,LOW(0)
00099f 8bec      	STD  Y+20,R30
0009a0 e030      	LDI  R19,LOW(0)
0009a1 c06e      	RJMP _0x202006D
                 _0x2020069:
0009a2 36e4      	CPI  R30,LOW(0x64)
0009a3 f011      	BREQ _0x2020070
0009a4 36e9      	CPI  R30,LOW(0x69)
0009a5 f411      	BRNE _0x2020071
                 _0x2020070:
0009a6 6004      	ORI  R16,LOW(4)
0009a7 c002      	RJMP _0x2020072
                 _0x2020071:
0009a8 37e5      	CPI  R30,LOW(0x75)
0009a9 f4a1      	BRNE _0x2020073
                 _0x2020072:
0009aa e0ea      	LDI  R30,LOW(10)
0009ab 8bec      	STD  Y+20,R30
0009ac ff01      	SBRS R16,1
0009ad c008      	RJMP _0x2020074
                +
0009ae e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
0009af ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
0009b0 e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
0009b1 e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
0009b2 940e 0e0c 	CALL SUBOPT_0x36
0009b4 e01a      	LDI  R17,LOW(10)
0009b5 c023      	RJMP _0x2020075
                 _0x2020074:
                +
0009b6 e1e0     +LDI R30 , LOW ( 0x2710 )
0009b7 e2f7     +LDI R31 , HIGH ( 0x2710 )
0009b8 e060     +LDI R22 , BYTE3 ( 0x2710 )
0009b9 e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
0009ba 940e 0e0c 	CALL SUBOPT_0x36
0009bc e015      	LDI  R17,LOW(5)
0009bd c01b      	RJMP _0x2020075
                 _0x2020073:
0009be 35e8      	CPI  R30,LOW(0x58)
0009bf f411      	BRNE _0x2020077
0009c0 6008      	ORI  R16,LOW(8)
0009c1 c004      	RJMP _0x2020078
                 _0x2020077:
0009c2 37e8      	CPI  R30,LOW(0x78)
0009c3 f011      	BREQ PC+3
0009c4 940c 0ab0 	JMP _0x20200B6
                 _0x2020078:
0009c6 e1e0      	LDI  R30,LOW(16)
0009c7 8bec      	STD  Y+20,R30
0009c8 ff01      	SBRS R16,1
0009c9 c008      	RJMP _0x202007A
                +
0009ca e0e0     +LDI R30 , LOW ( 0x10000000 )
0009cb e0f0     +LDI R31 , HIGH ( 0x10000000 )
0009cc e060     +LDI R22 , BYTE3 ( 0x10000000 )
0009cd e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
0009ce 940e 0e0c 	CALL SUBOPT_0x36
0009d0 e018      	LDI  R17,LOW(8)
0009d1 c007      	RJMP _0x2020075
                 _0x202007A:
                +
0009d2 e0e0     +LDI R30 , LOW ( 0x1000 )
0009d3 e1f0     +LDI R31 , HIGH ( 0x1000 )
0009d4 e060     +LDI R22 , BYTE3 ( 0x1000 )
0009d5 e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
0009d6 940e 0e0c 	CALL SUBOPT_0x36
0009d8 e014      	LDI  R17,LOW(4)
                 _0x2020075:
0009d9 3040      	CPI  R20,0
0009da f011      	BREQ _0x202007B
0009db 770f      	ANDI R16,LOW(127)
0009dc c001      	RJMP _0x202007C
                 _0x202007B:
0009dd e041      	LDI  R20,LOW(1)
                 _0x202007C:
0009de ff01      	SBRS R16,1
0009df c008      	RJMP _0x202007D
0009e0 940e 0df8 	CALL SUBOPT_0x32
0009e2 940e 0dec 	CALL SUBOPT_0x30
0009e4 9614      	ADIW R26,4
0009e5 940e 1192 	CALL __GETD1P
0009e7 c00f      	RJMP _0x2020110
                 _0x202007D:
0009e8 ff02      	SBRS R16,2
0009e9 c007      	RJMP _0x202007F
0009ea 940e 0df8 	CALL SUBOPT_0x32
0009ec 940e 0e07 	CALL SUBOPT_0x35
0009ee 940e 110f 	CALL __CWD1
0009f0 c006      	RJMP _0x2020110
                 _0x202007F:
0009f1 940e 0df8 	CALL SUBOPT_0x32
0009f3 940e 0e07 	CALL SUBOPT_0x35
0009f5 2766      	CLR  R22
0009f6 2777      	CLR  R23
                 _0x2020110:
                +
0009f7 87ea     +STD Y + 10 , R30
0009f8 87fb     +STD Y + 10 + 1 , R31
0009f9 876c     +STD Y + 10 + 2 , R22
0009fa 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
0009fb ff02      	SBRS R16,2
0009fc c012      	RJMP _0x2020081
0009fd 85ad      	LDD  R26,Y+13
0009fe 23aa      	TST  R26
0009ff f442      	BRPL _0x2020082
000a00 940e 0dfa 	CALL SUBOPT_0x33
000a02 940e 10fc 	CALL __ANEGD1
000a04 940e 0df3 	CALL SUBOPT_0x31
000a06 e2ed      	LDI  R30,LOW(45)
000a07 8bed      	STD  Y+21,R30
                 _0x2020082:
000a08 89ed      	LDD  R30,Y+21
000a09 30e0      	CPI  R30,0
000a0a f019      	BREQ _0x2020083
000a0b 5f1f      	SUBI R17,-LOW(1)
000a0c 5f4f      	SUBI R20,-LOW(1)
000a0d c001      	RJMP _0x2020084
                 _0x2020083:
000a0e 7f0b      	ANDI R16,LOW(251)
                 _0x2020084:
                 _0x2020081:
000a0f 2f34      	MOV  R19,R20
                 _0x202006D:
000a10 fd00      	SBRC R16,0
000a11 c014      	RJMP _0x2020085
                 _0x2020086:
000a12 1715      	CP   R17,R21
000a13 f410      	BRSH _0x2020089
000a14 1735      	CP   R19,R21
000a15 f008      	BRLO _0x202008A
                 _0x2020089:
000a16 c00f      	RJMP _0x2020088
                 _0x202008A:
000a17 ff07      	SBRS R16,7
000a18 c008      	RJMP _0x202008B
000a19 ff02      	SBRS R16,2
000a1a c004      	RJMP _0x202008C
000a1b 7f0b      	ANDI R16,LOW(251)
000a1c 892d      	LDD  R18,Y+21
000a1d 5011      	SUBI R17,LOW(1)
000a1e c001      	RJMP _0x202008D
                 _0x202008C:
000a1f e320      	LDI  R18,LOW(48)
                 _0x202008D:
000a20 c001      	RJMP _0x202008E
                 _0x202008B:
000a21 e220      	LDI  R18,LOW(32)
                 _0x202008E:
000a22 940e 0dd1 	CALL SUBOPT_0x2C
000a24 5051      	SUBI R21,LOW(1)
000a25 cfec      	RJMP _0x2020086
                 _0x2020088:
                 _0x2020085:
                 _0x202008F:
000a26 1714      	CP   R17,R20
000a27 f490      	BRSH _0x2020091
000a28 6100      	ORI  R16,LOW(16)
000a29 ff02      	SBRS R16,2
000a2a c006      	RJMP _0x2020092
000a2b 940e 0e11 	CALL SUBOPT_0x37
000a2d f009      	BREQ _0x2020093
000a2e 5051      	SUBI R21,LOW(1)
                 _0x2020093:
000a2f 5011      	SUBI R17,LOW(1)
000a30 5041      	SUBI R20,LOW(1)
                 _0x2020092:
000a31 e3e0      	LDI  R30,LOW(48)
000a32 93ea      	ST   -Y,R30
000a33 940e 0de6 	CALL SUBOPT_0x2F
000a35 3050      	CPI  R21,0
000a36 f009      	BREQ _0x2020094
000a37 5051      	SUBI R21,LOW(1)
                 _0x2020094:
000a38 5041      	SUBI R20,LOW(1)
000a39 cfec      	RJMP _0x202008F
                 _0x2020091:
000a3a 2f31      	MOV  R19,R17
000a3b 89ec      	LDD  R30,Y+20
000a3c 30e0      	CPI  R30,0
000a3d f4b9      	BRNE _0x2020095
                 _0x2020096:
000a3e 3030      	CPI  R19,0
000a3f f0a1      	BREQ _0x2020098
000a40 ff03      	SBRS R16,3
000a41 c006      	RJMP _0x2020099
000a42 85ee      	LDD  R30,Y+14
000a43 85ff      	LDD  R31,Y+14+1
000a44 9125      	LPM  R18,Z+
000a45 87ee      	STD  Y+14,R30
000a46 87ff      	STD  Y+14+1,R31
000a47 c005      	RJMP _0x202009A
                 _0x2020099:
000a48 85ae      	LDD  R26,Y+14
000a49 85bf      	LDD  R27,Y+14+1
000a4a 912d      	LD   R18,X+
000a4b 87ae      	STD  Y+14,R26
000a4c 87bf      	STD  Y+14+1,R27
                 _0x202009A:
000a4d 940e 0dd1 	CALL SUBOPT_0x2C
000a4f 3050      	CPI  R21,0
000a50 f009      	BREQ _0x202009B
000a51 5051      	SUBI R21,LOW(1)
                 _0x202009B:
000a52 5031      	SUBI R19,LOW(1)
000a53 cfea      	RJMP _0x2020096
                 _0x2020098:
000a54 c051      	RJMP _0x202009C
                 _0x2020095:
                 _0x202009E:
000a55 940e 0e23 	CALL SUBOPT_0x38
000a57 940e 113f 	CALL __DIVD21U
000a59 2f2e      	MOV  R18,R30
000a5a 302a      	CPI  R18,10
000a5b f030      	BRLO _0x20200A0
000a5c ff03      	SBRS R16,3
000a5d c002      	RJMP _0x20200A1
000a5e 5c29      	SUBI R18,-LOW(55)
000a5f c001      	RJMP _0x20200A2
                 _0x20200A1:
000a60 5a29      	SUBI R18,-LOW(87)
                 _0x20200A2:
000a61 c001      	RJMP _0x20200A3
                 _0x20200A0:
000a62 5d20      	SUBI R18,-LOW(48)
                 _0x20200A3:
000a63 fd04      	SBRC R16,4
000a64 c021      	RJMP _0x20200A5
000a65 3321      	CPI  R18,49
000a66 f460      	BRSH _0x20200A7
                +
000a67 89a8     +LDD R26 , Y + 16
000a68 89b9     +LDD R27 , Y + 16 + 1
000a69 898a     +LDD R24 , Y + 16 + 2
000a6a 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
000a6b 30a1     +CPI R26 , LOW ( 0x1 )
000a6c e0e0     +LDI R30 , HIGH ( 0x1 )
000a6d 07be     +CPC R27 , R30
000a6e e0e0     +LDI R30 , BYTE3 ( 0x1 )
000a6f 078e     +CPC R24 , R30
000a70 e0e0     +LDI R30 , BYTE4 ( 0x1 )
000a71 079e     +CPC R25 , R30
                 	__CPD2N 0x1
000a72 f409      	BRNE _0x20200A6
                 _0x20200A7:
000a73 c00b      	RJMP _0x20200A9
                 _0x20200A6:
000a74 1743      	CP   R20,R19
000a75 f440      	BRSH _0x2020111
000a76 1753      	CP   R21,R19
000a77 f010      	BRLO _0x20200AC
000a78 ff00      	SBRS R16,0
000a79 c001      	RJMP _0x20200AD
                 _0x20200AC:
000a7a c010      	RJMP _0x20200AB
                 _0x20200AD:
000a7b e220      	LDI  R18,LOW(32)
000a7c ff07      	SBRS R16,7
000a7d c008      	RJMP _0x20200AE
                 _0x2020111:
000a7e e320      	LDI  R18,LOW(48)
                 _0x20200A9:
000a7f 6100      	ORI  R16,LOW(16)
000a80 ff02      	SBRS R16,2
000a81 c004      	RJMP _0x20200AF
000a82 940e 0e11 	CALL SUBOPT_0x37
000a84 f009      	BREQ _0x20200B0
000a85 5051      	SUBI R21,LOW(1)
                 _0x20200B0:
                 _0x20200AF:
                 _0x20200AE:
                 _0x20200A5:
000a86 940e 0dd1 	CALL SUBOPT_0x2C
000a88 3050      	CPI  R21,0
000a89 f009      	BREQ _0x20200B1
000a8a 5051      	SUBI R21,LOW(1)
                 _0x20200B1:
                 _0x20200AB:
000a8b 5031      	SUBI R19,LOW(1)
000a8c 940e 0e23 	CALL SUBOPT_0x38
000a8e 940e 117e 	CALL __MODD21U
000a90 940e 0df3 	CALL SUBOPT_0x31
000a92 89ec      	LDD  R30,Y+20
                +
000a93 89a8     +LDD R26 , Y + 16
000a94 89b9     +LDD R27 , Y + 16 + 1
000a95 898a     +LDD R24 , Y + 16 + 2
000a96 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
000a97 27ff      	CLR  R31
000a98 2766      	CLR  R22
000a99 2777      	CLR  R23
000a9a 940e 113f 	CALL __DIVD21U
000a9c 940e 0e0c 	CALL SUBOPT_0x36
                +
000a9e 89e8     +LDD R30 , Y + 16
000a9f 89f9     +LDD R31 , Y + 16 + 1
000aa0 896a     +LDD R22 , Y + 16 + 2
000aa1 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
000aa2 940e 11e7 	CALL __CPD10
000aa4 f009      	BREQ _0x202009F
000aa5 cfaf      	RJMP _0x202009E
                 _0x202009F:
                 _0x202009C:
000aa6 ff00      	SBRS R16,0
000aa7 c008      	RJMP _0x20200B2
                 _0x20200B3:
000aa8 3050      	CPI  R21,0
000aa9 f031      	BREQ _0x20200B5
000aaa 5051      	SUBI R21,LOW(1)
000aab e2e0      	LDI  R30,LOW(32)
000aac 93ea      	ST   -Y,R30
000aad 940e 0de6 	CALL SUBOPT_0x2F
000aaf cff8      	RJMP _0x20200B3
                 _0x20200B5:
                 _0x20200B2:
                 _0x20200B6:
                 _0x2020054:
                 _0x202010F:
000ab0 e010      	LDI  R17,LOW(0)
                 _0x2020035:
000ab1 ce0a      	RJMP _0x2020030
                 _0x2020032:
000ab2 81ae      	LDD  R26,Y+6
000ab3 81bf      	LDD  R27,Y+6+1
000ab4 940e 118e 	CALL __GETW1P
000ab6 940e 11f2 	CALL __LOADLOCR6
000ab8 96ef      	ADIW R28,63
000ab9 966f      	ADIW R28,31
000aba 9508      	RET
                 _sprintf:
000abb 92ff      	PUSH R15
000abc 2ef8      	MOV  R15,R24
000abd 9726      	SBIW R28,6
000abe 940e 11ed 	CALL __SAVELOCR4
000ac0 940e 0e2c 	CALL SUBOPT_0x39
000ac2 9730      	SBIW R30,0
000ac3 f419      	BRNE _0x20200B7
000ac4 efef      	LDI  R30,LOW(65535)
000ac5 efff      	LDI  R31,HIGH(65535)
000ac6 c023      	RJMP _0x20C0007
                 _0x20200B7:
000ac7 01de      	MOVW R26,R28
000ac8 9616      	ADIW R26,6
000ac9 940e 10f4 	CALL __ADDW2R15
000acb 018d      	MOVW R16,R26
000acc 940e 0e2c 	CALL SUBOPT_0x39
000ace 83ee      	STD  Y+6,R30
000acf 83ff      	STD  Y+6+1,R31
000ad0 e0e0      	LDI  R30,LOW(0)
000ad1 87e8      	STD  Y+8,R30
000ad2 87e9      	STD  Y+8+1,R30
000ad3 01de      	MOVW R26,R28
000ad4 961a      	ADIW R26,10
000ad5 940e 10f4 	CALL __ADDW2R15
000ad7 940e 118e 	CALL __GETW1P
000ad9 93fa      	ST   -Y,R31
000ada 93ea      	ST   -Y,R30
000adb 931a      	ST   -Y,R17
000adc 930a      	ST   -Y,R16
000add e9e3      	LDI  R30,LOW(_put_buff_G101)
000ade e0f7      	LDI  R31,HIGH(_put_buff_G101)
000adf 93fa      	ST   -Y,R31
000ae0 93ea      	ST   -Y,R30
000ae1 01de      	MOVW R26,R28
000ae2 961a      	ADIW R26,10
000ae3 ddbb      	RCALL __print_G101
000ae4 019f      	MOVW R18,R30
000ae5 81ae      	LDD  R26,Y+6
000ae6 81bf      	LDD  R27,Y+6+1
000ae7 e0e0      	LDI  R30,LOW(0)
000ae8 93ec      	ST   X,R30
000ae9 01f9      	MOVW R30,R18
                 _0x20C0007:
000aea 940e 11f4 	CALL __LOADLOCR4
000aec 962a      	ADIW R28,10
000aed 90ff      	POP  R15
000aee 9508      	RET
                 
                 	.CSEG
                 _ds18b20_select:
000aef 93ba      	ST   -Y,R27
000af0 93aa      	ST   -Y,R26
000af1 931a      	ST   -Y,R17
000af2 940e 0e76 	CALL _w1_init
000af4 30e0      	CPI  R30,0
000af5 f411      	BRNE _0x2040003
000af6 e0e0      	LDI  R30,LOW(0)
000af7 c088      	RJMP _0x20C0005
                 _0x2040003:
000af8 81e9      	LDD  R30,Y+1
000af9 81fa      	LDD  R31,Y+1+1
000afa 9730      	SBIW R30,0
000afb f081      	BREQ _0x2040004
000afc e5a5      	LDI  R26,LOW(85)
000afd 940e 0ebc 	CALL _w1_write
000aff e010      	LDI  R17,LOW(0)
                 _0x2040006:
000b00 81a9      	LDD  R26,Y+1
000b01 81ba      	LDD  R27,Y+1+1
000b02 91ed      	LD   R30,X+
000b03 83a9      	STD  Y+1,R26
000b04 83ba      	STD  Y+1+1,R27
000b05 2fae      	MOV  R26,R30
000b06 940e 0ebc 	CALL _w1_write
000b08 5f1f      	SUBI R17,-LOW(1)
000b09 3018      	CPI  R17,8
000b0a f3a8      	BRLO _0x2040006
000b0b c003      	RJMP _0x2040008
                 _0x2040004:
000b0c ecac      	LDI  R26,LOW(204)
000b0d 940e 0ebc 	CALL _w1_write
                 _0x2040008:
000b0f e0e1      	LDI  R30,LOW(1)
000b10 c06f      	RJMP _0x20C0005
                 _ds18b20_read_spd:
000b11 93ba      	ST   -Y,R27
000b12 93aa      	ST   -Y,R26
000b13 940e 11ed 	CALL __SAVELOCR4
000b15 81ac      	LDD  R26,Y+4
000b16 81bd      	LDD  R27,Y+4+1
000b17 dfd7      	RCALL _ds18b20_select
000b18 30e0      	CPI  R30,0
000b19 f411      	BRNE _0x2040009
000b1a e0e0      	LDI  R30,LOW(0)
000b1b c01b      	RJMP _0x20C0006
                 _0x2040009:
000b1c ebae      	LDI  R26,LOW(190)
000b1d 940e 0ebc 	CALL _w1_write
000b1f e010      	LDI  R17,LOW(0)
                +
000b20 eb2c     +LDI R18 , LOW ( ___ds18b20_scratch_pad )
000b21 e039     +LDI R19 , HIGH ( ___ds18b20_scratch_pad )
                 	__POINTWRM 18,19,___ds18b20_scratch_pad
                 _0x204000B:
000b22 933f      	PUSH R19
000b23 932f      	PUSH R18
                +
000b24 5f2f     +SUBI R18 , LOW ( - 1 )
000b25 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000b26 940e 0eb7 	CALL _w1_read
000b28 91af      	POP  R26
000b29 91bf      	POP  R27
000b2a 93ec      	ST   X,R30
000b2b 5f1f      	SUBI R17,-LOW(1)
000b2c 3019      	CPI  R17,9
000b2d f3a0      	BRLO _0x204000B
000b2e ebec      	LDI  R30,LOW(___ds18b20_scratch_pad)
000b2f e0f9      	LDI  R31,HIGH(___ds18b20_scratch_pad)
000b30 93fa      	ST   -Y,R31
000b31 93ea      	ST   -Y,R30
000b32 e0a9      	LDI  R26,LOW(9)
000b33 940e 0f35 	CALL _w1_dow_crc8
000b35 940e 1114 	CALL __LNEGB1
                 _0x20C0006:
000b37 940e 11f4 	CALL __LOADLOCR4
000b39 9626      	ADIW R28,6
000b3a 9508      	RET
                 _ds18b20_temperature:
000b3b 93ba      	ST   -Y,R27
000b3c 93aa      	ST   -Y,R26
000b3d 931a      	ST   -Y,R17
000b3e 81a9      	LDD  R26,Y+1
000b3f 81ba      	LDD  R27,Y+1+1
000b40 dfd0      	RCALL _ds18b20_read_spd
000b41 30e0      	CPI  R30,0
000b42 f419      	BRNE _0x204000D
000b43 940e 0e33 	CALL SUBOPT_0x3A
000b45 c03a      	RJMP _0x20C0005
                 _0x204000D:
                +
000b46 91e0 09c0+LDS R30 , ___ds18b20_scratch_pad + ( 4 )
                 	__GETB1MN ___ds18b20_scratch_pad,4
000b48 95e2      	SWAP R30
000b49 70ef      	ANDI R30,0xF
000b4a 95e6      	LSR  R30
000b4b 70e3      	ANDI R30,LOW(0x3)
000b4c 2f1e      	MOV  R17,R30
000b4d 81a9      	LDD  R26,Y+1
000b4e 81ba      	LDD  R27,Y+1+1
000b4f df9f      	RCALL _ds18b20_select
000b50 30e0      	CPI  R30,0
000b51 f419      	BRNE _0x204000E
000b52 940e 0e33 	CALL SUBOPT_0x3A
000b54 c02b      	RJMP _0x20C0005
                 _0x204000E:
000b55 e4a4      	LDI  R26,LOW(68)
000b56 940e 0ebc 	CALL _w1_write
000b58 2fe1      	MOV  R30,R17
000b59 e7a0      	LDI  R26,LOW(_conv_delay_G102*2)
000b5a e0b0      	LDI  R27,HIGH(_conv_delay_G102*2)
000b5b 940e 0e38 	CALL SUBOPT_0x3B
000b5d 940e 11a1 	CALL __GETW2PF
000b5f 940e 0e6c 	CALL _delay_ms
000b61 81a9      	LDD  R26,Y+1
000b62 81ba      	LDD  R27,Y+1+1
000b63 dfad      	RCALL _ds18b20_read_spd
000b64 30e0      	CPI  R30,0
000b65 f419      	BRNE _0x204000F
000b66 940e 0e33 	CALL SUBOPT_0x3A
000b68 c017      	RJMP _0x20C0005
                 _0x204000F:
000b69 940e 0e76 	CALL _w1_init
000b6b 2fe1      	MOV  R30,R17
000b6c e7a8      	LDI  R26,LOW(_bit_mask_G102*2)
000b6d e0b0      	LDI  R27,HIGH(_bit_mask_G102*2)
000b6e 940e 0e38 	CALL SUBOPT_0x3B
000b70 940e 119d 	CALL __GETW1PF
000b72 91a0 09bc 	LDS  R26,___ds18b20_scratch_pad
000b74 91b0 09bd 	LDS  R27,___ds18b20_scratch_pad+1
000b76 23ea      	AND  R30,R26
000b77 23fb      	AND  R31,R27
000b78 940e 0e3e 	CALL SUBOPT_0x3C
                +
000b7a e0a0     +LDI R26 , LOW ( 0x3D800000 )
000b7b e0b0     +LDI R27 , HIGH ( 0x3D800000 )
000b7c e880     +LDI R24 , BYTE3 ( 0x3D800000 )
000b7d e39d     +LDI R25 , BYTE4 ( 0x3D800000 )
                 	__GETD2N 0x3D800000
000b7e 940e 1041 	CALL __MULF12
                 _0x20C0005:
000b80 8118      	LDD  R17,Y+0
000b81 9623      	ADIW R28,3
000b82 9508      	RET
                 _ds18b20_init:
000b83 93aa      	ST   -Y,R26
000b84 81ab      	LDD  R26,Y+3
000b85 81bc      	LDD  R27,Y+3+1
000b86 df68      	RCALL _ds18b20_select
000b87 30e0      	CPI  R30,0
000b88 f411      	BRNE _0x2040010
000b89 e0e0      	LDI  R30,LOW(0)
000b8a c039      	RJMP _0x20C0004
                 _0x2040010:
000b8b 81e8      	LD   R30,Y
000b8c 95e2      	SWAP R30
000b8d 7fe0      	ANDI R30,0xF0
000b8e 0fee      	LSL  R30
000b8f 61ef      	ORI  R30,LOW(0x1F)
000b90 83e8      	ST   Y,R30
000b91 e4ae      	LDI  R26,LOW(78)
000b92 940e 0ebc 	CALL _w1_write
000b94 81a9      	LDD  R26,Y+1
000b95 940e 0ebc 	CALL _w1_write
000b97 81aa      	LDD  R26,Y+2
000b98 940e 0ebc 	CALL _w1_write
000b9a 81a8      	LD   R26,Y
000b9b 940e 0ebc 	CALL _w1_write
000b9d 81ab      	LDD  R26,Y+3
000b9e 81bc      	LDD  R27,Y+3+1
000b9f df71      	RCALL _ds18b20_read_spd
000ba0 30e0      	CPI  R30,0
000ba1 f411      	BRNE _0x2040011
000ba2 e0e0      	LDI  R30,LOW(0)
000ba3 c020      	RJMP _0x20C0004
                 _0x2040011:
                +
000ba4 91a0 09bf+LDS R26 , ___ds18b20_scratch_pad + ( 3 )
                 	__GETB2MN ___ds18b20_scratch_pad,3
000ba6 81ea      	LDD  R30,Y+2
000ba7 17ea      	CP   R30,R26
000ba8 f451      	BRNE _0x2040013
                +
000ba9 91a0 09be+LDS R26 , ___ds18b20_scratch_pad + ( 2 )
                 	__GETB2MN ___ds18b20_scratch_pad,2
000bab 81e9      	LDD  R30,Y+1
000bac 17ea      	CP   R30,R26
000bad f429      	BRNE _0x2040013
                +
000bae 91a0 09c0+LDS R26 , ___ds18b20_scratch_pad + ( 4 )
                 	__GETB2MN ___ds18b20_scratch_pad,4
000bb0 81e8      	LD   R30,Y
000bb1 17ea      	CP   R30,R26
000bb2 f011      	BREQ _0x2040012
                 _0x2040013:
000bb3 e0e0      	LDI  R30,LOW(0)
000bb4 c00f      	RJMP _0x20C0004
                 _0x2040012:
000bb5 81ab      	LDD  R26,Y+3
000bb6 81bc      	LDD  R27,Y+3+1
000bb7 df37      	RCALL _ds18b20_select
000bb8 30e0      	CPI  R30,0
000bb9 f411      	BRNE _0x2040015
000bba e0e0      	LDI  R30,LOW(0)
000bbb c008      	RJMP _0x20C0004
                 _0x2040015:
000bbc e4a8      	LDI  R26,LOW(72)
000bbd 940e 0ebc 	CALL _w1_write
000bbf e0af      	LDI  R26,LOW(15)
000bc0 940e 0cfd 	CALL SUBOPT_0xB
000bc2 940e 0e76 	CALL _w1_init
                 _0x20C0004:
000bc4 9625      	ADIW R28,5
000bc5 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
000bc6 940e 11b8 	CALL __PUTPARD2
000bc8 817b         ldd  r23,y+3
000bc9 816a         ldd  r22,y+2
000bca 81f9         ldd  r31,y+1
000bcb 81e8         ld   r30,y
000bcc fb77         bst  r23,7
000bcd 0f77         lsl  r23
000bce fd67         sbrc r22,7
000bcf 6071         sbr  r23,1
000bd0 2f97         mov  r25,r23
000bd1 579e         subi r25,0x7e
000bd2 f081         breq __ftrunc0
000bd3 f078         brcs __ftrunc0
000bd4 3198         cpi  r25,24
000bd5 f490         brsh __ftrunc1
000bd6 27aa         clr  r26
000bd7 27bb         clr  r27
000bd8 2788         clr  r24
                 __ftrunc2:
000bd9 9408         sec
000bda 9587         ror  r24
000bdb 95b7         ror  r27
000bdc 95a7         ror  r26
000bdd 959a         dec  r25
000bde f7d1         brne __ftrunc2
000bdf 23ea         and  r30,r26
000be0 23fb         and  r31,r27
000be1 2368         and  r22,r24
000be2 c005         rjmp __ftrunc1
                 __ftrunc0:
000be3 94e8         clt
000be4 2777         clr  r23
000be5 27ee         clr  r30
000be6 27ff         clr  r31
000be7 2766         clr  r22
                 __ftrunc1:
000be8 776f         cbr  r22,0x80
000be9 9576         lsr  r23
000bea f408         brcc __ftrunc3
000beb 6860         sbr  r22,0x80
                 __ftrunc3:
000bec f977         bld  r23,7
000bed 91a9         ld   r26,y+
000bee 91b9         ld   r27,y+
000bef 9189         ld   r24,y+
000bf0 9199         ld   r25,y+
000bf1 17ea         cp   r30,r26
000bf2 07fb         cpc  r31,r27
000bf3 0768         cpc  r22,r24
000bf4 0779         cpc  r23,r25
000bf5 fb97         bst  r25,7
000bf6 9508         ret
                 _floor:
000bf7 940e 11b8 	CALL __PUTPARD2
000bf9 940e 11a9 	CALL __GETD2S0
000bfb 940e 0bc6 	CALL _ftrunc
000bfd 940e 11ae 	CALL __PUTD1S0
000bff f419          brne __floor1
                 __floor0:
000c00 940e 11a4 	CALL __GETD1S0
000c02 c009      	RJMP _0x20C0003
                 __floor1:
000c03 f7e6          brtc __floor0
000c04 940e 11a4 	CALL __GETD1S0
                +
000c06 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000c07 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000c08 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000c09 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000c0a 940e 0fea 	CALL __SUBF12
                 _0x20C0003:
000c0c 9624      	ADIW R28,4
000c0d 9508      	RET
                 
                 	.CSEG
                 _ftoa:
000c0e d15f      	RCALL SUBOPT_0x1F
000c0f e0e0      	LDI  R30,LOW(0)
000c10 83ea      	STD  Y+2,R30
000c11 e3ef      	LDI  R30,LOW(63)
000c12 83eb      	STD  Y+3,R30
000c13 931a      	ST   -Y,R17
000c14 930a      	ST   -Y,R16
000c15 85eb      	LDD  R30,Y+11
000c16 85fc      	LDD  R31,Y+11+1
000c17 3fef      	CPI  R30,LOW(0xFFFF)
000c18 efaf      	LDI  R26,HIGH(0xFFFF)
000c19 07fa      	CPC  R31,R26
000c1a f431      	BRNE _0x20A000D
000c1b d227      	RCALL SUBOPT_0x3D
                +
000c1c e9a4     +LDI R26 , LOW ( 2 * _0x20A0000 + ( 0 ) )
000c1d e0b2     +LDI R27 , HIGH ( 2 * _0x20A0000 + ( 0 ) )
                 	__POINTW2FN _0x20A0000,0
000c1e 940e 076d 	CALL _strcpyf
000c20 c084      	RJMP _0x20C0002
                 _0x20A000D:
000c21 3fef      	CPI  R30,LOW(0x7FFF)
000c22 e7af      	LDI  R26,HIGH(0x7FFF)
000c23 07fa      	CPC  R31,R26
000c24 f431      	BRNE _0x20A000C
000c25 d21d      	RCALL SUBOPT_0x3D
                +
000c26 e9a5     +LDI R26 , LOW ( 2 * _0x20A0000 + ( 1 ) )
000c27 e0b2     +LDI R27 , HIGH ( 2 * _0x20A0000 + ( 1 ) )
                 	__POINTW2FN _0x20A0000,1
000c28 940e 076d 	CALL _strcpyf
000c2a c07a      	RJMP _0x20C0002
                 _0x20A000C:
000c2b 85ac      	LDD  R26,Y+12
000c2c 23aa      	TST  R26
000c2d f452      	BRPL _0x20A000F
                +
000c2e 85e9     +LDD R30 , Y + 9
000c2f 85fa     +LDD R31 , Y + 9 + 1
000c30 856b     +LDD R22 , Y + 9 + 2
000c31 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000c32 940e 0f4b 	CALL __ANEGF1
000c34 d213      	RCALL SUBOPT_0x3E
000c35 d217      	RCALL SUBOPT_0x3F
000c36 e2ed      	LDI  R30,LOW(45)
000c37 93ec      	ST   X,R30
                 _0x20A000F:
000c38 85a8      	LDD  R26,Y+8
000c39 30a7      	CPI  R26,LOW(0x7)
000c3a f010      	BRLO _0x20A0010
000c3b e0e6      	LDI  R30,LOW(6)
000c3c 87e8      	STD  Y+8,R30
                 _0x20A0010:
000c3d 8518      	LDD  R17,Y+8
                 _0x20A0011:
000c3e 2fe1      	MOV  R30,R17
000c3f 5011      	SUBI R17,1
000c40 30e0      	CPI  R30,0
000c41 f021      	BREQ _0x20A0013
000c42 d211      	RCALL SUBOPT_0x40
000c43 d16f      	RCALL SUBOPT_0x27
000c44 d214      	RCALL SUBOPT_0x41
000c45 cff8      	RJMP _0x20A0011
                 _0x20A0013:
000c46 d217      	RCALL SUBOPT_0x42
000c47 940e 0ff1 	CALL __ADDF12
000c49 d1fe      	RCALL SUBOPT_0x3E
000c4a e010      	LDI  R17,LOW(0)
                +
000c4b e0e0     +LDI R30 , LOW ( 0x3F800000 )
000c4c e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000c4d e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000c4e e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000c4f d209      	RCALL SUBOPT_0x41
                 _0x20A0014:
000c50 d20d      	RCALL SUBOPT_0x42
000c51 940e 10d4 	CALL __CMPF12
000c53 f068      	BRLO _0x20A0016
000c54 d1ff      	RCALL SUBOPT_0x40
000c55 d14a      	RCALL SUBOPT_0x24
000c56 d202      	RCALL SUBOPT_0x41
000c57 5f1f      	SUBI R17,-LOW(1)
000c58 3217      	CPI  R17,39
000c59 f030      	BRLO _0x20A0017
000c5a d1e8      	RCALL SUBOPT_0x3D
                +
000c5b e9a9     +LDI R26 , LOW ( 2 * _0x20A0000 + ( 5 ) )
000c5c e0b2     +LDI R27 , HIGH ( 2 * _0x20A0000 + ( 5 ) )
                 	__POINTW2FN _0x20A0000,5
000c5d 940e 076d 	CALL _strcpyf
000c5f c045      	RJMP _0x20C0002
                 _0x20A0017:
000c60 cfef      	RJMP _0x20A0014
                 _0x20A0016:
000c61 3010      	CPI  R17,0
000c62 f421      	BRNE _0x20A0018
000c63 d1e9      	RCALL SUBOPT_0x3F
000c64 e3e0      	LDI  R30,LOW(48)
000c65 93ec      	ST   X,R30
000c66 c01d      	RJMP _0x20A0019
                 _0x20A0018:
                 _0x20A001A:
000c67 2fe1      	MOV  R30,R17
000c68 5011      	SUBI R17,1
000c69 30e0      	CPI  R30,0
000c6a f0c9      	BREQ _0x20A001C
000c6b d1e8      	RCALL SUBOPT_0x40
000c6c d146      	RCALL SUBOPT_0x27
000c6d d13e      	RCALL SUBOPT_0x26
000c6e 01df      	MOVW R26,R30
000c6f 01cb      	MOVW R24,R22
000c70 940e 0bf7 	CALL _floor
000c72 d1e6      	RCALL SUBOPT_0x41
000c73 d1ea      	RCALL SUBOPT_0x42
000c74 940e 108f 	CALL __DIVF21
000c76 940e 0f7e 	CALL __CFD1U
000c78 2f0e      	MOV  R16,R30
000c79 d1d3      	RCALL SUBOPT_0x3F
000c7a d146      	RCALL SUBOPT_0x29
000c7b e0f0      	LDI  R31,0
000c7c d1d7      	RCALL SUBOPT_0x40
000c7d d1c0      	RCALL SUBOPT_0x3C
000c7e 940e 1041 	CALL __MULF12
000c80 d1e6      	RCALL SUBOPT_0x43
000c81 d144      	RCALL SUBOPT_0x2A
000c82 d1c5      	RCALL SUBOPT_0x3E
000c83 cfe3      	RJMP _0x20A001A
                 _0x20A001C:
                 _0x20A0019:
000c84 85e8      	LDD  R30,Y+8
000c85 30e0      	CPI  R30,0
000c86 f0d1      	BREQ _0x20C0001
000c87 d1c5      	RCALL SUBOPT_0x3F
000c88 e2ee      	LDI  R30,LOW(46)
000c89 93ec      	ST   X,R30
                 _0x20A001E:
000c8a 85e8      	LDD  R30,Y+8
000c8b 50e1      	SUBI R30,LOW(1)
000c8c 87e8      	STD  Y+8,R30
000c8d 5fef      	SUBI R30,-LOW(1)
000c8e f091      	BREQ _0x20A0020
000c8f d1d7      	RCALL SUBOPT_0x43
000c90 d10f      	RCALL SUBOPT_0x24
000c91 d1b6      	RCALL SUBOPT_0x3E
                +
000c92 85e9     +LDD R30 , Y + 9
000c93 85fa     +LDD R31 , Y + 9 + 1
000c94 856b     +LDD R22 , Y + 9 + 2
000c95 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000c96 940e 0f7e 	CALL __CFD1U
000c98 2f0e      	MOV  R16,R30
000c99 d1b3      	RCALL SUBOPT_0x3F
000c9a d126      	RCALL SUBOPT_0x29
000c9b e0f0      	LDI  R31,0
000c9c d1ca      	RCALL SUBOPT_0x43
000c9d d1a0      	RCALL SUBOPT_0x3C
000c9e d127      	RCALL SUBOPT_0x2A
000c9f d1a8      	RCALL SUBOPT_0x3E
000ca0 cfe9      	RJMP _0x20A001E
                 _0x20A0020:
                 _0x20C0001:
000ca1 81ae      	LDD  R26,Y+6
000ca2 81bf      	LDD  R27,Y+6+1
000ca3 e0e0      	LDI  R30,LOW(0)
000ca4 93ec      	ST   X,R30
                 _0x20C0002:
000ca5 8119      	LDD  R17,Y+1
000ca6 8108      	LDD  R16,Y+0
000ca7 962d      	ADIW R28,13
000ca8 9508      	RET
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 ___ds18b20_scratch_pad:
0009bc           	.BYTE 0x9
                 _rom_codes:
0009c5           	.BYTE 0x48
                 _temperature:
000a0d           	.BYTE 0x20
                 _temperature_old:
000a2d           	.BYTE 0x3C0
                 _lcd_buffer:
000ded           	.BYTE 0x1E
                 _input_buffer:
000e0b           	.BYTE 0x1E
                 _temp_check:
000e29           	.BYTE 0x1
                 _rx_buffer0:
000e2a           	.BYTE 0x1E
                 _tx_buffer0:
000e48           	.BYTE 0x1E
                 
                 	.ESEG
                 _dev:
000000           	.BYTE 0x6
                 
                 	.DSEG
                 _rx_wr_index0:
000e66           	.BYTE 0x1
                 _rx_rd_index0:
000e67           	.BYTE 0x1
                 _rx_counter0:
000e68           	.BYTE 0x1
                 _tx_wr_index0:
000e69           	.BYTE 0x1
                 _tx_rd_index0:
000e6a           	.BYTE 0x1
                 _tx_counter0:
000e6b           	.BYTE 0x1
                 __seed_G105:
000e6c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000ca9 e0a0      	LDI  R26,LOW(_dev)
000caa e0b0      	LDI  R27,HIGH(_dev)
000cab 940e 11ca 	CALL __EEPROMRDB
000cad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
                +
000cae e0a2     +LDI R26 , LOW ( _dev + ( 2 ) )
000caf e0b0     +LDI R27 , HIGH ( _dev + ( 2 ) )
                 	__POINTW2MN _dev,2
000cb0 940e 11ca 	CALL __EEPROMRDB
000cb2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
                +
000cb3 e0a3     +LDI R26 , LOW ( _dev + ( 3 ) )
000cb4 e0b0     +LDI R27 , HIGH ( _dev + ( 3 ) )
                 	__POINTW2MN _dev,3
000cb5 940e 11ca 	CALL __EEPROMRDB
000cb7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
                +
000cb8 e0a4     +LDI R26 , LOW ( _dev + ( 4 ) )
000cb9 e0b0     +LDI R27 , HIGH ( _dev + ( 4 ) )
                 	__POINTW2MN _dev,4
000cba 940e 11ca 	CALL __EEPROMRDB
000cbc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
000cbd 940e 0e76 	CALL _w1_init
000cbf efe0      	LDI  R30,LOW(240)
000cc0 93ea      	ST   -Y,R30
000cc1 eca5      	LDI  R26,LOW(_rom_codes)
000cc2 e0b9      	LDI  R27,HIGH(_rom_codes)
000cc3 940e 0ec6 	CALL _w1_search
000cc5 2e7e      	MOV  R7,R30
000cc6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 27 TIMES, CODE SIZE REDUCTION:49 WORDS
                 SUBOPT_0x5:
000cc7 eeed      	LDI  R30,LOW(_lcd_buffer)
000cc8 e0fd      	LDI  R31,HIGH(_lcd_buffer)
000cc9 93fa      	ST   -Y,R31
000cca 93ea      	ST   -Y,R30
000ccb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x6:
000ccc 93fa      	ST   -Y,R31
000ccd 93ea      	ST   -Y,R30
000cce 2de7      	MOV  R30,R7
000ccf 27ff      	CLR  R31
000cd0 2766      	CLR  R22
000cd1 2777      	CLR  R23
000cd2 940e 11b3 	CALL __PUTPARD1
000cd4 e084      	LDI  R24,4
000cd5 940e 0abb 	CALL _sprintf
000cd7 9628      	ADIW R28,8
000cd8 eead      	LDI  R26,LOW(_lcd_buffer)
000cd9 e0bd      	LDI  R27,HIGH(_lcd_buffer)
000cda 940c 06db 	JMP  _SendData
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x7:
000cdc 93fa      	ST   -Y,R31
000cdd 93ea      	ST   -Y,R30
000cde e080      	LDI  R24,0
000cdf 940e 0abb 	CALL _sprintf
000ce1 9624      	ADIW R28,4
000ce2 eead      	LDI  R26,LOW(_lcd_buffer)
000ce3 e0bd      	LDI  R27,HIGH(_lcd_buffer)
000ce4 940c 06db 	JMP  _SendData
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
000ce6 e0a9      	LDI  R26,LOW(9)
000ce7 9f1a      	MUL  R17,R26
000ce8 01f0      	MOVW R30,R0
000ce9 53eb      	SUBI R30,LOW(-_rom_codes)
000cea 4ff6      	SBCI R31,HIGH(-_rom_codes)
000ceb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9:
000cec 93fa      	ST   -Y,R31
000ced 93ea      	ST   -Y,R30
000cee 2fe1      	MOV  R30,R17
000cef 27ff      	CLR  R31
000cf0 2766      	CLR  R22
000cf1 2777      	CLR  R23
000cf2 940e 11b3 	CALL __PUTPARD1
000cf4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:63 WORDS
                 SUBOPT_0xA:
000cf5 e084      	LDI  R24,4
000cf6 940e 0abb 	CALL _sprintf
000cf8 9628      	ADIW R28,8
000cf9 eead      	LDI  R26,LOW(_lcd_buffer)
000cfa e0bd      	LDI  R27,HIGH(_lcd_buffer)
000cfb 940c 06db 	JMP  _SendData
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xB:
000cfd e0b0      	LDI  R27,0
000cfe 940c 0e6c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
                +
000d00 e0a1     +LDI R26 , LOW ( _dev + ( 1 ) )
000d01 e0b0     +LDI R27 , HIGH ( _dev + ( 1 ) )
                 	__POINTW2MN _dev,1
000d02 940e 11ca 	CALL __EEPROMRDB
000d04 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xD:
000d05 e0f0      	LDI  R31,0
000d06 0de0      	ADD  R30,R0
000d07 1df1      	ADC  R31,R1
000d08 2da3      	MOV  R26,R3
000d09 e0b0      	LDI  R27,0
000d0a 17ae      	CP   R26,R30
000d0b 07bf      	CPC  R27,R31
000d0c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 32 TIMES, CODE SIZE REDUCTION:59 WORDS
                 SUBOPT_0xE:
000d0d e0eb      	LDI  R30,LOW(_input_buffer)
000d0e e0fe      	LDI  R31,HIGH(_input_buffer)
000d0f 93fa      	ST   -Y,R31
000d10 93ea      	ST   -Y,R30
000d11 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:45 WORDS
                 SUBOPT_0xF:
000d12 2fe1      	MOV  R30,R17
000d13 e0ad      	LDI  R26,LOW(_temperature)
000d14 e0ba      	LDI  R27,HIGH(_temperature)
000d15 e0f0      	LDI  R31,0
000d16 940e 1104 	CALL __LSLW2
000d18 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x10:
000d19 0fae      	ADD  R26,R30
000d1a 1fbf      	ADC  R27,R31
000d1b 940e 1192 	CALL __GETD1P
000d1d 01df      	MOVW R26,R30
000d1e 01cb      	MOVW R24,R22
000d1f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
                +
000d20 e0e0     +LDI R30 , LOW ( 0x42500000 )
000d21 e0f0     +LDI R31 , HIGH ( 0x42500000 )
000d22 e560     +LDI R22 , BYTE3 ( 0x42500000 )
000d23 e472     +LDI R23 , BYTE4 ( 0x42500000 )
                 	__GETD1N 0x42500000
000d24 940e 10d4 	CALL __CMPF12
000d26 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
                +
000d27 e0e0     +LDI R30 , LOW ( 0x42840000 )
000d28 e0f0     +LDI R31 , HIGH ( 0x42840000 )
000d29 e864     +LDI R22 , BYTE3 ( 0x42840000 )
000d2a e472     +LDI R23 , BYTE4 ( 0x42840000 )
                 	__GETD1N 0x42840000
000d2b 940e 10d4 	CALL __CMPF12
000d2d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 26 TIMES, CODE SIZE REDUCTION:72 WORDS
                 SUBOPT_0x13:
000d2e 27ff      	CLR  R31
000d2f 2766      	CLR  R22
000d30 2777      	CLR  R23
000d31 940e 11b3 	CALL __PUTPARD1
000d33 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000d34 0fae      	ADD  R26,R30
000d35 1fbf      	ADC  R27,R31
000d36 940e 1192 	CALL __GETD1P
000d38 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x15:
000d39 940e 11b3 	CALL __PUTPARD1
000d3b e088      	LDI  R24,8
000d3c 940e 0abb 	CALL _sprintf
000d3e 962c      	ADIW R28,12
000d3f eead      	LDI  R26,LOW(_lcd_buffer)
000d40 e0bd      	LDI  R27,HIGH(_lcd_buffer)
000d41 940c 06db 	JMP  _SendData
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
000d43 e08c      	LDI  R24,12
000d44 940e 0abb 	CALL _sprintf
000d46 9660      	ADIW R28,16
000d47 eead      	LDI  R26,LOW(_lcd_buffer)
000d48 e0bd      	LDI  R27,HIGH(_lcd_buffer)
000d49 940c 06db 	JMP  _SendData
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
                +
000d4b ede8     +LDI R30 , LOW ( 2 * _0x0 + ( 336 ) )
000d4c e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 336 ) )
                 	__POINTW1FN _0x0,336
000d4d 93fa      	ST   -Y,R31
000d4e 93ea      	ST   -Y,R30
000d4f cfb0      	RJMP SUBOPT_0xC
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
                +
000d50 eeeb     +LDI R30 , LOW ( 2 * _0x0 + ( 355 ) )
000d51 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 355 ) )
                 	__POINTW1FN _0x0,355
000d52 93fa      	ST   -Y,R31
000d53 93ea      	ST   -Y,R30
000d54 cf59      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
                +
000d55 efee     +LDI R30 , LOW ( 2 * _0x0 + ( 374 ) )
000d56 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 374 ) )
                 	__POINTW1FN _0x0,374
000d57 93fa      	ST   -Y,R31
000d58 93ea      	ST   -Y,R30
000d59 cf59      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
                +
000d5a e1e1     +LDI R30 , LOW ( 2 * _0x0 + ( 393 ) )
000d5b e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 393 ) )
                 	__POINTW1FN _0x0,393
000d5c 93fa      	ST   -Y,R31
000d5d 93ea      	ST   -Y,R30
000d5e cf59      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1B:
000d5f 940e 11d6 	CALL __EEPROMWRB
000d61 cf65      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1C:
                +
000d62 91e0 0e11+LDS R30 , _input_buffer + ( 6 )
                 	__GETB1MN _input_buffer,6
000d64 cffa      	RJMP SUBOPT_0x1B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1D:
000d65 50e1      	SUBI R30,LOW(1)
000d66 e0f0      	LDI  R31,0
000d67 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1E:
000d68 91ed      	LD   R30,X+
000d69 91fd      	LD   R31,X+
000d6a 9631      	ADIW R30,1
000d6b 93fe      	ST   -X,R31
000d6c 93ee      	ST   -X,R30
000d6d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1F:
000d6e 93ba      	ST   -Y,R27
000d6f 93aa      	ST   -Y,R26
000d70 9724      	SBIW R28,4
000d71 e0e0      	LDI  R30,LOW(0)
000d72 83e8      	ST   Y,R30
000d73 83e9      	STD  Y+1,R30
000d74 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x20:
                +
000d75 81ac     +LDD R26 , Y + 4
000d76 81bd     +LDD R27 , Y + 4 + 1
000d77 818e     +LDD R24 , Y + 4 + 2
000d78 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000d79 e0e0     +LDI R30 , LOW ( 0x41200000 )
000d7a e0f0     +LDI R31 , HIGH ( 0x41200000 )
000d7b e260     +LDI R22 , BYTE3 ( 0x41200000 )
000d7c e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000d7d 940e 1041 	CALL __MULF12
                +
000d7f 83ec     +STD Y + 4 , R30
000d80 83fd     +STD Y + 4 + 1 , R31
000d81 836e     +STD Y + 4 + 2 , R22
000d82 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000d83 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x21:
                +
000d84 81ec     +LDD R30 , Y + 4
000d85 81fd     +LDD R31 , Y + 4 + 1
000d86 816e     +LDD R22 , Y + 4 + 2
000d87 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000d88 85ac     +LDD R26 , Y + 12
000d89 85bd     +LDD R27 , Y + 12 + 1
000d8a 858e     +LDD R24 , Y + 12 + 2
000d8b 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000d8c 940e 10d4 	CALL __CMPF12
000d8e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x22:
                +
000d8f 85ac     +LDD R26 , Y + 12
000d90 85bd     +LDD R27 , Y + 12 + 1
000d91 858e     +LDD R24 , Y + 12 + 2
000d92 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000d93 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x23:
                +
000d94 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000d95 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000d96 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000d97 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000d98 940e 1041 	CALL __MULF12
                +
000d9a 87ec     +STD Y + 12 , R30
000d9b 87fd     +STD Y + 12 + 1 , R31
000d9c 876e     +STD Y + 12 + 2 , R22
000d9d 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000d9e 5f3f      	SUBI R19,-LOW(1)
000d9f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x24:
                +
000da0 e0e0     +LDI R30 , LOW ( 0x41200000 )
000da1 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000da2 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000da3 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000da4 940e 1041 	CALL __MULF12
000da6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
                +
000da7 87ec     +STD Y + 12 , R30
000da8 87fd     +STD Y + 12 + 1 , R31
000da9 876e     +STD Y + 12 + 2 , R22
000daa 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000dab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x26:
                +
000dac e0a0     +LDI R26 , LOW ( 0x3F000000 )
000dad e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000dae e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000daf e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000db0 940e 0ff1 	CALL __ADDF12
000db2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x27:
                +
000db3 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000db4 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000db5 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000db6 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000db7 940e 1041 	CALL __MULF12
000db9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
000dba 85a8      	LDD  R26,Y+8
000dbb 85b9      	LDD  R27,Y+8+1
000dbc 9611      	ADIW R26,1
000dbd 87a8      	STD  Y+8,R26
000dbe 87b9      	STD  Y+8+1,R27
000dbf 9711      	SBIW R26,1
000dc0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x29:
000dc1 2fe0      	MOV  R30,R16
000dc2 5de0      	SUBI R30,-LOW(48)
000dc3 93ec      	ST   X,R30
000dc4 2fe0      	MOV  R30,R16
000dc5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2A:
000dc6 940e 11bd 	CALL __SWAPD12
000dc8 940e 0fea 	CALL __SUBF12
000dca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2B:
000dcb 85e8      	LDD  R30,Y+8
000dcc 85f9      	LDD  R31,Y+8+1
000dcd 9631      	ADIW R30,1
000dce 87e8      	STD  Y+8,R30
000dcf 87f9      	STD  Y+8+1,R31
000dd0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2C:
000dd1 932a      	ST   -Y,R18
000dd2 81af      	LDD  R26,Y+7
000dd3 85b8      	LDD  R27,Y+7+1
000dd4 85e9      	LDD  R30,Y+9
000dd5 85fa      	LDD  R31,Y+9+1
000dd6 9509      	ICALL
000dd7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x2D:
                +
000dd8 01fe     +MOVW R30 , R28
000dd9 5ae6     +SUBI R30 , LOW ( - 90 )
000dda 4fff     +SBCI R31 , HIGH ( - 90 )
000ddb 9001     +LD R0 , Z +
000ddc 81f0     +LD R31 , Z
000ddd 2de0     +MOV R30 , R0
                 	__GETW1SX 90
000dde 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x2E:
000ddf 9734      	SBIW R30,4
                +
000de0 01de     +MOVW R26 , R28
000de1 5aa6     +SUBI R26 , LOW ( - 90 )
000de2 4fbf     +SBCI R27 , HIGH ( - 90 )
000de3 93ed     +ST X + , R30
000de4 93fc     +ST X , R31
                 	__PUTW1SX 90
000de5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2F:
000de6 81af      	LDD  R26,Y+7
000de7 85b8      	LDD  R27,Y+7+1
000de8 85e9      	LDD  R30,Y+9
000de9 85fa      	LDD  R31,Y+9+1
000dea 9509      	ICALL
000deb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x30:
                +
000dec 01de     +MOVW R26 , R28
000ded 5aa6     +SUBI R26 , LOW ( - 90 )
000dee 4fbf     +SBCI R27 , HIGH ( - 90 )
000def 900d     +LD R0 , X +
000df0 91bc     +LD R27 , X
000df1 2da0     +MOV R26 , R0
                 	__GETW2SX 90
000df2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x31:
                +
000df3 87ea     +STD Y + 10 , R30
000df4 87fb     +STD Y + 10 + 1 , R31
000df5 876c     +STD Y + 10 + 2 , R22
000df6 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000df7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x32:
000df8 dfdf      	RCALL SUBOPT_0x2D
000df9 cfe5      	RJMP SUBOPT_0x2E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x33:
                +
000dfa 85ea     +LDD R30 , Y + 10
000dfb 85fb     +LDD R31 , Y + 10 + 1
000dfc 856c     +LDD R22 , Y + 10 + 2
000dfd 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000dfe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x34:
000dff 87ee      	STD  Y+14,R30
000e00 87ff      	STD  Y+14+1,R31
000e01 85ae      	LDD  R26,Y+14
000e02 85bf      	LDD  R27,Y+14+1
000e03 940e 077a 	CALL _strlen
000e05 2f1e      	MOV  R17,R30
000e06 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x35:
000e07 dfe4      	RCALL SUBOPT_0x30
000e08 9614      	ADIW R26,4
000e09 940e 118e 	CALL __GETW1P
000e0b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x36:
                +
000e0c 8be8     +STD Y + 16 , R30
000e0d 8bf9     +STD Y + 16 + 1 , R31
000e0e 8b6a     +STD Y + 16 + 2 , R22
000e0f 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
000e10 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x37:
000e11 7f0b      	ANDI R16,LOW(251)
000e12 89ed      	LDD  R30,Y+21
000e13 93ea      	ST   -Y,R30
                +
000e14 01de     +MOVW R26 , R28
000e15 5aa9     +SUBI R26 , LOW ( - 87 )
000e16 4fbf     +SBCI R27 , HIGH ( - 87 )
000e17 900d     +LD R0 , X +
000e18 91bc     +LD R27 , X
000e19 2da0     +MOV R26 , R0
                 	__GETW2SX 87
                +
000e1a 01fe     +MOVW R30 , R28
000e1b 5ae7     +SUBI R30 , LOW ( - 89 )
000e1c 4fff     +SBCI R31 , HIGH ( - 89 )
000e1d 9001     +LD R0 , Z +
000e1e 81f0     +LD R31 , Z
000e1f 2de0     +MOV R30 , R0
                 	__GETW1SX 89
000e20 9509      	ICALL
000e21 3050      	CPI  R21,0
000e22 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x38:
                +
000e23 89e8     +LDD R30 , Y + 16
000e24 89f9     +LDD R31 , Y + 16 + 1
000e25 896a     +LDD R22 , Y + 16 + 2
000e26 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
000e27 85aa     +LDD R26 , Y + 10
000e28 85bb     +LDD R27 , Y + 10 + 1
000e29 858c     +LDD R24 , Y + 10 + 2
000e2a 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000e2b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x39:
000e2c 01de      	MOVW R26,R28
000e2d 961c      	ADIW R26,12
000e2e 940e 10f4 	CALL __ADDW2R15
000e30 940e 118e 	CALL __GETW1P
000e32 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
                +
000e33 e0e0     +LDI R30 , LOW ( 0xC61C3C00 )
000e34 e3fc     +LDI R31 , HIGH ( 0xC61C3C00 )
000e35 e16c     +LDI R22 , BYTE3 ( 0xC61C3C00 )
000e36 ec76     +LDI R23 , BYTE4 ( 0xC61C3C00 )
                 	__GETD1N 0xC61C3C00
000e37 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3B:
000e38 e0f0      	LDI  R31,0
000e39 0fee      	LSL  R30
000e3a 1fff      	ROL  R31
000e3b 0fea      	ADD  R30,R26
000e3c 1ffb      	ADC  R31,R27
000e3d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3C:
000e3e 940e 110f 	CALL __CWD1
000e40 940e 0fb7 	CALL __CDF1
000e42 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3D:
000e43 81ee      	LDD  R30,Y+6
000e44 81ff      	LDD  R31,Y+6+1
000e45 93fa      	ST   -Y,R31
000e46 93ea      	ST   -Y,R30
000e47 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3E:
                +
000e48 87e9     +STD Y + 9 , R30
000e49 87fa     +STD Y + 9 + 1 , R31
000e4a 876b     +STD Y + 9 + 2 , R22
000e4b 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
000e4c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3F:
000e4d 81ae      	LDD  R26,Y+6
000e4e 81bf      	LDD  R27,Y+6+1
000e4f 9611      	ADIW R26,1
000e50 83ae      	STD  Y+6,R26
000e51 83bf      	STD  Y+6+1,R27
000e52 9711      	SBIW R26,1
000e53 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x40:
                +
000e54 81aa     +LDD R26 , Y + 2
000e55 81bb     +LDD R27 , Y + 2 + 1
000e56 818c     +LDD R24 , Y + 2 + 2
000e57 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000e58 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x41:
                +
000e59 83ea     +STD Y + 2 , R30
000e5a 83fb     +STD Y + 2 + 1 , R31
000e5b 836c     +STD Y + 2 + 2 , R22
000e5c 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000e5d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x42:
                +
000e5e 81ea     +LDD R30 , Y + 2
000e5f 81fb     +LDD R31 , Y + 2 + 1
000e60 816c     +LDD R22 , Y + 2 + 2
000e61 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000e62 85a9     +LDD R26 , Y + 9
000e63 85ba     +LDD R27 , Y + 9 + 1
000e64 858b     +LDD R24 , Y + 9 + 2
000e65 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000e66 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x43:
                +
000e67 85a9     +LDD R26 , Y + 9
000e68 85ba     +LDD R27 , Y + 9 + 1
000e69 858b     +LDD R24 , Y + 9 + 2
000e6a 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000e6b 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000e6c 9610      	adiw r26,0
000e6d f039      	breq __delay_ms1
                 __delay_ms0:
                +
000e6e ed80     +LDI R24 , LOW ( 0x7D0 )
000e6f e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000e70 9701     +SBIW R24 , 1
000e71 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000e72 95a8      	wdr
000e73 9711      	sbiw r26,1
000e74 f7c9      	brne __delay_ms0
                 __delay_ms1:
000e75 9508      	ret
                 
                 	.equ __w1_port=0x08
                 	.equ __w1_bit=0x00
                 
                 _w1_init:
000e76 27ee      	clr  r30
000e77 9840      	cbi  __w1_port,__w1_bit
000e78 9a38      	sbi  __w1_port-1,__w1_bit
                +
000e79 ec80     +LDI R24 , LOW ( 0x3C0 )
000e7a e093     +LDI R25 , HIGH ( 0x3C0 )
                +__DELAY_USW_LOOP :
000e7b 9701     +SBIW R24 , 1
000e7c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3C0
000e7d 9838      	cbi  __w1_port-1,__w1_bit
                +
000e7e e285     +LDI R24 , LOW ( 0x25 )
                +__DELAY_USB_LOOP :
000e7f 958a     +DEC R24
000e80 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x25
000e81 9b30      	sbis __w1_port-2,__w1_bit
000e82 9508      	ret
                +
000e83 ec8b     +LDI R24 , LOW ( 0xCB )
                +__DELAY_USB_LOOP :
000e84 958a     +DEC R24
000e85 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xCB
000e86 9b30      	sbis __w1_port-2,__w1_bit
000e87 e0e1      	ldi  r30,1
                +
000e88 e08c     +LDI R24 , LOW ( 0x30C )
000e89 e093     +LDI R25 , HIGH ( 0x30C )
                +__DELAY_USW_LOOP :
000e8a 9701     +SBIW R24 , 1
000e8b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x30C
000e8c 9508      	ret
                 
                 __w1_read_bit:
000e8d 9a38      	sbi  __w1_port-1,__w1_bit
                +
000e8e e085     +LDI R24 , LOW ( 0x5 )
                +__DELAY_USB_LOOP :
000e8f 958a     +DEC R24
000e90 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x5
000e91 9838      	cbi  __w1_port-1,__w1_bit
                +
000e92 e18d     +LDI R24 , LOW ( 0x1D )
                +__DELAY_USB_LOOP :
000e93 958a     +DEC R24
000e94 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x1D
000e95 9488      	clc
000e96 9930      	sbic __w1_port-2,__w1_bit
000e97 9408      	sec
000e98 95e7      	ror  r30
                +
000e99 ed85     +LDI R24 , LOW ( 0xD5 )
                +__DELAY_USB_LOOP :
000e9a 958a     +DEC R24
000e9b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xD5
000e9c 9508      	ret
                 
                 __w1_write_bit:
000e9d 94e8      	clt
000e9e 9a38      	sbi  __w1_port-1,__w1_bit
                +
000e9f e085     +LDI R24 , LOW ( 0x5 )
                +__DELAY_USB_LOOP :
000ea0 958a     +DEC R24
000ea1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x5
000ea2 fd70      	sbrc r23,0
000ea3 9838      	cbi  __w1_port-1,__w1_bit
                +
000ea4 e283     +LDI R24 , LOW ( 0x23 )
                +__DELAY_USB_LOOP :
000ea5 958a     +DEC R24
000ea6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x23
000ea7 9930      	sbic __w1_port-2,__w1_bit
000ea8 c003      	rjmp __w1_write_bit0
000ea9 ff70      	sbrs r23,0
000eaa c003      	rjmp __w1_write_bit1
000eab 9508      	ret
                 __w1_write_bit0:
000eac ff70      	sbrs r23,0
000ead 9508      	ret
                 __w1_write_bit1:
                +
000eae ec88     +LDI R24 , LOW ( 0xC8 )
                +__DELAY_USB_LOOP :
000eaf 958a     +DEC R24
000eb0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xC8
000eb1 9838      	cbi  __w1_port-1,__w1_bit
                +
000eb2 e08d     +LDI R24 , LOW ( 0xD )
                +__DELAY_USB_LOOP :
000eb3 958a     +DEC R24
000eb4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xD
000eb5 9468      	set
000eb6 9508      	ret
                 
                 _w1_read:
000eb7 e068      	ldi  r22,8
                 	__w1_read0:
000eb8 dfd4      	rcall __w1_read_bit
000eb9 956a      	dec  r22
000eba f7e9      	brne __w1_read0
000ebb 9508      	ret
                 
                 _w1_write:
000ebc 2f7a      	mov  r23,r26
000ebd e068      	ldi  r22,8
000ebe 27ee      	clr  r30
                 __w1_write0:
000ebf dfdd      	rcall __w1_write_bit
000ec0 f426      	brtc __w1_write1
000ec1 9577      	ror  r23
000ec2 956a      	dec  r22
000ec3 f7d9      	brne __w1_write0
000ec4 95e3      	inc  r30
                 __w1_write1:
000ec5 9508      	ret
                 
                 _w1_search:
000ec6 934f      	push r20
000ec7 935f      	push r21
000ec8 2411      	clr  r1
000ec9 2744      	clr  r20
                 __w1_search0:
000eca 2c01      	mov  r0,r1
000ecb 2411      	clr  r1
000ecc dfa9      	rcall _w1_init
000ecd 23ee      	tst  r30
000ece f101      	breq __w1_search7
000ecf 93af      	push r26
000ed0 81a8      	ld   r26,y
000ed1 dfea      	rcall _w1_write
000ed2 91af      	pop  r26
000ed3 e051      	ldi  r21,1
                 __w1_search1:
000ed4 1550      	cp   r21,r0
000ed5 f498      	brsh __w1_search6
000ed6 dfb6      	rcall __w1_read_bit
000ed7 fde7      	sbrc r30,7
000ed8 c008      	rjmp __w1_search2
000ed9 dfb3      	rcall __w1_read_bit
000eda fde7      	sbrc r30,7
000edb c006      	rjmp __w1_search3
000edc d03f      	rcall __sel_bit
000edd 2389      	and  r24,r25
000ede f419      	brne __w1_search3
000edf 2e15      	mov  r1,r21
000ee0 c001      	rjmp __w1_search3
                 __w1_search2:
000ee1 dfab      	rcall __w1_read_bit
                 __w1_search3:
000ee2 d039      	rcall __sel_bit
000ee3 2389      	and  r24,r25
000ee4 e070      	ldi  r23,0
000ee5 f009      	breq __w1_search5
                 __w1_search4:
000ee6 e071      	ldi  r23,1
                 __w1_search5:
000ee7 dfb5      	rcall __w1_write_bit
000ee8 c01e      	rjmp __w1_search13
                 __w1_search6:
000ee9 dfa3      	rcall __w1_read_bit
000eea ffe7      	sbrs r30,7
000eeb c00b      	rjmp __w1_search9
000eec dfa0      	rcall __w1_read_bit
000eed ffe7      	sbrs r30,7
000eee c005      	rjmp __w1_search8
                 __w1_search7:
000eef 2fe4      	mov  r30,r20
000ef0 915f      	pop  r21
000ef1 914f      	pop  r20
000ef2 9621      	adiw r28,1
000ef3 9508      	ret
                 __w1_search8:
000ef4 9468      	set
000ef5 d037      	rcall __set_bit
000ef6 cfef      	rjmp __w1_search4
                 __w1_search9:
000ef7 df95      	rcall __w1_read_bit
000ef8 ffe7      	sbrs r30,7
000ef9 c001      	rjmp __w1_search10
000efa c003      	rjmp __w1_search11
                 __w1_search10:
000efb 1550      	cp   r21,r0
000efc f031      	breq __w1_search12
000efd 2e15      	mov  r1,r21
                 __w1_search11:
000efe 94e8      	clt
000eff d02d      	rcall __set_bit
000f00 2777      	clr  r23
000f01 df9b      	rcall __w1_write_bit
000f02 c004      	rjmp __w1_search13
                 __w1_search12:
000f03 9468      	set
000f04 d028      	rcall __set_bit
000f05 e071      	ldi  r23,1
000f06 df96      	rcall __w1_write_bit
                 __w1_search13:
000f07 9553      	inc  r21
000f08 3451      	cpi  r21,65
000f09 f254      	brlt __w1_search1
000f0a df82      	rcall __w1_read_bit
000f0b 1fee      	rol  r30
000f0c 1fee      	rol  r30
000f0d 70e1      	andi r30,1
000f0e 9618      	adiw r26,8
000f0f 93ec      	st   x,r30
000f10 9718      	sbiw r26,8
000f11 9543      	inc  r20
000f12 2011      	tst  r1
000f13 f2d9      	breq __w1_search7
000f14 e059      	ldi  r21,9
                 __w1_search14:
000f15 91ec      	ld   r30,x
000f16 9619      	adiw r26,9
000f17 93ec      	st   x,r30
000f18 9718      	sbiw r26,8
000f19 955a      	dec  r21
000f1a f7d1      	brne __w1_search14
000f1b cfae      	rjmp __w1_search0
                 
                 __sel_bit:
000f1c 2fe5      	mov  r30,r21
000f1d 95ea      	dec  r30
000f1e 2f6e      	mov  r22,r30
000f1f 95e6      	lsr  r30
000f20 95e6      	lsr  r30
000f21 95e6      	lsr  r30
000f22 27ff      	clr  r31
000f23 0fea      	add  r30,r26
000f24 1ffb      	adc  r31,r27
000f25 8180      	ld   r24,z
000f26 e091      	ldi  r25,1
000f27 7067      	andi r22,7
                 __sel_bit0:
000f28 f019      	breq __sel_bit1
000f29 0f99      	lsl  r25
000f2a 956a      	dec  r22
000f2b cffc      	rjmp __sel_bit0
                 __sel_bit1:
000f2c 9508      	ret
                 
                 __set_bit:
000f2d dfee      	rcall __sel_bit
000f2e f01e      	brts __set_bit2
000f2f 9590      	com  r25
000f30 2389      	and  r24,r25
000f31 c001      	rjmp __set_bit3
                 __set_bit2:
000f32 2b89      	or   r24,r25
                 __set_bit3:
000f33 8380      	st   z,r24
000f34 9508      	ret
                 
                 _w1_dow_crc8:
000f35 27ee      	clr  r30
000f36 23aa      	tst  r26
000f37 f089      	breq __w1_dow_crc83
000f38 2f8a      	mov  r24,r26
000f39 e168      	ldi  r22,0x18
000f3a 81a8      	ld   r26,y
000f3b 81b9      	ldd  r27,y+1
                 __w1_dow_crc80:
000f3c e098      	ldi  r25,8
000f3d 91fd      	ld   r31,x+
                 __w1_dow_crc81:
000f3e 2f7f      	mov  r23,r31
000f3f 277e      	eor  r23,r30
000f40 9577      	ror  r23
000f41 f408      	brcc __w1_dow_crc82
000f42 27e6      	eor  r30,r22
                 __w1_dow_crc82:
000f43 95e7      	ror  r30
000f44 95f6      	lsr  r31
000f45 959a      	dec  r25
000f46 f7b9      	brne __w1_dow_crc81
000f47 958a      	dec  r24
000f48 f799      	brne __w1_dow_crc80
                 __w1_dow_crc83:
000f49 9622      	adiw r28,2
000f4a 9508      	ret
                 
                 __ANEGF1:
000f4b 9730      	SBIW R30,0
000f4c 4060      	SBCI R22,0
000f4d 4070      	SBCI R23,0
000f4e f009      	BREQ __ANEGF10
000f4f 5870      	SUBI R23,0x80
                 __ANEGF10:
000f50 9508      	RET
                 
                 __ROUND_REPACK:
000f51 2355      	TST  R21
000f52 f442      	BRPL __REPACK
000f53 3850      	CPI  R21,0x80
000f54 f411      	BRNE __ROUND_REPACK0
000f55 ffe0      	SBRS R30,0
000f56 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000f57 9631      	ADIW R30,1
000f58 1f69      	ADC  R22,R25
000f59 1f79      	ADC  R23,R25
000f5a f06b      	BRVS __REPACK1
                 
                 __REPACK:
000f5b e850      	LDI  R21,0x80
000f5c 2757      	EOR  R21,R23
000f5d f411      	BRNE __REPACK0
000f5e 935f      	PUSH R21
000f5f c0cf      	RJMP __ZERORES
                 __REPACK0:
000f60 3f5f      	CPI  R21,0xFF
000f61 f031      	BREQ __REPACK1
000f62 0f66      	LSL  R22
000f63 0c00      	LSL  R0
000f64 9557      	ROR  R21
000f65 9567      	ROR  R22
000f66 2f75      	MOV  R23,R21
000f67 9508      	RET
                 __REPACK1:
000f68 935f      	PUSH R21
000f69 2000      	TST  R0
000f6a f00a      	BRMI __REPACK2
000f6b c0cf      	RJMP __MAXRES
                 __REPACK2:
000f6c c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000f6d e850      	LDI  R21,0x80
000f6e 2e19      	MOV  R1,R25
000f6f 2215      	AND  R1,R21
000f70 0f88      	LSL  R24
000f71 1f99      	ROL  R25
000f72 2795      	EOR  R25,R21
000f73 0f55      	LSL  R21
000f74 9587      	ROR  R24
                 
                 __UNPACK1:
000f75 e850      	LDI  R21,0x80
000f76 2e07      	MOV  R0,R23
000f77 2205      	AND  R0,R21
000f78 0f66      	LSL  R22
000f79 1f77      	ROL  R23
000f7a 2775      	EOR  R23,R21
000f7b 0f55      	LSL  R21
000f7c 9567      	ROR  R22
000f7d 9508      	RET
                 
                 __CFD1U:
000f7e 9468      	SET
000f7f c001      	RJMP __CFD1U0
                 __CFD1:
000f80 94e8      	CLT
                 __CFD1U0:
000f81 935f      	PUSH R21
000f82 dff2      	RCALL __UNPACK1
000f83 3870      	CPI  R23,0x80
000f84 f018      	BRLO __CFD10
000f85 3f7f      	CPI  R23,0xFF
000f86 f408      	BRCC __CFD10
000f87 c0a7      	RJMP __ZERORES
                 __CFD10:
000f88 e156      	LDI  R21,22
000f89 1b57      	SUB  R21,R23
000f8a f4aa      	BRPL __CFD11
000f8b 9551      	NEG  R21
000f8c 3058      	CPI  R21,8
000f8d f40e      	BRTC __CFD19
000f8e 3059      	CPI  R21,9
                 __CFD19:
000f8f f030      	BRLO __CFD17
000f90 efef      	SER  R30
000f91 efff      	SER  R31
000f92 ef6f      	SER  R22
000f93 e77f      	LDI  R23,0x7F
000f94 f977      	BLD  R23,7
000f95 c01a      	RJMP __CFD15
                 __CFD17:
000f96 2777      	CLR  R23
000f97 2355      	TST  R21
000f98 f0b9      	BREQ __CFD15
                 __CFD18:
000f99 0fee      	LSL  R30
000f9a 1fff      	ROL  R31
000f9b 1f66      	ROL  R22
000f9c 1f77      	ROL  R23
000f9d 955a      	DEC  R21
000f9e f7d1      	BRNE __CFD18
000f9f c010      	RJMP __CFD15
                 __CFD11:
000fa0 2777      	CLR  R23
                 __CFD12:
000fa1 3058      	CPI  R21,8
000fa2 f028      	BRLO __CFD13
000fa3 2fef      	MOV  R30,R31
000fa4 2ff6      	MOV  R31,R22
000fa5 2f67      	MOV  R22,R23
000fa6 5058      	SUBI R21,8
000fa7 cff9      	RJMP __CFD12
                 __CFD13:
000fa8 2355      	TST  R21
000fa9 f031      	BREQ __CFD15
                 __CFD14:
000faa 9576      	LSR  R23
000fab 9567      	ROR  R22
000fac 95f7      	ROR  R31
000fad 95e7      	ROR  R30
000fae 955a      	DEC  R21
000faf f7d1      	BRNE __CFD14
                 __CFD15:
000fb0 2000      	TST  R0
000fb1 f40a      	BRPL __CFD16
000fb2 d149      	RCALL __ANEGD1
                 __CFD16:
000fb3 915f      	POP  R21
000fb4 9508      	RET
                 
                 __CDF1U:
000fb5 9468      	SET
000fb6 c001      	RJMP __CDF1U0
                 __CDF1:
000fb7 94e8      	CLT
                 __CDF1U0:
000fb8 9730      	SBIW R30,0
000fb9 4060      	SBCI R22,0
000fba 4070      	SBCI R23,0
000fbb f0b1      	BREQ __CDF10
000fbc 2400      	CLR  R0
000fbd f026      	BRTS __CDF11
000fbe 2377      	TST  R23
000fbf f412      	BRPL __CDF11
000fc0 9400      	COM  R0
000fc1 d13a      	RCALL __ANEGD1
                 __CDF11:
000fc2 2e17      	MOV  R1,R23
000fc3 e17e      	LDI  R23,30
000fc4 2011      	TST  R1
                 __CDF12:
000fc5 f032      	BRMI __CDF13
000fc6 957a      	DEC  R23
000fc7 0fee      	LSL  R30
000fc8 1fff      	ROL  R31
000fc9 1f66      	ROL  R22
000fca 1c11      	ROL  R1
000fcb cff9      	RJMP __CDF12
                 __CDF13:
000fcc 2fef      	MOV  R30,R31
000fcd 2ff6      	MOV  R31,R22
000fce 2d61      	MOV  R22,R1
000fcf 935f      	PUSH R21
000fd0 df8a      	RCALL __REPACK
000fd1 915f      	POP  R21
                 __CDF10:
000fd2 9508      	RET
                 
                 __SWAPACC:
000fd3 934f      	PUSH R20
000fd4 01af      	MOVW R20,R30
000fd5 01fd      	MOVW R30,R26
000fd6 01da      	MOVW R26,R20
000fd7 01ab      	MOVW R20,R22
000fd8 01bc      	MOVW R22,R24
000fd9 01ca      	MOVW R24,R20
000fda 2d40      	MOV  R20,R0
000fdb 2c01      	MOV  R0,R1
000fdc 2e14      	MOV  R1,R20
000fdd 914f      	POP  R20
000fde 9508      	RET
                 
                 __UADD12:
000fdf 0fea      	ADD  R30,R26
000fe0 1ffb      	ADC  R31,R27
000fe1 1f68      	ADC  R22,R24
000fe2 9508      	RET
                 
                 __NEGMAN1:
000fe3 95e0      	COM  R30
000fe4 95f0      	COM  R31
000fe5 9560      	COM  R22
000fe6 5fef      	SUBI R30,-1
000fe7 4fff      	SBCI R31,-1
000fe8 4f6f      	SBCI R22,-1
000fe9 9508      	RET
                 
                 __SUBF12:
000fea 935f      	PUSH R21
000feb df81      	RCALL __UNPACK
000fec 3890      	CPI  R25,0x80
000fed f171      	BREQ __ADDF129
000fee e850      	LDI  R21,0x80
000fef 2615      	EOR  R1,R21
                 
000ff0 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000ff1 935f      	PUSH R21
000ff2 df7a      	RCALL __UNPACK
000ff3 3890      	CPI  R25,0x80
000ff4 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000ff5 3870      	CPI  R23,0x80
000ff6 f121      	BREQ __ADDF128
                 __ADDF121:
000ff7 2f57      	MOV  R21,R23
000ff8 1b59      	SUB  R21,R25
000ff9 f12b      	BRVS __ADDF1211
000ffa f412      	BRPL __ADDF122
000ffb dfd7      	RCALL __SWAPACC
000ffc cffa      	RJMP __ADDF121
                 __ADDF122:
000ffd 3158      	CPI  R21,24
000ffe f018      	BRLO __ADDF123
000fff 27aa      	CLR  R26
001000 27bb      	CLR  R27
001001 2788      	CLR  R24
                 __ADDF123:
001002 3058      	CPI  R21,8
001003 f028      	BRLO __ADDF124
001004 2fab      	MOV  R26,R27
001005 2fb8      	MOV  R27,R24
001006 2788      	CLR  R24
001007 5058      	SUBI R21,8
001008 cff9      	RJMP __ADDF123
                 __ADDF124:
001009 2355      	TST  R21
00100a f029      	BREQ __ADDF126
                 __ADDF125:
00100b 9586      	LSR  R24
00100c 95b7      	ROR  R27
00100d 95a7      	ROR  R26
00100e 955a      	DEC  R21
00100f f7d9      	BRNE __ADDF125
                 __ADDF126:
001010 2d50      	MOV  R21,R0
001011 2551      	EOR  R21,R1
001012 f072      	BRMI __ADDF127
001013 dfcb      	RCALL __UADD12
001014 f438      	BRCC __ADDF129
001015 9567      	ROR  R22
001016 95f7      	ROR  R31
001017 95e7      	ROR  R30
001018 9573      	INC  R23
001019 f413      	BRVC __ADDF129
00101a c020      	RJMP __MAXRES
                 __ADDF128:
00101b dfb7      	RCALL __SWAPACC
                 __ADDF129:
00101c df3e      	RCALL __REPACK
00101d 915f      	POP  R21
00101e 9508      	RET
                 __ADDF1211:
00101f f7d8      	BRCC __ADDF128
001020 cffb      	RJMP __ADDF129
                 __ADDF127:
001021 1bea      	SUB  R30,R26
001022 0bfb      	SBC  R31,R27
001023 0b68      	SBC  R22,R24
001024 f051      	BREQ __ZERORES
001025 f410      	BRCC __ADDF1210
001026 9400      	COM  R0
001027 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
001028 2366      	TST  R22
001029 f392      	BRMI __ADDF129
00102a 0fee      	LSL  R30
00102b 1fff      	ROL  R31
00102c 1f66      	ROL  R22
00102d 957a      	DEC  R23
00102e f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
00102f 27ee      	CLR  R30
001030 27ff      	CLR  R31
001031 2766      	CLR  R22
001032 2777      	CLR  R23
001033 915f      	POP  R21
001034 9508      	RET
                 
                 __MINRES:
001035 efef      	SER  R30
001036 efff      	SER  R31
001037 e76f      	LDI  R22,0x7F
001038 ef7f      	SER  R23
001039 915f      	POP  R21
00103a 9508      	RET
                 
                 __MAXRES:
00103b efef      	SER  R30
00103c efff      	SER  R31
00103d e76f      	LDI  R22,0x7F
00103e e77f      	LDI  R23,0x7F
00103f 915f      	POP  R21
001040 9508      	RET
                 
                 __MULF12:
001041 935f      	PUSH R21
001042 df2a      	RCALL __UNPACK
001043 3870      	CPI  R23,0x80
001044 f351      	BREQ __ZERORES
001045 3890      	CPI  R25,0x80
001046 f341      	BREQ __ZERORES
001047 2401      	EOR  R0,R1
001048 9408      	SEC
001049 1f79      	ADC  R23,R25
00104a f423      	BRVC __MULF124
00104b f31c      	BRLT __ZERORES
                 __MULF125:
00104c 2000      	TST  R0
00104d f33a      	BRMI __MINRES
00104e cfec      	RJMP __MAXRES
                 __MULF124:
00104f 920f      	PUSH R0
001050 931f      	PUSH R17
001051 932f      	PUSH R18
001052 933f      	PUSH R19
001053 934f      	PUSH R20
001054 2711      	CLR  R17
001055 2722      	CLR  R18
001056 2799      	CLR  R25
001057 9f68      	MUL  R22,R24
001058 01a0      	MOVW R20,R0
001059 9f8f      	MUL  R24,R31
00105a 2d30      	MOV  R19,R0
00105b 0d41      	ADD  R20,R1
00105c 1f59      	ADC  R21,R25
00105d 9f6b      	MUL  R22,R27
00105e 0d30      	ADD  R19,R0
00105f 1d41      	ADC  R20,R1
001060 1f59      	ADC  R21,R25
001061 9f8e      	MUL  R24,R30
001062 d027      	RCALL __MULF126
001063 9fbf      	MUL  R27,R31
001064 d025      	RCALL __MULF126
001065 9f6a      	MUL  R22,R26
001066 d023      	RCALL __MULF126
001067 9fbe      	MUL  R27,R30
001068 d01d      	RCALL __MULF127
001069 9faf      	MUL  R26,R31
00106a d01b      	RCALL __MULF127
00106b 9fae      	MUL  R26,R30
00106c 0d11      	ADD  R17,R1
00106d 1f29      	ADC  R18,R25
00106e 1f39      	ADC  R19,R25
00106f 1f49      	ADC  R20,R25
001070 1f59      	ADC  R21,R25
001071 2fe3      	MOV  R30,R19
001072 2ff4      	MOV  R31,R20
001073 2f65      	MOV  R22,R21
001074 2f52      	MOV  R21,R18
001075 914f      	POP  R20
001076 913f      	POP  R19
001077 912f      	POP  R18
001078 911f      	POP  R17
001079 900f      	POP  R0
00107a 2366      	TST  R22
00107b f02a      	BRMI __MULF122
00107c 0f55      	LSL  R21
00107d 1fee      	ROL  R30
00107e 1fff      	ROL  R31
00107f 1f66      	ROL  R22
001080 c002      	RJMP __MULF123
                 __MULF122:
001081 9573      	INC  R23
001082 f24b      	BRVS __MULF125
                 __MULF123:
001083 decd      	RCALL __ROUND_REPACK
001084 915f      	POP  R21
001085 9508      	RET
                 
                 __MULF127:
001086 0d10      	ADD  R17,R0
001087 1d21      	ADC  R18,R1
001088 1f39      	ADC  R19,R25
001089 c002      	RJMP __MULF128
                 __MULF126:
00108a 0d20      	ADD  R18,R0
00108b 1d31      	ADC  R19,R1
                 __MULF128:
00108c 1f49      	ADC  R20,R25
00108d 1f59      	ADC  R21,R25
00108e 9508      	RET
                 
                 __DIVF21:
00108f 935f      	PUSH R21
001090 dedc      	RCALL __UNPACK
001091 3870      	CPI  R23,0x80
001092 f421      	BRNE __DIVF210
001093 2011      	TST  R1
                 __DIVF211:
001094 f40a      	BRPL __DIVF219
001095 cf9f      	RJMP __MINRES
                 __DIVF219:
001096 cfa4      	RJMP __MAXRES
                 __DIVF210:
001097 3890      	CPI  R25,0x80
001098 f409      	BRNE __DIVF218
                 __DIVF217:
001099 cf95      	RJMP __ZERORES
                 __DIVF218:
00109a 2401      	EOR  R0,R1
00109b 9408      	SEC
00109c 0b97      	SBC  R25,R23
00109d f41b      	BRVC __DIVF216
00109e f3d4      	BRLT __DIVF217
00109f 2000      	TST  R0
0010a0 cff3      	RJMP __DIVF211
                 __DIVF216:
0010a1 2f79      	MOV  R23,R25
0010a2 931f      	PUSH R17
0010a3 932f      	PUSH R18
0010a4 933f      	PUSH R19
0010a5 934f      	PUSH R20
0010a6 2411      	CLR  R1
0010a7 2711      	CLR  R17
0010a8 2722      	CLR  R18
0010a9 2733      	CLR  R19
0010aa 2744      	CLR  R20
0010ab 2755      	CLR  R21
0010ac e290      	LDI  R25,32
                 __DIVF212:
0010ad 17ae      	CP   R26,R30
0010ae 07bf      	CPC  R27,R31
0010af 0786      	CPC  R24,R22
0010b0 0741      	CPC  R20,R17
0010b1 f030      	BRLO __DIVF213
0010b2 1bae      	SUB  R26,R30
0010b3 0bbf      	SBC  R27,R31
0010b4 0b86      	SBC  R24,R22
0010b5 0b41      	SBC  R20,R17
0010b6 9408      	SEC
0010b7 c001      	RJMP __DIVF214
                 __DIVF213:
0010b8 9488      	CLC
                 __DIVF214:
0010b9 1f55      	ROL  R21
0010ba 1f22      	ROL  R18
0010bb 1f33      	ROL  R19
0010bc 1c11      	ROL  R1
0010bd 1faa      	ROL  R26
0010be 1fbb      	ROL  R27
0010bf 1f88      	ROL  R24
0010c0 1f44      	ROL  R20
0010c1 959a      	DEC  R25
0010c2 f751      	BRNE __DIVF212
0010c3 01f9      	MOVW R30,R18
0010c4 2d61      	MOV  R22,R1
0010c5 914f      	POP  R20
0010c6 913f      	POP  R19
0010c7 912f      	POP  R18
0010c8 911f      	POP  R17
0010c9 2366      	TST  R22
0010ca f032      	BRMI __DIVF215
0010cb 0f55      	LSL  R21
0010cc 1fee      	ROL  R30
0010cd 1fff      	ROL  R31
0010ce 1f66      	ROL  R22
0010cf 957a      	DEC  R23
0010d0 f243      	BRVS __DIVF217
                 __DIVF215:
0010d1 de7f      	RCALL __ROUND_REPACK
0010d2 915f      	POP  R21
0010d3 9508      	RET
                 
                 __CMPF12:
0010d4 2399      	TST  R25
0010d5 f09a      	BRMI __CMPF120
0010d6 2377      	TST  R23
0010d7 f042      	BRMI __CMPF121
0010d8 1797      	CP   R25,R23
0010d9 f048      	BRLO __CMPF122
0010da f429      	BRNE __CMPF121
0010db 17ae      	CP   R26,R30
0010dc 07bf      	CPC  R27,R31
0010dd 0786      	CPC  R24,R22
0010de f020      	BRLO __CMPF122
0010df f031      	BREQ __CMPF123
                 __CMPF121:
0010e0 9498      	CLZ
0010e1 9488      	CLC
0010e2 9508      	RET
                 __CMPF122:
0010e3 9498      	CLZ
0010e4 9408      	SEC
0010e5 9508      	RET
                 __CMPF123:
0010e6 9418      	SEZ
0010e7 9488      	CLC
0010e8 9508      	RET
                 __CMPF120:
0010e9 2377      	TST  R23
0010ea f7c2      	BRPL __CMPF122
0010eb 1797      	CP   R25,R23
0010ec f398      	BRLO __CMPF121
0010ed f7a9      	BRNE __CMPF122
0010ee 17ea      	CP   R30,R26
0010ef 07fb      	CPC  R31,R27
0010f0 0768      	CPC  R22,R24
0010f1 f388      	BRLO __CMPF122
0010f2 f399      	BREQ __CMPF123
0010f3 cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
0010f4 2400      	CLR  R0
0010f5 0daf      	ADD  R26,R15
0010f6 1db0      	ADC  R27,R0
0010f7 9508      	RET
                 
                 __ANEGW1:
0010f8 95f1      	NEG  R31
0010f9 95e1      	NEG  R30
0010fa 40f0      	SBCI R31,0
0010fb 9508      	RET
                 
                 __ANEGD1:
0010fc 95f0      	COM  R31
0010fd 9560      	COM  R22
0010fe 9570      	COM  R23
0010ff 95e1      	NEG  R30
001100 4fff      	SBCI R31,-1
001101 4f6f      	SBCI R22,-1
001102 4f7f      	SBCI R23,-1
001103 9508      	RET
                 
                 __LSLW2:
001104 0fee      	LSL  R30
001105 1fff      	ROL  R31
001106 0fee      	LSL  R30
001107 1fff      	ROL  R31
001108 9508      	RET
                 
                 __CBD1:
001109 2ffe      	MOV  R31,R30
00110a 0fff      	ADD  R31,R31
00110b 0bff      	SBC  R31,R31
00110c 2f6f      	MOV  R22,R31
00110d 2f7f      	MOV  R23,R31
00110e 9508      	RET
                 
                 __CWD1:
00110f 2f6f      	MOV  R22,R31
001110 0f66      	ADD  R22,R22
001111 0b66      	SBC  R22,R22
001112 2f76      	MOV  R23,R22
001113 9508      	RET
                 
                 __LNEGB1:
001114 23ee      	TST  R30
001115 e0e1      	LDI  R30,1
001116 f009      	BREQ __LNEGB1F
001117 27ee      	CLR  R30
                 __LNEGB1F:
001118 9508      	RET
                 
                 __DIVB21U:
001119 2400      	CLR  R0
00111a e098      	LDI  R25,8
                 __DIVB21U1:
00111b 0faa      	LSL  R26
00111c 1c00      	ROL  R0
00111d 1a0e      	SUB  R0,R30
00111e f410      	BRCC __DIVB21U2
00111f 0e0e      	ADD  R0,R30
001120 c001      	RJMP __DIVB21U3
                 __DIVB21U2:
001121 60a1      	SBR  R26,1
                 __DIVB21U3:
001122 959a      	DEC  R25
001123 f7b9      	BRNE __DIVB21U1
001124 2fea      	MOV  R30,R26
001125 2da0      	MOV  R26,R0
001126 9508      	RET
                 
                 __DIVB21:
001127 d05a      	RCALL __CHKSIGNB
001128 dff0      	RCALL __DIVB21U
001129 f40e      	BRTC __DIVB211
00112a 95e1      	NEG  R30
                 __DIVB211:
00112b 9508      	RET
                 
                 __DIVW21U:
00112c 2400      	CLR  R0
00112d 2411      	CLR  R1
00112e e190      	LDI  R25,16
                 __DIVW21U1:
00112f 0faa      	LSL  R26
001130 1fbb      	ROL  R27
001131 1c00      	ROL  R0
001132 1c11      	ROL  R1
001133 1a0e      	SUB  R0,R30
001134 0a1f      	SBC  R1,R31
001135 f418      	BRCC __DIVW21U2
001136 0e0e      	ADD  R0,R30
001137 1e1f      	ADC  R1,R31
001138 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001139 60a1      	SBR  R26,1
                 __DIVW21U3:
00113a 959a      	DEC  R25
00113b f799      	BRNE __DIVW21U1
00113c 01fd      	MOVW R30,R26
00113d 01d0      	MOVW R26,R0
00113e 9508      	RET
                 
                 __DIVD21U:
00113f 933f      	PUSH R19
001140 934f      	PUSH R20
001141 935f      	PUSH R21
001142 2400      	CLR  R0
001143 2411      	CLR  R1
001144 2744      	CLR  R20
001145 2755      	CLR  R21
001146 e230      	LDI  R19,32
                 __DIVD21U1:
001147 0faa      	LSL  R26
001148 1fbb      	ROL  R27
001149 1f88      	ROL  R24
00114a 1f99      	ROL  R25
00114b 1c00      	ROL  R0
00114c 1c11      	ROL  R1
00114d 1f44      	ROL  R20
00114e 1f55      	ROL  R21
00114f 1a0e      	SUB  R0,R30
001150 0a1f      	SBC  R1,R31
001151 0b46      	SBC  R20,R22
001152 0b57      	SBC  R21,R23
001153 f428      	BRCC __DIVD21U2
001154 0e0e      	ADD  R0,R30
001155 1e1f      	ADC  R1,R31
001156 1f46      	ADC  R20,R22
001157 1f57      	ADC  R21,R23
001158 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
001159 60a1      	SBR  R26,1
                 __DIVD21U3:
00115a 953a      	DEC  R19
00115b f759      	BRNE __DIVD21U1
00115c 01fd      	MOVW R30,R26
00115d 01bc      	MOVW R22,R24
00115e 01d0      	MOVW R26,R0
00115f 01ca      	MOVW R24,R20
001160 915f      	POP  R21
001161 914f      	POP  R20
001162 913f      	POP  R19
001163 9508      	RET
                 
                 __MODB21:
001164 94e8      	CLT
001165 ffa7      	SBRS R26,7
001166 c002      	RJMP __MODB211
001167 95a1      	NEG  R26
001168 9468      	SET
                 __MODB211:
001169 fde7      	SBRC R30,7
00116a 95e1      	NEG  R30
00116b dfad      	RCALL __DIVB21U
00116c 2fea      	MOV  R30,R26
00116d f40e      	BRTC __MODB212
00116e 95e1      	NEG  R30
                 __MODB212:
00116f 9508      	RET
                 
                 __MODW21:
001170 94e8      	CLT
001171 ffb7      	SBRS R27,7
001172 c004      	RJMP __MODW211
001173 95a0      	COM  R26
001174 95b0      	COM  R27
001175 9611      	ADIW R26,1
001176 9468      	SET
                 __MODW211:
001177 fdf7      	SBRC R31,7
001178 df7f      	RCALL __ANEGW1
001179 dfb2      	RCALL __DIVW21U
00117a 01fd      	MOVW R30,R26
00117b f40e      	BRTC __MODW212
00117c df7b      	RCALL __ANEGW1
                 __MODW212:
00117d 9508      	RET
                 
                 __MODD21U:
00117e dfc0      	RCALL __DIVD21U
00117f 01fd      	MOVW R30,R26
001180 01bc      	MOVW R22,R24
001181 9508      	RET
                 
                 __CHKSIGNB:
001182 94e8      	CLT
001183 ffe7      	SBRS R30,7
001184 c002      	RJMP __CHKSB1
001185 95e1      	NEG  R30
001186 9468      	SET
                 __CHKSB1:
001187 ffa7      	SBRS R26,7
001188 c004      	RJMP __CHKSB2
001189 95a1      	NEG  R26
00118a f800      	BLD  R0,0
00118b 9403      	INC  R0
00118c fa00      	BST  R0,0
                 __CHKSB2:
00118d 9508      	RET
                 
                 __GETW1P:
00118e 91ed      	LD   R30,X+
00118f 91fc      	LD   R31,X
001190 9711      	SBIW R26,1
001191 9508      	RET
                 
                 __GETD1P:
001192 91ed      	LD   R30,X+
001193 91fd      	LD   R31,X+
001194 916d      	LD   R22,X+
001195 917c      	LD   R23,X
001196 9713      	SBIW R26,3
001197 9508      	RET
                 
                 __PUTDP1:
001198 93ed      	ST   X+,R30
001199 93fd      	ST   X+,R31
00119a 936d      	ST   X+,R22
00119b 937c      	ST   X,R23
00119c 9508      	RET
                 
                 __GETW1PF:
00119d 9005      	LPM  R0,Z+
00119e 91f4      	LPM  R31,Z
00119f 2de0      	MOV  R30,R0
0011a0 9508      	RET
                 
                 __GETW2PF:
0011a1 91a5      	LPM  R26,Z+
0011a2 91b4      	LPM  R27,Z
0011a3 9508      	RET
                 
                 __GETD1S0:
0011a4 81e8      	LD   R30,Y
0011a5 81f9      	LDD  R31,Y+1
0011a6 816a      	LDD  R22,Y+2
0011a7 817b      	LDD  R23,Y+3
0011a8 9508      	RET
                 
                 __GETD2S0:
0011a9 81a8      	LD   R26,Y
0011aa 81b9      	LDD  R27,Y+1
0011ab 818a      	LDD  R24,Y+2
0011ac 819b      	LDD  R25,Y+3
0011ad 9508      	RET
                 
                 __PUTD1S0:
0011ae 83e8      	ST   Y,R30
0011af 83f9      	STD  Y+1,R31
0011b0 836a      	STD  Y+2,R22
0011b1 837b      	STD  Y+3,R23
0011b2 9508      	RET
                 
                 __PUTPARD1:
0011b3 937a      	ST   -Y,R23
0011b4 936a      	ST   -Y,R22
0011b5 93fa      	ST   -Y,R31
0011b6 93ea      	ST   -Y,R30
0011b7 9508      	RET
                 
                 __PUTPARD2:
0011b8 939a      	ST   -Y,R25
0011b9 938a      	ST   -Y,R24
0011ba 93ba      	ST   -Y,R27
0011bb 93aa      	ST   -Y,R26
0011bc 9508      	RET
                 
                 __SWAPD12:
0011bd 2e18      	MOV  R1,R24
0011be 2f86      	MOV  R24,R22
0011bf 2d61      	MOV  R22,R1
0011c0 2e19      	MOV  R1,R25
0011c1 2f97      	MOV  R25,R23
0011c2 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0011c3 2e1b      	MOV  R1,R27
0011c4 2fbf      	MOV  R27,R31
0011c5 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0011c6 2e1a      	MOV  R1,R26
0011c7 2fae      	MOV  R26,R30
0011c8 2de1      	MOV  R30,R1
0011c9 9508      	RET
                 
                 __EEPROMRDB:
0011ca 99f9      	SBIC EECR,EEWE
0011cb cffe      	RJMP __EEPROMRDB
0011cc 93ff      	PUSH R31
0011cd b7ff      	IN   R31,SREG
0011ce 94f8      	CLI
0011cf bda1      	OUT  EEARL,R26
0011d0 bdb2      	OUT  EEARH,R27
0011d1 9af8      	SBI  EECR,EERE
0011d2 b5e0      	IN   R30,EEDR
0011d3 bfff      	OUT  SREG,R31
0011d4 91ff      	POP  R31
0011d5 9508      	RET
                 
                 __EEPROMWRB:
0011d6 9bf9      	SBIS EECR,EEWE
0011d7 c002      	RJMP __EEPROMWRB1
0011d8 95a8      	WDR
0011d9 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0011da b79f      	IN   R25,SREG
0011db 94f8      	CLI
0011dc bda1      	OUT  EEARL,R26
0011dd bdb2      	OUT  EEARH,R27
0011de 9af8      	SBI  EECR,EERE
0011df b580      	IN   R24,EEDR
0011e0 17e8      	CP   R30,R24
0011e1 f019      	BREQ __EEPROMWRB0
0011e2 bde0      	OUT  EEDR,R30
0011e3 9afa      	SBI  EECR,EEMWE
0011e4 9af9      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0011e5 bf9f      	OUT  SREG,R25
0011e6 9508      	RET
                 
                 __CPD10:
0011e7 9730      	SBIW R30,0
0011e8 4060      	SBCI R22,0
0011e9 4070      	SBCI R23,0
0011ea 9508      	RET
                 
                 __SAVELOCR6:
0011eb 935a      	ST   -Y,R21
                 __SAVELOCR5:
0011ec 934a      	ST   -Y,R20
                 __SAVELOCR4:
0011ed 933a      	ST   -Y,R19
                 __SAVELOCR3:
0011ee 932a      	ST   -Y,R18
                 __SAVELOCR2:
0011ef 931a      	ST   -Y,R17
0011f0 930a      	ST   -Y,R16
0011f1 9508      	RET
                 
                 __LOADLOCR6:
0011f2 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0011f3 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0011f4 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0011f5 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0011f6 8119      	LDD  R17,Y+1
0011f7 8108      	LD   R16,Y
0011f8 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega644 register use summary:
r0 :  88 r1 :  49 r2 :   0 r3 :  12 r4 :   3 r5 :   5 r6 :   6 r7 :   8 
r8 :   4 r9 :   4 r10:   4 r11:   3 r12:   5 r13:   6 r14:   6 r15:   4 
r16:  61 r17: 108 r18:  51 r19:  41 r20:  55 r21: 102 r22: 131 r23: 116 
r24: 103 r25:  77 r26: 374 r27: 205 r28:  39 r29:   1 r30: 778 r31: 255 
x  :  56 y  : 490 z  :  43 
Registers used: 34 out of 35 (97.1%)

ATmega644 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  33 add   :  25 
adiw  :  46 and   :  10 andi  :  12 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :  11 brcs  :   1 break :   0 breq  :  76 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  46 
brlt  :   5 brmi  :  11 brne  : 125 brpl  :   9 brsh  :  13 brtc  :   6 
brts  :   2 brvc  :   4 brvs  :   4 bset  :   0 bst   :   3 call  : 418 
cbi   :  11 cbr   :   2 clc   :   4 clh   :   0 cli   :   5 cln   :   0 
clr   :  86 cls   :   0 clt   :   8 clv   :   0 clz   :   2 com   :  11 
cp    :  40 cpc   :  21 cpi   : 143 cpse  :   0 dec   :  28 des   :   0 
eor   :   9 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 
in    :   8 inc   :  10 jmp   :  44 ld    :  88 ldd   : 224 ldi   : 508 
lds   :  33 lpm   :  18 lsl   :  20 lsr   :   8 mov   : 121 movw  :  65 
mul   :  20 muls  :   0 mulsu :   0 neg   :  11 nop   :   0 or    :   2 
ori   :   9 out   :  32 pop   :  32 push  :  32 rcall : 114 ret   : 136 
reti  :   2 rjmp  : 223 rol   :  40 ror   :  19 sbc   :  12 sbci  :  34 
sbi   :  15 sbic  :   6 sbis  :   3 sbiw  :  36 sbr   :   5 sbrc  :   8 
sbrs  :  26 sec   :   6 seh   :   0 sei   :   3 sen   :   0 ser   :   8 
ses   :   0 set   :   8 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    : 173 std   :  89 sts   :  51 sub   :   8 subi  :  86 swap  :   2 
tst   :  31 wdr   :   3 
Instructions used: 83 out of 116 (71.6%)

ATmega644 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0023f2   8426    776   9202   65536  14.0%
[.dseg] 0x000100 0x000e70      0   1392   1392    4351  32.0%
[.eseg] 0x000000 0x000006      0      6      6    2048   0.3%

Assembly complete, 0 errors, 14 warnings
